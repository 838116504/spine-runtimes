{
  "version": 3,
  "sources": ["../spine-canvas/src/index.ts", "../spine-core/src/Utils.ts", "../spine-core/src/attachments/Attachment.ts", "../spine-core/src/Animation.ts", "../spine-core/src/AnimationState.ts", "../spine-core/src/AnimationStateData.ts", "../spine-core/src/attachments/BoundingBoxAttachment.ts", "../spine-core/src/attachments/ClippingAttachment.ts", "../spine-core/src/Texture.ts", "../spine-core/src/TextureAtlas.ts", "../spine-core/src/attachments/MeshAttachment.ts", "../spine-core/src/attachments/PathAttachment.ts", "../spine-core/src/attachments/PointAttachment.ts", "../spine-core/src/attachments/RegionAttachment.ts", "../spine-core/src/AtlasAttachmentLoader.ts", "../spine-core/src/BoneData.ts", "../spine-core/src/Bone.ts", "../spine-core/src/ConstraintData.ts", "../spine-core/src/AssetManagerBase.ts", "../spine-core/src/Event.ts", "../spine-core/src/EventData.ts", "../spine-core/src/IkConstraint.ts", "../spine-core/src/IkConstraintData.ts", "../spine-core/src/PathConstraintData.ts", "../spine-core/src/PathConstraint.ts", "../spine-core/src/Slot.ts", "../spine-core/src/TransformConstraint.ts", "../spine-core/src/Skeleton.ts", "../spine-core/src/SkeletonData.ts", "../spine-core/src/Skin.ts", "../spine-core/src/SlotData.ts", "../spine-core/src/TransformConstraintData.ts", "../spine-core/src/SkeletonBinary.ts", "../spine-core/src/SkeletonBounds.ts", "../spine-core/src/Triangulator.ts", "../spine-core/src/SkeletonClipping.ts", "../spine-core/src/SkeletonJson.ts", "../spine-core/src/polyfills.ts", "../spine-core/src/vertexeffects/JitterEffect.ts", "../spine-core/src/vertexeffects/SwirlEffect.ts", "../spine-canvas/src/CanvasTexture.ts", "../spine-canvas/src/AssetManager.ts", "../spine-canvas/src/SkeletonRenderer.ts"],
  "sourcesContent": ["export * from \"./AssetManager\";\nexport * from \"./CanvasTexture\";\nexport * from \"./SkeletonRenderer\";\n\nexport * from \"@esotericsoftware/spine-core\"\n\n// Before modularization, we would expose spine-core on the global\n// `spine` object, and spine-canvas on the global `spine.canvas` object.\n// This was used by clients when including spine-canvas via <script src=\"spine-canvas.js\">\n// \n// Now with modularization and using esbuild for bundling, we need to emulate this old\n// behaviour as to not break old clients.\n//\n// We pass `--global-name=spine` to esbuild. This will create an object containing\n// all exports and assign it to the global variable called `spine`.\n//\n// That solves half the issue. We also need to assign the exports object to \n// `spine.canvas`. esbuild creates a local variable called `scr_exports` pointing\n// to the exports object. We get to it via eval, then assign it to itself, on a new\n// property called `canvas`. The client can then access the APIs through `spine` and\n// `spine.canvas` as before (with the caveat that both spine-core and spine-canvas are\n// now in `spine` and `spine.canvas`).\n//\n// This will break if esbuild renames the variable `src_exports` pointing to\n// the exports object.\nlet exports = eval(\"src_exports\");\nif (exports) exports.canvas = exports;", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Skeleton } from \"./Skeleton\";\nimport { MixBlend } from \"./Animation\";\n\nexport interface StringMap<T> {\n\t[key: string]: T;\n}\n\nexport class IntSet {\n\tarray = new Array<number>();\n\n\tadd(value: number): boolean {\n\t\tlet contains = this.contains(value);\n\t\tthis.array[value | 0] = value | 0;\n\t\treturn !contains;\n\t}\n\n\tcontains(value: number) {\n\t\treturn this.array[value | 0] != undefined;\n\t}\n\n\tremove(value: number) {\n\t\tthis.array[value | 0] = undefined;\n\t}\n\n\tclear() {\n\t\tthis.array.length = 0;\n\t}\n}\n\nexport class StringSet {\n\tentries: StringMap<boolean> = {};\n\tsize = 0;\n\n\tadd(value: string): boolean {\n\t\tlet contains = this.entries[value];\n\t\tthis.entries[value] = true;\n\t\tif (!contains) {\n\t\t\tthis.size++;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\taddAll(values: string[]): boolean {\n\t\tlet oldSize = this.size;\n\t\tfor (var i = 0, n = values.length; i < n; i++)\n\t\t\tthis.add(values[i]);\n\t\treturn oldSize != this.size;\n\t}\n\n\tcontains(value: string) {\n\t\treturn this.entries[value];\n\t}\n\n\tclear() {\n\t\tthis.entries = {};\n\t\tthis.size = 0;\n\t}\n}\n\nexport interface NumberArrayLike {\n\treadonly length: number;\n\t[n: number]: number;\n}\n\nexport interface Disposable {\n\tdispose(): void;\n}\n\nexport interface Restorable {\n\trestore(): void;\n}\n\nexport class Color {\n\tpublic static WHITE = new Color(1, 1, 1, 1);\n\tpublic static RED = new Color(1, 0, 0, 1);\n\tpublic static GREEN = new Color(0, 1, 0, 1);\n\tpublic static BLUE = new Color(0, 0, 1, 1);\n\tpublic static MAGENTA = new Color(1, 0, 1, 1);\n\n\tconstructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 0) {\n\t}\n\n\tset(r: number, g: number, b: number, a: number) {\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\t\tthis.a = a;\n\t\treturn this.clamp();\n\t}\n\n\tsetFromColor(c: Color) {\n\t\tthis.r = c.r;\n\t\tthis.g = c.g;\n\t\tthis.b = c.b;\n\t\tthis.a = c.a;\n\t\treturn this;\n\t}\n\n\tsetFromString(hex: string) {\n\t\thex = hex.charAt(0) == '#' ? hex.substr(1) : hex;\n\t\tthis.r = parseInt(hex.substr(0, 2), 16) / 255;\n\t\tthis.g = parseInt(hex.substr(2, 2), 16) / 255;\n\t\tthis.b = parseInt(hex.substr(4, 2), 16) / 255;\n\t\tthis.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;\n\t\treturn this;\n\t}\n\n\tadd(r: number, g: number, b: number, a: number) {\n\t\tthis.r += r;\n\t\tthis.g += g;\n\t\tthis.b += b;\n\t\tthis.a += a;\n\t\treturn this.clamp();\n\t}\n\n\tclamp() {\n\t\tif (this.r < 0) this.r = 0;\n\t\telse if (this.r > 1) this.r = 1;\n\n\t\tif (this.g < 0) this.g = 0;\n\t\telse if (this.g > 1) this.g = 1;\n\n\t\tif (this.b < 0) this.b = 0;\n\t\telse if (this.b > 1) this.b = 1;\n\n\t\tif (this.a < 0) this.a = 0;\n\t\telse if (this.a > 1) this.a = 1;\n\t\treturn this;\n\t}\n\n\tstatic rgba8888ToColor(color: Color, value: number) {\n\t\tcolor.r = ((value & 0xff000000) >>> 24) / 255;\n\t\tcolor.g = ((value & 0x00ff0000) >>> 16) / 255;\n\t\tcolor.b = ((value & 0x0000ff00) >>> 8) / 255;\n\t\tcolor.a = ((value & 0x000000ff)) / 255;\n\t}\n\n\tstatic rgb888ToColor(color: Color, value: number) {\n\t\tcolor.r = ((value & 0x00ff0000) >>> 16) / 255;\n\t\tcolor.g = ((value & 0x0000ff00) >>> 8) / 255;\n\t\tcolor.b = ((value & 0x000000ff)) / 255;\n\t}\n\n\tstatic fromString(hex: string): Color {\n\t\treturn new Color().setFromString(hex);\n\t}\n}\n\nexport class MathUtils {\n\tstatic PI = 3.1415927;\n\tstatic PI2 = MathUtils.PI * 2;\n\tstatic radiansToDegrees = 180 / MathUtils.PI;\n\tstatic radDeg = MathUtils.radiansToDegrees;\n\tstatic degreesToRadians = MathUtils.PI / 180;\n\tstatic degRad = MathUtils.degreesToRadians;\n\n\tstatic clamp(value: number, min: number, max: number) {\n\t\tif (value < min) return min;\n\t\tif (value > max) return max;\n\t\treturn value;\n\t}\n\n\tstatic cosDeg(degrees: number) {\n\t\treturn Math.cos(degrees * MathUtils.degRad);\n\t}\n\n\tstatic sinDeg(degrees: number) {\n\t\treturn Math.sin(degrees * MathUtils.degRad);\n\t}\n\n\tstatic signum(value: number): number {\n\t\treturn value > 0 ? 1 : value < 0 ? -1 : 0;\n\t}\n\n\tstatic toInt(x: number) {\n\t\treturn x > 0 ? Math.floor(x) : Math.ceil(x);\n\t}\n\n\tstatic cbrt(x: number) {\n\t\tlet y = Math.pow(Math.abs(x), 1 / 3);\n\t\treturn x < 0 ? -y : y;\n\t}\n\n\tstatic randomTriangular(min: number, max: number): number {\n\t\treturn MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\n\t}\n\n\tstatic randomTriangularWith(min: number, max: number, mode: number): number {\n\t\tlet u = Math.random();\n\t\tlet d = max - min;\n\t\tif (u <= (mode - min) / d) return min + Math.sqrt(u * d * (mode - min));\n\t\treturn max - Math.sqrt((1 - u) * d * (max - mode));\n\t}\n\n\tstatic isPowerOfTwo(value: number) {\n\t\treturn value && (value & (value - 1)) === 0;\n\t}\n}\n\nexport abstract class Interpolation {\n\tprotected abstract applyInternal(a: number): number;\n\tapply(start: number, end: number, a: number): number {\n\t\treturn start + (end - start) * this.applyInternal(a);\n\t}\n}\n\nexport class Pow extends Interpolation {\n\tprotected power = 2;\n\n\tconstructor(power: number) {\n\t\tsuper();\n\t\tthis.power = power;\n\t}\n\n\tapplyInternal(a: number): number {\n\t\tif (a <= 0.5) return Math.pow(a * 2, this.power) / 2;\n\t\treturn Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;\n\t}\n}\n\nexport class PowOut extends Pow {\n\tconstructor(power: number) {\n\t\tsuper(power);\n\t}\n\n\tapplyInternal(a: number): number {\n\t\treturn Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;\n\t}\n}\n\nexport class Utils {\n\tstatic SUPPORTS_TYPED_ARRAYS = typeof (Float32Array) !== \"undefined\";\n\n\tstatic arrayCopy<T>(source: ArrayLike<T>, sourceStart: number, dest: ArrayLike<T>, destStart: number, numElements: number) {\n\t\tfor (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\n\t\t\tdest[j] = source[i];\n\t\t}\n\t}\n\n\tstatic arrayFill<T>(array: ArrayLike<T>, fromIndex: number, toIndex: number, value: T) {\n\t\tfor (let i = fromIndex; i < toIndex; i++)\n\t\t\tarray[i] = value;\n\t}\n\n\tstatic setArraySize<T>(array: Array<T>, size: number, value: any = 0): Array<T> {\n\t\tlet oldSize = array.length;\n\t\tif (oldSize == size) return array;\n\t\tarray.length = size;\n\t\tif (oldSize < size) {\n\t\t\tfor (let i = oldSize; i < size; i++) array[i] = value;\n\t\t}\n\t\treturn array;\n\t}\n\n\tstatic ensureArrayCapacity<T>(array: Array<T>, size: number, value: any = 0): Array<T> {\n\t\tif (array.length >= size) return array;\n\t\treturn Utils.setArraySize(array, size, value);\n\t}\n\n\tstatic newArray<T>(size: number, defaultValue: T): Array<T> {\n\t\tlet array = new Array<T>(size);\n\t\tfor (let i = 0; i < size; i++) array[i] = defaultValue;\n\t\treturn array;\n\t}\n\n\tstatic newFloatArray(size: number): NumberArrayLike {\n\t\tif (Utils.SUPPORTS_TYPED_ARRAYS)\n\t\t\treturn new Float32Array(size)\n\t\telse {\n\t\t\tlet array = new Array<number>(size);\n\t\t\tfor (let i = 0; i < array.length; i++) array[i] = 0;\n\t\t\treturn array;\n\t\t}\n\t}\n\n\tstatic newShortArray(size: number): NumberArrayLike {\n\t\tif (Utils.SUPPORTS_TYPED_ARRAYS)\n\t\t\treturn new Int16Array(size)\n\t\telse {\n\t\t\tlet array = new Array<number>(size);\n\t\t\tfor (let i = 0; i < array.length; i++) array[i] = 0;\n\t\t\treturn array;\n\t\t}\n\t}\n\n\tstatic toFloatArray(array: Array<number>) {\n\t\treturn Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\n\t}\n\n\tstatic toSinglePrecision(value: number) {\n\t\treturn Utils.SUPPORTS_TYPED_ARRAYS ? Math.fround(value) : value;\n\t}\n\n\t// This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n\tstatic webkit602BugfixHelper(alpha: number, blend: MixBlend) {\n\t}\n\n\tstatic contains<T>(array: Array<T>, element: T, identity = true) {\n\t\tfor (var i = 0; i < array.length; i++)\n\t\t\tif (array[i] == element) return true;\n\t\treturn false;\n\t}\n\n\tstatic enumValue(type: any, name: string) {\n\t\treturn type[name[0].toUpperCase() + name.slice(1)];\n\t}\n}\n\nexport class DebugUtils {\n\tstatic logBones(skeleton: Skeleton) {\n\t\tfor (let i = 0; i < skeleton.bones.length; i++) {\n\t\t\tlet bone = skeleton.bones[i];\n\t\t\tconsole.log(bone.data.name + \", \" + bone.a + \", \" + bone.b + \", \" + bone.c + \", \" + bone.d + \", \" + bone.worldX + \", \" + bone.worldY);\n\t\t}\n\t}\n}\n\nexport class Pool<T> {\n\tprivate items = new Array<T>();\n\tprivate instantiator: () => T;\n\n\tconstructor(instantiator: () => T) {\n\t\tthis.instantiator = instantiator;\n\t}\n\n\tobtain() {\n\t\treturn this.items.length > 0 ? this.items.pop() : this.instantiator();\n\t}\n\n\tfree(item: T) {\n\t\tif ((item as any).reset) (item as any).reset();\n\t\tthis.items.push(item);\n\t}\n\n\tfreeAll(items: ArrayLike<T>) {\n\t\tfor (let i = 0; i < items.length; i++)\n\t\t\tthis.free(items[i]);\n\t}\n\n\tclear() {\n\t\tthis.items.length = 0;\n\t}\n}\n\nexport class Vector2 {\n\tconstructor(public x = 0, public y = 0) {\n\t}\n\n\tset(x: number, y: number): Vector2 {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}\n\n\tlength() {\n\t\tlet x = this.x;\n\t\tlet y = this.y;\n\t\treturn Math.sqrt(x * x + y * y);\n\t}\n\n\tnormalize() {\n\t\tlet len = this.length();\n\t\tif (len != 0) {\n\t\t\tthis.x /= len;\n\t\t\tthis.y /= len;\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport class TimeKeeper {\n\tmaxDelta = 0.064;\n\tframesPerSecond = 0;\n\tdelta = 0;\n\ttotalTime = 0;\n\n\tprivate lastTime = Date.now() / 1000;\n\tprivate frameCount = 0;\n\tprivate frameTime = 0;\n\n\tupdate() {\n\t\tlet now = Date.now() / 1000;\n\t\tthis.delta = now - this.lastTime;\n\t\tthis.frameTime += this.delta;\n\t\tthis.totalTime += this.delta;\n\t\tif (this.delta > this.maxDelta) this.delta = this.maxDelta;\n\t\tthis.lastTime = now;\n\n\t\tthis.frameCount++;\n\t\tif (this.frameTime > 1) {\n\t\t\tthis.framesPerSecond = this.frameCount / this.frameTime;\n\t\t\tthis.frameTime = 0;\n\t\t\tthis.frameCount = 0;\n\t\t}\n\t}\n}\n\nexport interface ArrayLike<T> {\n\tlength: number;\n\t[n: number]: T;\n}\n\nexport class WindowedMean {\n\tvalues: Array<number>;\n\taddedValues = 0;\n\tlastValue = 0;\n\tmean = 0;\n\tdirty = true;\n\n\tconstructor(windowSize: number = 32) {\n\t\tthis.values = new Array<number>(windowSize);\n\t}\n\n\thasEnoughData() {\n\t\treturn this.addedValues >= this.values.length;\n\t}\n\n\taddValue(value: number) {\n\t\tif (this.addedValues < this.values.length) this.addedValues++;\n\t\tthis.values[this.lastValue++] = value;\n\t\tif (this.lastValue > this.values.length - 1) this.lastValue = 0;\n\t\tthis.dirty = true;\n\t}\n\n\tgetMean() {\n\t\tif (this.hasEnoughData()) {\n\t\t\tif (this.dirty) {\n\t\t\t\tlet mean = 0;\n\t\t\t\tfor (let i = 0; i < this.values.length; i++)\n\t\t\t\t\tmean += this.values[i];\n\t\t\t\tthis.mean = mean / this.values.length;\n\t\t\t\tthis.dirty = false;\n\t\t\t}\n\t\t\treturn this.mean;\n\t\t}\n\t\treturn 0;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Slot } from \"../Slot\";\nimport { NumberArrayLike, Utils } from \"../Utils\";\n\n/** The base class for all attachments. */\nexport abstract class Attachment {\n\tname: string;\n\n\tconstructor(name: string) {\n\t\tif (!name) throw new Error(\"name cannot be null.\");\n\t\tthis.name = name;\n\t}\n\n\tabstract copy(): Attachment;\n}\n\n/** Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n * {@link Slot#deform}. */\nexport abstract class VertexAttachment extends Attachment {\n\tprivate static nextID = 0;\n\n\t/** The unique ID for this attachment. */\n\tid = VertexAttachment.nextID++;\n\n\t/** The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\n\t * the vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null\n\t * if this attachment has no weights. */\n\tbones: Array<number>;\n\n\t/** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`\n\t * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting\n\t * each vertex. */\n\tvertices: NumberArrayLike;\n\n\t/** The maximum number of world vertex values that can be output by\n\t * {@link #computeWorldVertices()} using the `count` parameter. */\n\tworldVerticesLength = 0;\n\n\t/** Deform keys for the deform attachment are also applied to this attachment. May be null if no deform keys should be applied. */\n\tdeformAttachment: VertexAttachment = this;\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t}\n\n\t/** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\n\t * not empty, it is used to deform the vertices.\n\t *\n\t * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n\t * Runtimes Guide.\n\t * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.\n\t * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.\n\t * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\n\t *           `stride` / 2.\n\t * @param offset The `worldVertices` index to begin writing values.\n\t * @param stride The number of `worldVertices` entries between the value pairs written. */\n\tcomputeWorldVertices(slot: Slot, start: number, count: number, worldVertices: NumberArrayLike, offset: number, stride: number) {\n\t\tcount = offset + (count >> 1) * stride;\n\t\tlet skeleton = slot.bone.skeleton;\n\t\tlet deformArray = slot.deform;\n\t\tlet vertices = this.vertices;\n\t\tlet bones = this.bones;\n\t\tif (!bones) {\n\t\t\tif (deformArray.length > 0) vertices = deformArray;\n\t\t\tlet bone = slot.bone;\n\t\t\tlet x = bone.worldX;\n\t\t\tlet y = bone.worldY;\n\t\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n\t\t\tfor (let v = start, w = offset; w < count; v += 2, w += stride) {\n\t\t\t\tlet vx = vertices[v], vy = vertices[v + 1];\n\t\t\t\tworldVertices[w] = vx * a + vy * b + x;\n\t\t\t\tworldVertices[w + 1] = vx * c + vy * d + y;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tlet v = 0, skip = 0;\n\t\tfor (let i = 0; i < start; i += 2) {\n\t\t\tlet n = bones[v];\n\t\t\tv += n + 1;\n\t\t\tskip += n;\n\t\t}\n\t\tlet skeletonBones = skeleton.bones;\n\t\tif (deformArray.length == 0) {\n\t\t\tfor (let w = offset, b = skip * 3; w < count; w += stride) {\n\t\t\t\tlet wx = 0, wy = 0;\n\t\t\t\tlet n = bones[v++];\n\t\t\t\tn += v;\n\t\t\t\tfor (; v < n; v++, b += 3) {\n\t\t\t\t\tlet bone = skeletonBones[bones[v]];\n\t\t\t\t\tlet vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\n\t\t\t\t\twx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\n\t\t\t\t\twy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\n\t\t\t\t}\n\t\t\t\tworldVertices[w] = wx;\n\t\t\t\tworldVertices[w + 1] = wy;\n\t\t\t}\n\t\t} else {\n\t\t\tlet deform = deformArray;\n\t\t\tfor (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\n\t\t\t\tlet wx = 0, wy = 0;\n\t\t\t\tlet n = bones[v++];\n\t\t\t\tn += v;\n\t\t\t\tfor (; v < n; v++, b += 3, f += 2) {\n\t\t\t\t\tlet bone = skeletonBones[bones[v]];\n\t\t\t\t\tlet vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\n\t\t\t\t\twx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\n\t\t\t\t\twy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\n\t\t\t\t}\n\t\t\t\tworldVertices[w] = wx;\n\t\t\t\tworldVertices[w + 1] = wy;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Does not copy id (generated) or name (set on construction). **/\n\tcopyTo(attachment: VertexAttachment) {\n\t\tif (this.bones) {\n\t\t\tattachment.bones = new Array<number>(this.bones.length);\n\t\t\tUtils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\n\t\t} else\n\t\t\tattachment.bones = null;\n\n\t\tif (this.vertices) {\n\t\t\tattachment.vertices = Utils.newFloatArray(this.vertices.length);\n\t\t\tUtils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\n\t\t} else\n\t\t\tattachment.vertices = null;\n\n\t\tattachment.worldVerticesLength = this.worldVerticesLength;\n\t\tattachment.deformAttachment = this.deformAttachment;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { VertexAttachment, Attachment } from \"./attachments/Attachment\";\nimport { IkConstraint } from \"./IkConstraint\";\nimport { PathConstraint } from \"./PathConstraint\";\nimport { Skeleton } from \"./Skeleton\";\nimport { Slot } from \"./Slot\";\nimport { TransformConstraint } from \"./TransformConstraint\";\nimport { StringSet, Utils, MathUtils, NumberArrayLike } from \"./Utils\";\nimport { Event } from \"./Event\";\n\n/** A simple container for a list of timelines and a name. */\nexport class Animation {\n\t/** The animation's name, which is unique across all animations in the skeleton. */\n\tname: string;\n\ttimelines: Array<Timeline>;\n\ttimelineIds: StringSet;\n\n\t/** The duration of the animation in seconds, which is the highest time of all keys in the timeline. */\n\tduration: number;\n\n\tconstructor(name: string, timelines: Array<Timeline>, duration: number) {\n\t\tif (!name) throw new Error(\"name cannot be null.\");\n\t\tthis.name = name;\n\t\tthis.setTimelines(timelines);\n\t\tthis.duration = duration;\n\t}\n\n\tsetTimelines(timelines: Array<Timeline>) {\n\t\tif (!timelines) throw new Error(\"timelines cannot be null.\");\n\t\tthis.timelines = timelines;\n\t\tthis.timelineIds = new StringSet();\n\t\tfor (var i = 0; i < timelines.length; i++)\n\t\t\tthis.timelineIds.addAll(timelines[i].getPropertyIds());\n\t}\n\n\thasTimeline(ids: string[]): boolean {\n\t\tfor (let i = 0; i < ids.length; i++)\n\t\t\tif (this.timelineIds.contains(ids[i])) return true;\n\t\treturn false;\n\t}\n\n\t/** Applies all the animation's timelines to the specified skeleton.\n\t *\n\t * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\n\t * @param loop If true, the animation repeats after {@link #getDuration()}.\n\t * @param events May be null to ignore fired events. */\n\tapply(skeleton: Skeleton, lastTime: number, time: number, loop: boolean, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\n\n\t\tif (loop && this.duration != 0) {\n\t\t\ttime %= this.duration;\n\t\t\tif (lastTime > 0) lastTime %= this.duration;\n\t\t}\n\n\t\tlet timelines = this.timelines;\n\t\tfor (let i = 0, n = timelines.length; i < n; i++)\n\t\t\ttimelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\n\t}\n}\n\n/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\n * < 1.\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\nexport enum MixBlend {\n\t/** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\n\t * value is set. */\n\tsetup,\n\t/** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\n\t * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\n\t * {@link AttachmentTimeline}, use the setup value before the first key.\n\t *\n\t * `first` is intended for the first animations applied, not for animations layered on top of those. */\n\tfirst,\n\t/** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\n\t * kept until the first key).\n\t *\n\t * `replace` is intended for animations layered on top of others, not for the first animations applied. */\n\treplace,\n\t/** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\n\t * (the current value is kept until the first key).\n\t *\n\t * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\n\t * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\n\t * the property values will increase continually. */\n\tadd\n}\n\n/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\n * mixing in toward 1 (the timeline's value).\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\nexport enum MixDirection {\n\tmixIn, mixOut\n}\n\nconst Property = {\n\trotate: 0,\n\tx: 1,\n\ty: 2,\n\tscaleX: 3,\n\tscaleY: 4,\n\tshearX: 5,\n\tshearY: 6,\n\n\trgb: 7,\n\talpha: 8,\n\trgb2: 9,\n\n\tattachment: 10,\n\tdeform: 11,\n\n\tevent: 12,\n\tdrawOrder: 13,\n\n\tikConstraint: 14,\n\ttransformConstraint: 15,\n\n\tpathConstraintPosition: 16,\n\tpathConstraintSpacing: 17,\n\tpathConstraintMix: 18\n}\n\n/** The interface for all timelines. */\nexport abstract class Timeline {\n\tpropertyIds: string[];\n\tframes: NumberArrayLike;\n\n\tconstructor(frameCount: number, propertyIds: string[]) {\n\t\tthis.propertyIds = propertyIds;\n\t\tthis.frames = Utils.newFloatArray(frameCount * this.getFrameEntries());\n\t}\n\n\tgetPropertyIds() {\n\t\treturn this.propertyIds;\n\t}\n\n\tgetFrameEntries(): number {\n\t\treturn 1;\n\t}\n\n\tgetFrameCount() {\n\t\treturn this.frames.length / this.getFrameEntries();\n\t}\n\n\tgetDuration(): number {\n\t\treturn this.frames[this.frames.length - this.getFrameEntries()];\n\t}\n\n\tabstract apply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection): void;\n\n\tstatic search1(frames: NumberArrayLike, time: number) {\n\t\tlet n = frames.length;\n\t\tfor (let i = 1; i < n; i++)\n\t\t\tif (frames[i] > time) return i - 1;\n\t\treturn n - 1;\n\t}\n\n\tstatic search(frames: NumberArrayLike, time: number, step: number) {\n\t\tlet n = frames.length;\n\t\tfor (let i = step; i < n; i += step)\n\t\t\tif (frames[i] > time) return i - step;\n\t\treturn n - step;\n\t}\n}\n\nexport interface BoneTimeline {\n\t/** The index of the bone in {@link Skeleton#bones} that will be changed. */\n\tboneIndex: number;\n}\n\nexport interface SlotTimeline {\n\t/** The index of the slot in {@link Skeleton#slots} that will be changed. */\n\tslotIndex: number;\n}\n\n/** The base class for timelines that use interpolation between key frame values. */\nexport abstract class CurveTimeline extends Timeline {\n\tprotected curves: NumberArrayLike; // type, x, y, ...\n\n\tconstructor(frameCount: number, bezierCount: number, propertyIds: string[]) {\n\t\tsuper(frameCount, propertyIds);\n\t\tthis.curves = Utils.newFloatArray(frameCount + bezierCount * 18/*BEZIER_SIZE*/);\n\t\tthis.curves[frameCount - 1] = 1/*STEPPED*/;\n\t}\n\n\t/** Sets the specified key frame to linear interpolation. */\n\tsetLinear(frame: number) {\n\t\tthis.curves[frame] = 0/*LINEAR*/;\n\t}\n\n\t/** Sets the specified key frame to stepped interpolation. */\n\tsetStepped(frame: number) {\n\t\tthis.curves[frame] = 1/*STEPPED*/;\n\t}\n\n\t/** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\n\t * than the actual number of Bezier curves. */\n\tshrink(bezierCount: number) {\n\t\tlet size = this.getFrameCount() + bezierCount * 18/*BEZIER_SIZE*/;\n\t\tif (this.curves.length > size) {\n\t\t\tlet newCurves = Utils.newFloatArray(size);\n\t\t\tUtils.arrayCopy(this.curves, 0, newCurves, 0, size);\n\t\t\tthis.curves = newCurves;\n\t\t}\n\t}\n\n\t/** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\n\t * one curve per frame.\n\t * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\n\t *           in the constructor), inclusive.\n\t * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.\n\t * @param value The index of the value for this frame that this curve is used for.\n\t * @param time1 The time for the first key.\n\t * @param value1 The value for the first key.\n\t * @param cx1 The time for the first Bezier handle.\n\t * @param cy1 The value for the first Bezier handle.\n\t * @param cx2 The time of the second Bezier handle.\n\t * @param cy2 The value for the second Bezier handle.\n\t * @param time2 The time for the second key.\n\t * @param value2 The value for the second key. */\n\tsetBezier(bezier: number, frame: number, value: number, time1: number, value1: number, cx1: number, cy1: number, cx2: number,\n\t\tcy2: number, time2: number, value2: number) {\n\t\tlet curves = this.curves;\n\t\tlet i = this.getFrameCount() + bezier * 18/*BEZIER_SIZE*/;\n\t\tif (value == 0) curves[frame] = 2/*BEZIER*/ + i;\n\t\tlet tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = (value1 - cy1 * 2 + cy2) * 0.03;\n\t\tlet dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;\n\t\tlet ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\n\t\tlet dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;\n\t\tlet x = time1 + dx, y = value1 + dy;\n\t\tfor (let n = i + 18/*BEZIER_SIZE*/; i < n; i += 2) {\n\t\t\tcurves[i] = x;\n\t\t\tcurves[i + 1] = y;\n\t\t\tdx += ddx;\n\t\t\tdy += ddy;\n\t\t\tddx += dddx;\n\t\t\tddy += dddy;\n\t\t\tx += dx;\n\t\t\ty += dy;\n\t\t}\n\t}\n\n\t/** Returns the Bezier interpolated value for the specified time.\n\t * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\n\t * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\n\t * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */\n\tgetBezierValue(time: number, frameIndex: number, valueOffset: number, i: number) {\n\t\tlet curves = this.curves;\n\t\tif (curves[i] > time) {\n\t\t\tlet x = this.frames[frameIndex], y = this.frames[frameIndex + valueOffset];\n\t\t\treturn y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n\t\t}\n\t\tlet n = i + 18/*BEZIER_SIZE*/;\n\t\tfor (i += 2; i < n; i += 2) {\n\t\t\tif (curves[i] >= time) {\n\t\t\t\tlet x = curves[i - 2], y = curves[i - 1];\n\t\t\t\treturn y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n\t\t\t}\n\t\t}\n\t\tframeIndex += this.getFrameEntries();\n\t\tlet x = curves[n - 2], y = curves[n - 1];\n\t\treturn y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);\n\t}\n}\n\nexport abstract class CurveTimeline1 extends CurveTimeline {\n\tconstructor(frameCount: number, bezierCount: number, propertyId: string) {\n\t\tsuper(frameCount, bezierCount, [propertyId]);\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 2/*ENTRIES*/;\n\t}\n\n\t/** Sets the time and value for the specified frame.\n\t * @param frame Between 0 and <code>frameCount</code>, inclusive.\n\t * @param time The frame time in seconds. */\n\tsetFrame(frame: number, time: number, value: number) {\n\t\tframe <<= 1;\n\t\tthis.frames[frame] = time;\n\t\tthis.frames[frame + 1/*VALUE*/] = value;\n\t}\n\n\t/** Returns the interpolated value for the specified time. */\n\tgetCurveValue(time: number) {\n\t\tlet frames = this.frames;\n\t\tlet i = frames.length - 2;\n\t\tfor (let ii = 2; ii <= i; ii += 2) {\n\t\t\tif (frames[ii] > time) {\n\t\t\t\ti = ii - 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet curveType = this.curves[i >> 1];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i], value = frames[i + 1/*VALUE*/];\n\t\t\t\treturn value + (time - before) / (frames[i + 2/*ENTRIES*/] - before) * (frames[i + 2/*ENTRIES*/ + 1/*VALUE*/] - value);\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\treturn frames[i + 1/*VALUE*/];\n\t\t}\n\t\treturn this.getBezierValue(time, i, 1/*VALUE*/, curveType - 2/*BEZIER*/);\n\t}\n}\n\n/** The base class for a {@link CurveTimeline} which sets two properties. */\nexport abstract class CurveTimeline2 extends CurveTimeline {\n\t/** @param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\n\t * @param propertyIds Unique identifiers for the properties the timeline modifies. */\n\tconstructor(frameCount: number, bezierCount: number, propertyId1: string, propertyId2: string) {\n\t\tsuper(frameCount, bezierCount, [propertyId1, propertyId2]);\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 3/*ENTRIES*/;\n\t}\n\n\t/** Sets the time and values for the specified frame.\n\t * @param frame Between 0 and <code>frameCount</code>, inclusive.\n\t * @param time The frame time in seconds. */\n\tsetFrame(frame: number, time: number, value1: number, value2: number) {\n\t\tframe *= 3/*ENTRIES*/;\n\t\tthis.frames[frame] = time;\n\t\tthis.frames[frame + 1/*VALUE1*/] = value1;\n\t\tthis.frames[frame + 2/*VALUE2*/] = value2;\n\t}\n}\n\n/** Changes a bone's local {@link Bone#rotation}. */\nexport class RotateTimeline extends CurveTimeline1 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.rotate + \"|\" + boneIndex);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.rotation = bone.data.rotation;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.rotation += (bone.data.rotation - bone.rotation) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet r = this.getCurveValue(time);\n\t\tswitch (blend) {\n\t\t\tcase MixBlend.setup:\n\t\t\t\tbone.rotation = bone.data.rotation + r * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.first:\n\t\t\tcase MixBlend.replace:\n\t\t\t\tr += bone.data.rotation - bone.rotation;\n\t\t\tcase MixBlend.add:\n\t\t\t\tbone.rotation += r * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */\nexport class TranslateTimeline extends CurveTimeline2 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount,\n\t\t\tProperty.x + \"|\" + boneIndex,\n\t\t\tProperty.y + \"|\" + boneIndex,\n\t\t);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.x = bone.data.x;\n\t\t\t\t\tbone.y = bone.data.y;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.x += (bone.data.x - bone.x) * alpha;\n\t\t\t\t\tbone.y += (bone.data.y - bone.y) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet x = 0, y = 0;\n\t\tlet i = Timeline.search(frames, time, 3/*ENTRIES*/);\n\t\tlet curveType = this.curves[i / 3/*ENTRIES*/];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\n\t\t\t\tx += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\n\t\t\t\ty += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tx = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\n\t\t\t\ty = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t}\n\n\t\tswitch (blend) {\n\t\t\tcase MixBlend.setup:\n\t\t\t\tbone.x = bone.data.x + x * alpha;\n\t\t\t\tbone.y = bone.data.y + y * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.first:\n\t\t\tcase MixBlend.replace:\n\t\t\t\tbone.x += (bone.data.x + x - bone.x) * alpha;\n\t\t\t\tbone.y += (bone.data.y + y - bone.y) * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.add:\n\t\t\t\tbone.x += x * alpha;\n\t\t\t\tbone.y += y * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#x}. */\nexport class TranslateXTimeline extends CurveTimeline1 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.x + \"|\" + boneIndex);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.x = bone.data.x;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.x += (bone.data.x - bone.x) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet x = this.getCurveValue(time);\n\t\tswitch (blend) {\n\t\t\tcase MixBlend.setup:\n\t\t\t\tbone.x = bone.data.x + x * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.first:\n\t\t\tcase MixBlend.replace:\n\t\t\t\tbone.x += (bone.data.x + x - bone.x) * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.add:\n\t\t\t\tbone.x += x * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#x}. */\nexport class TranslateYTimeline extends CurveTimeline1 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.y + \"|\" + boneIndex);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.y = bone.data.y;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.y += (bone.data.y - bone.y) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet y = this.getCurveValue(time);\n\t\tswitch (blend) {\n\t\t\tcase MixBlend.setup:\n\t\t\t\tbone.y = bone.data.y + y * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.first:\n\t\t\tcase MixBlend.replace:\n\t\t\t\tbone.y += (bone.data.y + y - bone.y) * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.add:\n\t\t\t\tbone.y += y * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleTimeline extends CurveTimeline2 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount,\n\t\t\tProperty.scaleX + \"|\" + boneIndex,\n\t\t\tProperty.scaleY + \"|\" + boneIndex\n\t\t);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.scaleX = bone.data.scaleX;\n\t\t\t\t\tbone.scaleY = bone.data.scaleY;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n\t\t\t\t\tbone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet x, y;\n\t\tlet i = Timeline.search(frames, time, 3/*ENTRIES*/);\n\t\tlet curveType = this.curves[i / 3/*ENTRIES*/];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\n\t\t\t\tx += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\n\t\t\t\ty += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tx = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\n\t\t\t\ty = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t}\n\t\tx *= bone.data.scaleX;\n\t\ty *= bone.data.scaleY;\n\n\t\tif (alpha == 1) {\n\t\t\tif (blend == MixBlend.add) {\n\t\t\t\tbone.scaleX += x - bone.data.scaleX;\n\t\t\t\tbone.scaleY += y - bone.data.scaleY;\n\t\t\t} else {\n\t\t\t\tbone.scaleX = x;\n\t\t\t\tbone.scaleY = y;\n\t\t\t}\n\t\t} else {\n\t\t\tlet bx = 0, by = 0;\n\t\t\tif (direction == MixDirection.mixOut) {\n\t\t\t\tswitch (blend) {\n\t\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\t\tbx = bone.data.scaleX;\n\t\t\t\t\t\tby = bone.data.scaleY;\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcase MixBlend.replace:\n\t\t\t\t\t\tbx = bone.scaleX;\n\t\t\t\t\t\tby = bone.scaleY;\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.add:\n\t\t\t\t\t\tbx = bone.scaleX;\n\t\t\t\t\t\tby = bone.scaleY;\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bone.data.scaleX) * alpha;\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - bone.data.scaleY) * alpha;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tswitch (blend) {\n\t\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\t\tbx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n\t\t\t\t\t\tby = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n\t\t\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\n\t\t\t\t\t\tbone.scaleY = by + (y - by) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcase MixBlend.replace:\n\t\t\t\t\t\tbx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n\t\t\t\t\t\tby = Math.abs(bone.scaleY) * MathUtils.signum(y);\n\t\t\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\n\t\t\t\t\t\tbone.scaleY = by + (y - by) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.add:\n\t\t\t\t\t\tbx = MathUtils.signum(x);\n\t\t\t\t\t\tby = MathUtils.signum(y);\n\t\t\t\t\t\tbone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;\n\t\t\t\t\t\tbone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleXTimeline extends CurveTimeline1 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.scaleX = bone.data.scaleX;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet x = this.getCurveValue(time) * bone.data.scaleX;\n\t\tif (alpha == 1) {\n\t\t\tif (blend == MixBlend.add)\n\t\t\t\tbone.scaleX += x - bone.data.scaleX;\n\t\t\telse\n\t\t\t\tbone.scaleX = x;\n\t\t} else {\n\t\t\t// Mixing out uses sign of setup or current pose, else use sign of key.\n\t\t\tlet bx = 0;\n\t\t\tif (direction == MixDirection.mixOut) {\n\t\t\t\tswitch (blend) {\n\t\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\t\tbx = bone.data.scaleX;\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcase MixBlend.replace:\n\t\t\t\t\t\tbx = bone.scaleX;\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.add:\n\t\t\t\t\t\tbx = bone.scaleX;\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bone.data.scaleX) * alpha;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tswitch (blend) {\n\t\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\t\tbx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n\t\t\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcase MixBlend.replace:\n\t\t\t\t\t\tbx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n\t\t\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.add:\n\t\t\t\t\t\tbx = MathUtils.signum(x);\n\t\t\t\t\t\tbone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleYTimeline extends CurveTimeline1 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.scaleY + \"|\" + boneIndex);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.scaleY = bone.data.scaleY;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet y = this.getCurveValue(time) * bone.data.scaleY;\n\t\tif (alpha == 1) {\n\t\t\tif (blend == MixBlend.add)\n\t\t\t\tbone.scaleY += y - bone.data.scaleY;\n\t\t\telse\n\t\t\t\tbone.scaleY = y;\n\t\t} else {\n\t\t\t// Mixing out uses sign of setup or current pose, else use sign of key.\n\t\t\tlet by = 0;\n\t\t\tif (direction == MixDirection.mixOut) {\n\t\t\t\tswitch (blend) {\n\t\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\t\tby = bone.data.scaleY;\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcase MixBlend.replace:\n\t\t\t\t\t\tby = bone.scaleY;\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.add:\n\t\t\t\t\t\tby = bone.scaleY;\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - bone.data.scaleY) * alpha;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tswitch (blend) {\n\t\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\t\tby = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n\t\t\t\t\t\tbone.scaleY = by + (y - by) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcase MixBlend.replace:\n\t\t\t\t\t\tby = Math.abs(bone.scaleY) * MathUtils.signum(y);\n\t\t\t\t\t\tbone.scaleY = by + (y - by) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.add:\n\t\t\t\t\t\tby = MathUtils.signum(y);\n\t\t\t\t\t\tbone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearTimeline extends CurveTimeline2 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount,\n\t\t\tProperty.shearX + \"|\" + boneIndex,\n\t\t\tProperty.shearY + \"|\" + boneIndex\n\t\t);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.shearX = bone.data.shearX;\n\t\t\t\t\tbone.shearY = bone.data.shearY;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n\t\t\t\t\tbone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet x = 0, y = 0;\n\t\tlet i = Timeline.search(frames, time, 3/*ENTRIES*/);\n\t\tlet curveType = this.curves[i / 3/*ENTRIES*/];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\n\t\t\t\tx += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\n\t\t\t\ty += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tx = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\n\t\t\t\ty = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t}\n\n\t\tswitch (blend) {\n\t\t\tcase MixBlend.setup:\n\t\t\t\tbone.shearX = bone.data.shearX + x * alpha;\n\t\t\t\tbone.shearY = bone.data.shearY + y * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.first:\n\t\t\tcase MixBlend.replace:\n\t\t\t\tbone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n\t\t\t\tbone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.add:\n\t\t\t\tbone.shearX += x * alpha;\n\t\t\t\tbone.shearY += y * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearXTimeline extends CurveTimeline1 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.shearX = bone.data.shearX;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet x = this.getCurveValue(time);\n\t\tswitch (blend) {\n\t\t\tcase MixBlend.setup:\n\t\t\t\tbone.shearX = bone.data.shearX + x * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.first:\n\t\t\tcase MixBlend.replace:\n\t\t\t\tbone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.add:\n\t\t\t\tbone.shearX += x * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearYTimeline extends CurveTimeline1 implements BoneTimeline {\n\tboneIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, boneIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.shearY + \"|\" + boneIndex);\n\t\tthis.boneIndex = boneIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet bone = skeleton.bones[this.boneIndex];\n\t\tif (!bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.shearY = bone.data.shearY;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tbone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet y = this.getCurveValue(time);\n\t\tswitch (blend) {\n\t\t\tcase MixBlend.setup:\n\t\t\t\tbone.shearY = bone.data.shearY + y * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.first:\n\t\t\tcase MixBlend.replace:\n\t\t\t\tbone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n\t\t\t\tbreak;\n\t\t\tcase MixBlend.add:\n\t\t\t\tbone.shearY += y * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a slot's {@link Slot#color}. */\nexport class RGBATimeline extends CurveTimeline implements SlotTimeline {\n\tslotIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, slotIndex: number) {\n\t\tsuper(frameCount, bezierCount, [\n\t\t\tProperty.rgb + \"|\" + slotIndex,\n\t\t\tProperty.alpha + \"|\" + slotIndex\n\t\t]);\n\t\tthis.slotIndex = slotIndex;\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 5/*ENTRIES*/;\n\t}\n\n\t/** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n\tsetFrame(frame: number, time: number, r: number, g: number, b: number, a: number) {\n\t\tframe *= 5/*ENTRIES*/;\n\t\tthis.frames[frame] = time;\n\t\tthis.frames[frame + 1/*R*/] = r;\n\t\tthis.frames[frame + 2/*G*/] = g;\n\t\tthis.frames[frame + 3/*B*/] = b;\n\t\tthis.frames[frame + 4/*A*/] = a;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet slot = skeleton.slots[this.slotIndex];\n\t\tif (!slot.bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tlet color = slot.color;\n\t\tif (time < frames[0]) {\n\t\t\tlet setup = slot.data.color;\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tcolor.setFromColor(setup);\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcolor.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha,\n\t\t\t\t\t\t(setup.a - color.a) * alpha);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet r = 0, g = 0, b = 0, a = 0;\n\t\tlet i = Timeline.search(frames, time, 5/*ENTRIES*/);\n\t\tlet curveType = this.curves[i / 5/*ENTRIES*/];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\tr = frames[i + 1/*R*/];\n\t\t\t\tg = frames[i + 2/*G*/];\n\t\t\t\tb = frames[i + 3/*B*/];\n\t\t\t\ta = frames[i + 4/*A*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 5/*ENTRIES*/] - before);\n\t\t\t\tr += (frames[i + 5/*ENTRIES*/ + 1/*R*/] - r) * t;\n\t\t\t\tg += (frames[i + 5/*ENTRIES*/ + 2/*G*/] - g) * t;\n\t\t\t\tb += (frames[i + 5/*ENTRIES*/ + 3/*B*/] - b) * t;\n\t\t\t\ta += (frames[i + 5/*ENTRIES*/ + 4/*A*/] - a) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\tr = frames[i + 1/*R*/];\n\t\t\t\tg = frames[i + 2/*G*/];\n\t\t\t\tb = frames[i + 3/*B*/];\n\t\t\t\ta = frames[i + 4/*A*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tr = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\n\t\t\t\tg = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t\t\tb = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\n\t\t\t\ta = this.getBezierValue(time, i, 4/*A*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\n\t\t}\n\t\tif (alpha == 1)\n\t\t\tcolor.set(r, g, b, a);\n\t\telse {\n\t\t\tif (blend == MixBlend.setup) color.setFromColor(slot.data.color);\n\t\t\tcolor.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\n\t\t}\n\t}\n}\n\n/** Changes a slot's {@link Slot#color}. */\nexport class RGBTimeline extends CurveTimeline implements SlotTimeline {\n\tslotIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, slotIndex: number) {\n\t\tsuper(frameCount, bezierCount, [\n\t\t\tProperty.rgb + \"|\" + slotIndex\n\t\t]);\n\t\tthis.slotIndex = slotIndex;\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 4/*ENTRIES*/;\n\t}\n\n\t/** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n\tsetFrame(frame: number, time: number, r: number, g: number, b: number) {\n\t\tframe <<= 2;\n\t\tthis.frames[frame] = time;\n\t\tthis.frames[frame + 1/*R*/] = r;\n\t\tthis.frames[frame + 2/*G*/] = g;\n\t\tthis.frames[frame + 3/*B*/] = b;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet slot = skeleton.slots[this.slotIndex];\n\t\tif (!slot.bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tlet color = slot.color;\n\t\tif (time < frames[0]) {\n\t\t\tlet setup = slot.data.color;\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tcolor.r = setup.r;\n\t\t\t\t\tcolor.g = setup.g;\n\t\t\t\t\tcolor.b = setup.b;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcolor.r += (setup.r - color.r) * alpha;\n\t\t\t\t\tcolor.g += (setup.g - color.g) * alpha;\n\t\t\t\t\tcolor.b += (setup.b - color.b) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet r = 0, g = 0, b = 0;\n\t\tlet i = Timeline.search(frames, time, 4/*ENTRIES*/);\n\t\tlet curveType = this.curves[i >> 2];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\tr = frames[i + 1/*R*/];\n\t\t\t\tg = frames[i + 2/*G*/];\n\t\t\t\tb = frames[i + 3/*B*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 4/*ENTRIES*/] - before);\n\t\t\t\tr += (frames[i + 4/*ENTRIES*/ + 1/*R*/] - r) * t;\n\t\t\t\tg += (frames[i + 4/*ENTRIES*/ + 2/*G*/] - g) * t;\n\t\t\t\tb += (frames[i + 4/*ENTRIES*/ + 3/*B*/] - b) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\tr = frames[i + 1/*R*/];\n\t\t\t\tg = frames[i + 2/*G*/];\n\t\t\t\tb = frames[i + 3/*B*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tr = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\n\t\t\t\tg = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t\t\tb = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\n\t\t}\n\t\tif (alpha == 1) {\n\t\t\tcolor.r = r;\n\t\t\tcolor.g = g;\n\t\t\tcolor.b = b;\n\t\t} else {\n\t\t\tif (blend == MixBlend.setup) {\n\t\t\t\tlet setup = slot.data.color;\n\t\t\t\tcolor.r = setup.r;\n\t\t\t\tcolor.g = setup.g;\n\t\t\t\tcolor.b = setup.b;\n\t\t\t}\n\t\t\tcolor.r += (r - color.r) * alpha;\n\t\t\tcolor.g += (g - color.g) * alpha;\n\t\t\tcolor.b += (b - color.b) * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class AlphaTimeline extends CurveTimeline1 implements SlotTimeline {\n\tslotIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, slotIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.alpha + \"|\" + slotIndex);\n\t\tthis.slotIndex = slotIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet slot = skeleton.slots[this.slotIndex];\n\t\tif (!slot.bone.active) return;\n\n\t\tlet color = slot.color;\n\t\tif (time < this.frames[0]) { // Time is before first frame.\n\t\t\tlet setup = slot.data.color;\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tcolor.a = setup.a;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcolor.a += (setup.a - color.a) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet a = this.getCurveValue(time);\n\t\tif (alpha == 1)\n\t\t\tcolor.a = a;\n\t\telse {\n\t\t\tif (blend == MixBlend.setup) color.a = slot.data.color.a;\n\t\t\tcolor.a += (a - color.a) * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\nexport class RGBA2Timeline extends CurveTimeline implements SlotTimeline {\n\tslotIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, slotIndex: number) {\n\t\tsuper(frameCount, bezierCount, [\n\t\t\tProperty.rgb + \"|\" + slotIndex,\n\t\t\tProperty.alpha + \"|\" + slotIndex,\n\t\t\tProperty.rgb2 + \"|\" + slotIndex\n\t\t]);\n\t\tthis.slotIndex = slotIndex;\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 8/*ENTRIES*/;\n\t}\n\n\t/** Sets the time in seconds, light, and dark colors for the specified key frame. */\n\tsetFrame(frame: number, time: number, r: number, g: number, b: number, a: number, r2: number, g2: number, b2: number) {\n\t\tframe <<= 3;\n\t\tthis.frames[frame] = time;\n\t\tthis.frames[frame + 1/*R*/] = r;\n\t\tthis.frames[frame + 2/*G*/] = g;\n\t\tthis.frames[frame + 3/*B*/] = b;\n\t\tthis.frames[frame + 4/*A*/] = a;\n\t\tthis.frames[frame + 5/*R2*/] = r2;\n\t\tthis.frames[frame + 6/*G2*/] = g2;\n\t\tthis.frames[frame + 7/*B2*/] = b2;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet slot = skeleton.slots[this.slotIndex];\n\t\tif (!slot.bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tlet light = slot.color, dark = slot.darkColor;\n\t\tif (time < frames[0]) {\n\t\t\tlet setupLight = slot.data.color, setupDark = slot.data.darkColor;\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tlight.setFromColor(setupLight);\n\t\t\t\t\tdark.r = setupDark.r;\n\t\t\t\t\tdark.g = setupDark.g;\n\t\t\t\t\tdark.b = setupDark.b;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tlight.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha,\n\t\t\t\t\t\t(setupLight.a - light.a) * alpha);\n\t\t\t\t\tdark.r += (setupDark.r - dark.r) * alpha;\n\t\t\t\t\tdark.g += (setupDark.g - dark.g) * alpha;\n\t\t\t\t\tdark.b += (setupDark.b - dark.b) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\n\t\tlet i = Timeline.search(frames, time, 8/*ENTRIES*/);\n\t\tlet curveType = this.curves[i >> 3];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\tr = frames[i + 1/*R*/];\n\t\t\t\tg = frames[i + 2/*G*/];\n\t\t\t\tb = frames[i + 3/*B*/];\n\t\t\t\ta = frames[i + 4/*A*/];\n\t\t\t\tr2 = frames[i + 5/*R2*/];\n\t\t\t\tg2 = frames[i + 6/*G2*/];\n\t\t\t\tb2 = frames[i + 7/*B2*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 8/*ENTRIES*/] - before);\n\t\t\t\tr += (frames[i + 8/*ENTRIES*/ + 1/*R*/] - r) * t;\n\t\t\t\tg += (frames[i + 8/*ENTRIES*/ + 2/*G*/] - g) * t;\n\t\t\t\tb += (frames[i + 8/*ENTRIES*/ + 3/*B*/] - b) * t;\n\t\t\t\ta += (frames[i + 8/*ENTRIES*/ + 4/*A*/] - a) * t;\n\t\t\t\tr2 += (frames[i + 8/*ENTRIES*/ + 5/*R2*/] - r2) * t;\n\t\t\t\tg2 += (frames[i + 8/*ENTRIES*/ + 6/*G2*/] - g2) * t;\n\t\t\t\tb2 += (frames[i + 8/*ENTRIES*/ + 7/*B2*/] - b2) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\tr = frames[i + 1/*R*/];\n\t\t\t\tg = frames[i + 2/*G*/];\n\t\t\t\tb = frames[i + 3/*B*/];\n\t\t\t\ta = frames[i + 4/*A*/];\n\t\t\t\tr2 = frames[i + 5/*R2*/];\n\t\t\t\tg2 = frames[i + 6/*G2*/];\n\t\t\t\tb2 = frames[i + 7/*B2*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tr = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\n\t\t\t\tg = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t\t\tb = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\n\t\t\t\ta = this.getBezierValue(time, i, 4/*A*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\n\t\t\t\tr2 = this.getBezierValue(time, i, 5/*R2*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\n\t\t\t\tg2 = this.getBezierValue(time, i, 6/*G2*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\n\t\t\t\tb2 = this.getBezierValue(time, i, 7/*B2*/, curveType + 18/*BEZIER_SIZE*/ * 6 - 2/*BEZIER*/);\n\t\t}\n\n\t\tif (alpha == 1) {\n\t\t\tlight.set(r, g, b, a);\n\t\t\tdark.r = r2;\n\t\t\tdark.g = g2;\n\t\t\tdark.b = b2;\n\t\t} else {\n\t\t\tif (blend == MixBlend.setup) {\n\t\t\t\tlight.setFromColor(slot.data.color);\n\t\t\t\tlet setupDark = slot.data.darkColor;\n\t\t\t\tdark.r = setupDark.r;\n\t\t\t\tdark.g = setupDark.g;\n\t\t\t\tdark.b = setupDark.b;\n\t\t\t}\n\t\t\tlight.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\n\t\t\tdark.r += (r2 - dark.r) * alpha;\n\t\t\tdark.g += (g2 - dark.g) * alpha;\n\t\t\tdark.b += (b2 - dark.b) * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\nexport class RGB2Timeline extends CurveTimeline implements SlotTimeline {\n\tslotIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, slotIndex: number) {\n\t\tsuper(frameCount, bezierCount, [\n\t\t\tProperty.rgb + \"|\" + slotIndex,\n\t\t\tProperty.rgb2 + \"|\" + slotIndex\n\t\t]);\n\t\tthis.slotIndex = slotIndex;\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 7/*ENTRIES*/;\n\t}\n\n\t/** Sets the time in seconds, light, and dark colors for the specified key frame. */\n\tsetFrame(frame: number, time: number, r: number, g: number, b: number, r2: number, g2: number, b2: number) {\n\t\tframe *= 7/*ENTRIES*/;\n\t\tthis.frames[frame] = time;\n\t\tthis.frames[frame + 1/*R*/] = r;\n\t\tthis.frames[frame + 2/*G*/] = g;\n\t\tthis.frames[frame + 3/*B*/] = b;\n\t\tthis.frames[frame + 4/*R2*/] = r2;\n\t\tthis.frames[frame + 5/*G2*/] = g2;\n\t\tthis.frames[frame + 6/*B2*/] = b2;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet slot = skeleton.slots[this.slotIndex];\n\t\tif (!slot.bone.active) return;\n\n\t\tlet frames = this.frames;\n\t\tlet light = slot.color, dark = slot.darkColor;\n\t\tif (time < frames[0]) {\n\t\t\tlet setupLight = slot.data.color, setupDark = slot.data.darkColor;\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tlight.r = setupLight.r;\n\t\t\t\t\tlight.g = setupLight.g;\n\t\t\t\t\tlight.b = setupLight.b;\n\t\t\t\t\tdark.r = setupDark.r;\n\t\t\t\t\tdark.g = setupDark.g;\n\t\t\t\t\tdark.b = setupDark.b;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tlight.r += (setupLight.r - light.r) * alpha;\n\t\t\t\t\tlight.g += (setupLight.g - light.g) * alpha;\n\t\t\t\t\tlight.b += (setupLight.b - light.b) * alpha;\n\t\t\t\t\tdark.r += (setupDark.r - dark.r) * alpha;\n\t\t\t\t\tdark.g += (setupDark.g - dark.g) * alpha;\n\t\t\t\t\tdark.b += (setupDark.b - dark.b) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\n\t\tlet i = Timeline.search(frames, time, 7/*ENTRIES*/);\n\t\tlet curveType = this.curves[i / 7/*ENTRIES*/];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\tr = frames[i + 1/*R*/];\n\t\t\t\tg = frames[i + 2/*G*/];\n\t\t\t\tb = frames[i + 3/*B*/];\n\t\t\t\tr2 = frames[i + 4/*R2*/];\n\t\t\t\tg2 = frames[i + 5/*G2*/];\n\t\t\t\tb2 = frames[i + 6/*B2*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 7/*ENTRIES*/] - before);\n\t\t\t\tr += (frames[i + 7/*ENTRIES*/ + 1/*R*/] - r) * t;\n\t\t\t\tg += (frames[i + 7/*ENTRIES*/ + 2/*G*/] - g) * t;\n\t\t\t\tb += (frames[i + 7/*ENTRIES*/ + 3/*B*/] - b) * t;\n\t\t\t\tr2 += (frames[i + 7/*ENTRIES*/ + 4/*R2*/] - r2) * t;\n\t\t\t\tg2 += (frames[i + 7/*ENTRIES*/ + 5/*G2*/] - g2) * t;\n\t\t\t\tb2 += (frames[i + 7/*ENTRIES*/ + 6/*B2*/] - b2) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\tr = frames[i + 1/*R*/];\n\t\t\t\tg = frames[i + 2/*G*/];\n\t\t\t\tb = frames[i + 3/*B*/];\n\t\t\t\tr2 = frames[i + 4/*R2*/];\n\t\t\t\tg2 = frames[i + 5/*G2*/];\n\t\t\t\tb2 = frames[i + 6/*B2*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tr = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\n\t\t\t\tg = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t\t\tb = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\n\t\t\t\tr2 = this.getBezierValue(time, i, 4/*R2*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\n\t\t\t\tg2 = this.getBezierValue(time, i, 5/*G2*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\n\t\t\t\tb2 = this.getBezierValue(time, i, 6/*B2*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\n\t\t}\n\n\t\tif (alpha == 1) {\n\t\t\tlight.r = r;\n\t\t\tlight.g = g;\n\t\t\tlight.b = b;\n\t\t\tdark.r = r2;\n\t\t\tdark.g = g2;\n\t\t\tdark.b = b2;\n\t\t} else {\n\t\t\tif (blend == MixBlend.setup) {\n\t\t\t\tlet setupLight = slot.data.color, setupDark = slot.data.darkColor;\n\t\t\t\tlight.r = setupLight.r;\n\t\t\t\tlight.g = setupLight.g;\n\t\t\t\tlight.b = setupLight.b;\n\t\t\t\tdark.r = setupDark.r;\n\t\t\t\tdark.g = setupDark.g;\n\t\t\t\tdark.b = setupDark.b;\n\t\t\t}\n\t\t\tlight.r += (r - light.r) * alpha;\n\t\t\tlight.g += (g - light.g) * alpha;\n\t\t\tlight.b += (b - light.b) * alpha;\n\t\t\tdark.r += (r2 - dark.r) * alpha;\n\t\t\tdark.g += (g2 - dark.g) * alpha;\n\t\t\tdark.b += (b2 - dark.b) * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a slot's {@link Slot#attachment}. */\nexport class AttachmentTimeline extends Timeline implements SlotTimeline {\n\tslotIndex = 0;\n\n\t/** The attachment name for each key frame. May contain null values to clear the attachment. */\n\tattachmentNames: Array<string>;\n\n\tconstructor(frameCount: number, slotIndex: number) {\n\t\tsuper(frameCount, [\n\t\t\tProperty.attachment + \"|\" + slotIndex\n\t\t]);\n\t\tthis.slotIndex = slotIndex;\n\t\tthis.attachmentNames = new Array<string>(frameCount);\n\t}\n\n\tgetFrameCount() {\n\t\treturn this.frames.length;\n\t}\n\n\t/** Sets the time in seconds and the attachment name for the specified key frame. */\n\tsetFrame(frame: number, time: number, attachmentName: string) {\n\t\tthis.frames[frame] = time;\n\t\tthis.attachmentNames[frame] = attachmentName;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet slot = skeleton.slots[this.slotIndex];\n\t\tif (!slot.bone.active) return;\n\n\t\tif (direction == MixDirection.mixOut) {\n\t\t\tif (blend == MixBlend.setup) this.setAttachment(skeleton, slot, slot.data.attachmentName);\n\t\t\treturn;\n\t\t}\n\n\t\tif (time < this.frames[0]) {\n\t\t\tif (blend == MixBlend.setup || blend == MixBlend.first) this.setAttachment(skeleton, slot, slot.data.attachmentName);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setAttachment(skeleton, slot, this.attachmentNames[Timeline.search1(this.frames, time)]);\n\t}\n\n\tsetAttachment(skeleton: Skeleton, slot: Slot, attachmentName: string) {\n\t\tslot.setAttachment(!attachmentName ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n\t}\n}\n\n/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */\nexport class DeformTimeline extends CurveTimeline implements SlotTimeline {\n\tslotIndex = 0;\n\n\t/** The attachment that will be deformed. */\n\tattachment: VertexAttachment;\n\n\t/** The vertices for each key frame. */\n\tvertices: Array<NumberArrayLike>;\n\n\tconstructor(frameCount: number, bezierCount: number, slotIndex: number, attachment: VertexAttachment) {\n\t\tsuper(frameCount, bezierCount, [\n\t\t\tProperty.deform + \"|\" + slotIndex + \"|\" + attachment.id\n\t\t]);\n\t\tthis.slotIndex = slotIndex;\n\t\tthis.attachment = attachment;\n\t\tthis.vertices = new Array<NumberArrayLike>(frameCount);\n\t}\n\n\tgetFrameCount() {\n\t\treturn this.frames.length;\n\t}\n\n\t/** Sets the time in seconds and the vertices for the specified key frame.\n\t * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\n\tsetFrame(frame: number, time: number, vertices: NumberArrayLike) {\n\t\tthis.frames[frame] = time;\n\t\tthis.vertices[frame] = vertices;\n\t}\n\n\t/** @param value1 Ignored (0 is used for a deform timeline).\n\t * @param value2 Ignored (1 is used for a deform timeline). */\n\tsetBezier(bezier: number, frame: number, value: number, time1: number, value1: number, cx1: number, cy1: number, cx2: number,\n\t\tcy2: number, time2: number, value2: number) {\n\t\tlet curves = this.curves;\n\t\tlet i = this.getFrameCount() + bezier * 18/*BEZIER_SIZE*/;\n\t\tif (value == 0) curves[frame] = 2/*BEZIER*/ + i;\n\t\tlet tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = cy2 * 0.03 - cy1 * 0.06;\n\t\tlet dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = (cy1 - cy2 + 0.33333333) * 0.018;\n\t\tlet ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\n\t\tlet dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;\n\t\tlet x = time1 + dx, y = dy;\n\t\tfor (let n = i + 18/*BEZIER_SIZE*/; i < n; i += 2) {\n\t\t\tcurves[i] = x;\n\t\t\tcurves[i + 1] = y;\n\t\t\tdx += ddx;\n\t\t\tdy += ddy;\n\t\t\tddx += dddx;\n\t\t\tddy += dddy;\n\t\t\tx += dx;\n\t\t\ty += dy;\n\t\t}\n\t}\n\n\tgetCurvePercent(time: number, frame: number) {\n\t\tlet curves = this.curves;\n\t\tlet i = curves[frame];\n\t\tswitch (i) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet x = this.frames[frame];\n\t\t\t\treturn (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\treturn 0;\n\t\t}\n\t\ti -= 2/*BEZIER*/;\n\t\tif (curves[i] > time) {\n\t\t\tlet x = this.frames[frame];\n\t\t\treturn curves[i + 1] * (time - x) / (curves[i] - x);\n\t\t}\n\t\tlet n = i + 18/*BEZIER_SIZE*/;\n\t\tfor (i += 2; i < n; i += 2) {\n\t\t\tif (curves[i] >= time) {\n\t\t\t\tlet x = curves[i - 2], y = curves[i - 1];\n\t\t\t\treturn y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n\t\t\t}\n\t\t}\n\t\tlet x = curves[n - 2], y = curves[n - 1];\n\t\treturn y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet slot: Slot = skeleton.slots[this.slotIndex];\n\t\tif (!slot.bone.active) return;\n\t\tlet slotAttachment: Attachment = slot.getAttachment();\n\t\tif (!(slotAttachment instanceof VertexAttachment) || (<VertexAttachment>slotAttachment).deformAttachment != this.attachment) return;\n\n\t\tlet deform: Array<number> = slot.deform;\n\t\tif (deform.length == 0) blend = MixBlend.setup;\n\n\t\tlet vertices = this.vertices;\n\t\tlet vertexCount = vertices[0].length;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tlet vertexAttachment = <VertexAttachment>slotAttachment;\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tdeform.length = 0;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tif (alpha == 1) {\n\t\t\t\t\t\tdeform.length = 0;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdeform.length = vertexCount;\n\t\t\t\t\tif (!vertexAttachment.bones) {\n\t\t\t\t\t\t// Unweighted vertex positions.\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\t\tfor (var i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\tdeform[i] += (setupVertices[i] - deform[i]) * alpha;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Weighted deform offsets.\n\t\t\t\t\t\talpha = 1 - alpha;\n\t\t\t\t\t\tfor (var i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\tdeform[i] *= alpha;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tdeform.length = vertexCount;\n\t\tif (time >= frames[frames.length - 1]) { // Time is after last frame.\n\t\t\tlet lastVertices = vertices[frames.length - 1];\n\t\t\tif (alpha == 1) {\n\t\t\t\tif (blend == MixBlend.add) {\n\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\n\t\t\t\t\tif (!vertexAttachment.bones) {\n\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\tdeform[i] += lastVertices[i] - setupVertices[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Weighted deform offsets, with alpha.\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\tdeform[i] += lastVertices[i];\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tUtils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\n\t\t\t} else {\n\t\t\t\tswitch (blend) {\n\t\t\t\t\tcase MixBlend.setup: {\n\t\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\n\t\t\t\t\t\tif (!vertexAttachment.bones) {\n\t\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\n\t\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\t\t\tlet setup = setupVertices[i];\n\t\t\t\t\t\t\t\tdeform[i] = setup + (lastVertices[i] - setup) * alpha;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Weighted deform offsets, with alpha.\n\t\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\t\tdeform[i] = lastVertices[i] * alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tcase MixBlend.replace:\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\tdeform[i] += (lastVertices[i] - deform[i]) * alpha;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MixBlend.add:\n\t\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\n\t\t\t\t\t\tif (!vertexAttachment.bones) {\n\t\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\n\t\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\t\tdeform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Weighted deform offsets, with alpha.\n\t\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\t\t\t\t\tdeform[i] += lastVertices[i] * alpha;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Interpolate between the previous frame and the current frame.\n\t\tlet frame = Timeline.search1(frames, time);\n\t\tlet percent = this.getCurvePercent(time, frame);\n\t\tlet prevVertices = vertices[frame];\n\t\tlet nextVertices = vertices[frame + 1];\n\n\t\tif (alpha == 1) {\n\t\t\tif (blend == MixBlend.add) {\n\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\n\t\t\t\tif (!vertexAttachment.bones) {\n\t\t\t\t\t// Unweighted vertex positions, with alpha.\n\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\t\tdeform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Weighted deform offsets, with alpha.\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\t\tdeform[i] += prev + (nextVertices[i] - prev) * percent;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\tdeform[i] = prev + (nextVertices[i] - prev) * percent;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup: {\n\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\n\t\t\t\t\tif (!vertexAttachment.bones) {\n\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\t\tlet prev = prevVertices[i], setup = setupVertices[i];\n\t\t\t\t\t\t\tdeform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Weighted deform offsets, with alpha.\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\t\t\tdeform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase MixBlend.first:\n\t\t\t\tcase MixBlend.replace:\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\t\tdeform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase MixBlend.add:\n\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\n\t\t\t\t\tif (!vertexAttachment.bones) {\n\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\t\t\tdeform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Weighted deform offsets, with alpha.\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\t\t\t\tlet prev = prevVertices[i];\n\t\t\t\t\t\t\tdeform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Fires an {@link Event} when specific animation times are reached. */\nexport class EventTimeline extends Timeline {\n\tstatic propertyIds = [\"\" + Property.event];\n\n\t/** The event for each key frame. */\n\tevents: Array<Event>;\n\n\tconstructor(frameCount: number) {\n\t\tsuper(frameCount, EventTimeline.propertyIds);\n\n\t\tthis.events = new Array<Event>(frameCount);\n\t}\n\n\tgetFrameCount() {\n\t\treturn this.frames.length;\n\t}\n\n\t/** Sets the time in seconds and the event for the specified key frame. */\n\tsetFrame(frame: number, event: Event) {\n\t\tthis.frames[frame] = event.time;\n\t\tthis.events[frame] = event;\n\t}\n\n\t/** Fires events for frames > `lastTime` and <= `time`. */\n\tapply(skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tif (!firedEvents) return;\n\n\t\tlet frames = this.frames;\n\t\tlet frameCount = this.frames.length;\n\n\t\tif (lastTime > time) { // Fire events after last time for looped animations.\n\t\t\tthis.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\n\t\t\tlastTime = -1;\n\t\t} else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\n\t\t\treturn;\n\t\tif (time < frames[0]) return; // Time is before first frame.\n\n\t\tlet i = 0;\n\t\tif (lastTime < frames[0])\n\t\t\ti = 0;\n\t\telse {\n\t\t\ti = Timeline.search1(frames, lastTime) + 1;\n\t\t\tlet frameTime = frames[i];\n\t\t\twhile (i > 0) { // Fire multiple events with the same frame.\n\t\t\t\tif (frames[i - 1] != frameTime) break;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tfor (; i < frameCount && time >= frames[i]; i++)\n\t\t\tfiredEvents.push(this.events[i]);\n\t}\n}\n\n/** Changes a skeleton's {@link Skeleton#drawOrder}. */\nexport class DrawOrderTimeline extends Timeline {\n\tstatic propertyIds = [\"\" + Property.drawOrder];\n\n\t/** The draw order for each key frame. See {@link #setFrame(int, float, int[])}. */\n\tdrawOrders: Array<Array<number>>;\n\n\tconstructor(frameCount: number) {\n\t\tsuper(frameCount, DrawOrderTimeline.propertyIds);\n\t\tthis.drawOrders = new Array<Array<number>>(frameCount);\n\t}\n\n\tgetFrameCount() {\n\t\treturn this.frames.length;\n\t}\n\n\t/** Sets the time in seconds and the draw order for the specified key frame.\n\t * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\n\t *           draw order. */\n\tsetFrame(frame: number, time: number, drawOrder: Array<number>) {\n\t\tthis.frames[frame] = time;\n\t\tthis.drawOrders[frame] = drawOrder;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tif (direction == MixDirection.mixOut) {\n\t\t\tif (blend == MixBlend.setup) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n\t\t\treturn;\n\t\t}\n\n\t\tif (time < this.frames[0]) {\n\t\t\tif (blend == MixBlend.setup || blend == MixBlend.first) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n\t\t\treturn;\n\t\t}\n\n\t\tlet drawOrderToSetupIndex = this.drawOrders[Timeline.search1(this.frames, time)];\n\t\tif (!drawOrderToSetupIndex)\n\t\t\tUtils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n\t\telse {\n\t\t\tlet drawOrder: Array<Slot> = skeleton.drawOrder;\n\t\t\tlet slots: Array<Slot> = skeleton.slots;\n\t\t\tfor (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\n\t\t\t\tdrawOrder[i] = slots[drawOrderToSetupIndex[i]];\n\t\t}\n\t}\n}\n\n/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\n * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */\nexport class IkConstraintTimeline extends CurveTimeline {\n\t/** The index of the IK constraint slot in {@link Skeleton#ikConstraints} that will be changed. */\n\tikConstraintIndex: number;\n\n\tconstructor(frameCount: number, bezierCount: number, ikConstraintIndex: number) {\n\t\tsuper(frameCount, bezierCount, [\n\t\t\tProperty.ikConstraint + \"|\" + ikConstraintIndex\n\t\t]);\n\t\tthis.ikConstraintIndex = ikConstraintIndex;\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 6/*ENTRIES*/;\n\t}\n\n\t/** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */\n\tsetFrame(frame: number, time: number, mix: number, softness: number, bendDirection: number, compress: boolean, stretch: boolean) {\n\t\tframe *= 6/*ENTRIES*/;\n\t\tthis.frames[frame] = time;\n\t\tthis.frames[frame + 1/*MIX*/] = mix;\n\t\tthis.frames[frame + 2/*SOFTNESS*/] = softness;\n\t\tthis.frames[frame + 3/*BEND_DIRECTION*/] = bendDirection;\n\t\tthis.frames[frame + 4/*COMPRESS*/] = compress ? 1 : 0;\n\t\tthis.frames[frame + 5/*STRETCH*/] = stretch ? 1 : 0;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet constraint: IkConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\n\t\tif (!constraint.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tconstraint.mix = constraint.data.mix;\n\t\t\t\t\tconstraint.softness = constraint.data.softness;\n\t\t\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\n\t\t\t\t\tconstraint.compress = constraint.data.compress;\n\t\t\t\t\tconstraint.stretch = constraint.data.stretch;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tconstraint.mix += (constraint.data.mix - constraint.mix) * alpha;\n\t\t\t\t\tconstraint.softness += (constraint.data.softness - constraint.softness) * alpha;\n\t\t\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\n\t\t\t\t\tconstraint.compress = constraint.data.compress;\n\t\t\t\t\tconstraint.stretch = constraint.data.stretch;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet mix = 0, softness = 0;\n\t\tlet i = Timeline.search(frames, time, 6/*ENTRIES*/)\n\t\tlet curveType = this.curves[i / 6/*ENTRIES*/];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\tmix = frames[i + 1/*MIX*/];\n\t\t\t\tsoftness = frames[i + 2/*SOFTNESS*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 6/*ENTRIES*/] - before);\n\t\t\t\tmix += (frames[i + 6/*ENTRIES*/ + 1/*MIX*/] - mix) * t;\n\t\t\t\tsoftness += (frames[i + 6/*ENTRIES*/ + 2/*SOFTNESS*/] - softness) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\tmix = frames[i + 1/*MIX*/];\n\t\t\t\tsoftness = frames[i + 2/*SOFTNESS*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmix = this.getBezierValue(time, i, 1/*MIX*/, curveType - 2/*BEZIER*/);\n\t\t\t\tsoftness = this.getBezierValue(time, i, 2/*SOFTNESS*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t}\n\n\t\tif (blend == MixBlend.setup) {\n\t\t\tconstraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;\n\t\t\tconstraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;\n\n\t\t\tif (direction == MixDirection.mixOut) {\n\t\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\n\t\t\t\tconstraint.compress = constraint.data.compress;\n\t\t\t\tconstraint.stretch = constraint.data.stretch;\n\t\t\t} else {\n\t\t\t\tconstraint.bendDirection = frames[i + 3/*BEND_DIRECTION*/];\n\t\t\t\tconstraint.compress = frames[i + 4/*COMPRESS*/] != 0;\n\t\t\t\tconstraint.stretch = frames[i + 5/*STRETCH*/] != 0;\n\t\t\t}\n\t\t} else {\n\t\t\tconstraint.mix += (mix - constraint.mix) * alpha;\n\t\t\tconstraint.softness += (softness - constraint.softness) * alpha;\n\t\t\tif (direction == MixDirection.mixIn) {\n\t\t\t\tconstraint.bendDirection = frames[i + 3/*BEND_DIRECTION*/];\n\t\t\t\tconstraint.compress = frames[i + 4/*COMPRESS*/] != 0;\n\t\t\t\tconstraint.stretch = frames[i + 5/*STRETCH*/] != 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\n * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */\nexport class TransformConstraintTimeline extends CurveTimeline {\n\t/** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */\n\ttransformConstraintIndex: number;\n\n\tconstructor(frameCount: number, bezierCount: number, transformConstraintIndex: number) {\n\t\tsuper(frameCount, bezierCount, [\n\t\t\tProperty.transformConstraint + \"|\" + transformConstraintIndex\n\t\t]);\n\t\tthis.transformConstraintIndex = transformConstraintIndex;\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 7/*ENTRIES*/;\n\t}\n\n\t/** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\n\tsetFrame(frame: number, time: number, mixRotate: number, mixX: number, mixY: number, mixScaleX: number, mixScaleY: number,\n\t\tmixShearY: number) {\n\t\tlet frames = this.frames;\n\t\tframe *= 7/*ENTRIES*/;\n\t\tframes[frame] = time;\n\t\tframes[frame + 1/*ROTATE*/] = mixRotate;\n\t\tframes[frame + 2/*X*/] = mixX;\n\t\tframes[frame + 3/*Y*/] = mixY;\n\t\tframes[frame + 4/*SCALEX*/] = mixScaleX;\n\t\tframes[frame + 5/*SCALEY*/] = mixScaleY;\n\t\tframes[frame + 6/*SHEARY*/] = mixShearY;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet constraint: TransformConstraint = skeleton.transformConstraints[this.transformConstraintIndex];\n\t\tif (!constraint.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tlet data = constraint.data;\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tconstraint.mixRotate = data.mixRotate;\n\t\t\t\t\tconstraint.mixX = data.mixX;\n\t\t\t\t\tconstraint.mixY = data.mixY;\n\t\t\t\t\tconstraint.mixScaleX = data.mixScaleX;\n\t\t\t\t\tconstraint.mixScaleY = data.mixScaleY;\n\t\t\t\t\tconstraint.mixShearY = data.mixShearY;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tconstraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;\n\t\t\t\t\tconstraint.mixX += (data.mixX - constraint.mixX) * alpha;\n\t\t\t\t\tconstraint.mixY += (data.mixY - constraint.mixY) * alpha;\n\t\t\t\t\tconstraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;\n\t\t\t\t\tconstraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;\n\t\t\t\t\tconstraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet rotate, x, y, scaleX, scaleY, shearY;\n\t\tlet i = Timeline.search(frames, time, 7/*ENTRIES*/);\n\t\tlet curveType = this.curves[i / 7/*ENTRIES*/];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\trotate = frames[i + 1/*ROTATE*/];\n\t\t\t\tx = frames[i + 2/*X*/];\n\t\t\t\ty = frames[i + 3/*Y*/];\n\t\t\t\tscaleX = frames[i + 4/*SCALEX*/];\n\t\t\t\tscaleY = frames[i + 5/*SCALEY*/];\n\t\t\t\tshearY = frames[i + 6/*SHEARY*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 7/*ENTRIES*/] - before);\n\t\t\t\trotate += (frames[i + 7/*ENTRIES*/ + 1/*ROTATE*/] - rotate) * t;\n\t\t\t\tx += (frames[i + 7/*ENTRIES*/ + 2/*X*/] - x) * t;\n\t\t\t\ty += (frames[i + 7/*ENTRIES*/ + 3/*Y*/] - y) * t;\n\t\t\t\tscaleX += (frames[i + 7/*ENTRIES*/ + 4/*SCALEX*/] - scaleX) * t;\n\t\t\t\tscaleY += (frames[i + 7/*ENTRIES*/ + 5/*SCALEY*/] - scaleY) * t;\n\t\t\t\tshearY += (frames[i + 7/*ENTRIES*/ + 6/*SHEARY*/] - shearY) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\trotate = frames[i + 1/*ROTATE*/];\n\t\t\t\tx = frames[i + 2/*X*/];\n\t\t\t\ty = frames[i + 3/*Y*/];\n\t\t\t\tscaleX = frames[i + 4/*SCALEX*/];\n\t\t\t\tscaleY = frames[i + 5/*SCALEY*/];\n\t\t\t\tshearY = frames[i + 6/*SHEARY*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\trotate = this.getBezierValue(time, i, 1/*ROTATE*/, curveType - 2/*BEZIER*/);\n\t\t\t\tx = this.getBezierValue(time, i, 2/*X*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t\t\ty = this.getBezierValue(time, i, 3/*Y*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\n\t\t\t\tscaleX = this.getBezierValue(time, i, 4/*SCALEX*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\n\t\t\t\tscaleY = this.getBezierValue(time, i, 5/*SCALEY*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\n\t\t\t\tshearY = this.getBezierValue(time, i, 6/*SHEARY*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\n\t\t}\n\n\t\tif (blend == MixBlend.setup) {\n\t\t\tlet data = constraint.data;\n\t\t\tconstraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\n\t\t\tconstraint.mixX = data.mixX + (x - data.mixX) * alpha;\n\t\t\tconstraint.mixY = data.mixY + (y - data.mixY) * alpha;\n\t\t\tconstraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;\n\t\t\tconstraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;\n\t\t\tconstraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;\n\t\t} else {\n\t\t\tconstraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\n\t\t\tconstraint.mixX += (x - constraint.mixX) * alpha;\n\t\t\tconstraint.mixY += (y - constraint.mixY) * alpha;\n\t\t\tconstraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;\n\t\t\tconstraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;\n\t\t\tconstraint.mixShearY += (shearY - constraint.mixShearY) * alpha;\n\t\t}\n\t}\n}\n\n/** Changes a path constraint's {@link PathConstraint#position}. */\nexport class PathConstraintPositionTimeline extends CurveTimeline1 {\n\t/** The index of the path constraint slot in {@link Skeleton#pathConstraints} that will be changed. */\n\tpathConstraintIndex: number;\n\n\tconstructor(frameCount: number, bezierCount: number, pathConstraintIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.pathConstraintPosition + \"|\" + pathConstraintIndex);\n\t\tthis.pathConstraintIndex = pathConstraintIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n\t\tif (!constraint.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tconstraint.position = constraint.data.position;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tconstraint.position += (constraint.data.position - constraint.position) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet position = this.getCurveValue(time);\n\n\t\tif (blend == MixBlend.setup)\n\t\t\tconstraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\n\t\telse\n\t\t\tconstraint.position += (position - constraint.position) * alpha;\n\t}\n}\n\n/** Changes a path constraint's {@link PathConstraint#spacing}. */\nexport class PathConstraintSpacingTimeline extends CurveTimeline1 {\n\t/** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\n\tpathConstraintIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, pathConstraintIndex: number) {\n\t\tsuper(frameCount, bezierCount, Property.pathConstraintSpacing + \"|\" + pathConstraintIndex);\n\t\tthis.pathConstraintIndex = pathConstraintIndex;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n\t\tif (!constraint.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tconstraint.spacing = constraint.data.spacing;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tconstraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet spacing = this.getCurveValue(time);\n\n\t\tif (blend == MixBlend.setup)\n\t\t\tconstraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\n\t\telse\n\t\t\tconstraint.spacing += (spacing - constraint.spacing) * alpha;\n\t}\n}\n\n/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\n * {@link PathConstraint#getMixY()}. */\nexport class PathConstraintMixTimeline extends CurveTimeline {\n\t/** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\n\tpathConstraintIndex = 0;\n\n\tconstructor(frameCount: number, bezierCount: number, pathConstraintIndex: number) {\n\t\tsuper(frameCount, bezierCount, [\n\t\t\tProperty.pathConstraintMix + \"|\" + pathConstraintIndex\n\t\t]);\n\t\tthis.pathConstraintIndex = pathConstraintIndex;\n\t}\n\n\tgetFrameEntries() {\n\t\treturn 4/*ENTRIES*/;\n\t}\n\n\tsetFrame(frame: number, time: number, mixRotate: number, mixX: number, mixY: number) {\n\t\tlet frames = this.frames;\n\t\tframe <<= 2;\n\t\tframes[frame] = time;\n\t\tframes[frame + 1/*ROTATE*/] = mixRotate;\n\t\tframes[frame + 2/*X*/] = mixX;\n\t\tframes[frame + 3/*Y*/] = mixY;\n\t}\n\n\tapply(skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n\t\tif (!constraint.active) return;\n\n\t\tlet frames = this.frames;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tconstraint.mixRotate = constraint.data.mixRotate;\n\t\t\t\t\tconstraint.mixX = constraint.data.mixX;\n\t\t\t\t\tconstraint.mixY = constraint.data.mixY;\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tconstraint.mixRotate += (constraint.data.mixRotate - constraint.mixRotate) * alpha;\n\t\t\t\t\tconstraint.mixX += (constraint.data.mixX - constraint.mixX) * alpha;\n\t\t\t\t\tconstraint.mixY += (constraint.data.mixY - constraint.mixY) * alpha;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tlet rotate, x, y;\n\t\tlet i = Timeline.search(frames, time, 4/*ENTRIES*/);\n\t\tlet curveType = this.curves[i >> 2];\n\t\tswitch (curveType) {\n\t\t\tcase 0/*LINEAR*/:\n\t\t\t\tlet before = frames[i];\n\t\t\t\trotate = frames[i + 1/*ROTATE*/];\n\t\t\t\tx = frames[i + 2/*X*/];\n\t\t\t\ty = frames[i + 3/*Y*/];\n\t\t\t\tlet t = (time - before) / (frames[i + 4/*ENTRIES*/] - before);\n\t\t\t\trotate += (frames[i + 4/*ENTRIES*/ + 1/*ROTATE*/] - rotate) * t;\n\t\t\t\tx += (frames[i + 4/*ENTRIES*/ + 2/*X*/] - x) * t;\n\t\t\t\ty += (frames[i + 4/*ENTRIES*/ + 3/*Y*/] - y) * t;\n\t\t\t\tbreak;\n\t\t\tcase 1/*STEPPED*/:\n\t\t\t\trotate = frames[i + 1/*ROTATE*/];\n\t\t\t\tx = frames[i + 2/*X*/];\n\t\t\t\ty = frames[i + 3/*Y*/];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\trotate = this.getBezierValue(time, i, 1/*ROTATE*/, curveType - 2/*BEZIER*/);\n\t\t\t\tx = this.getBezierValue(time, i, 2/*X*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\n\t\t\t\ty = this.getBezierValue(time, i, 3/*Y*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\n\t\t}\n\n\t\tif (blend == MixBlend.setup) {\n\t\t\tlet data = constraint.data;\n\t\t\tconstraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\n\t\t\tconstraint.mixX = data.mixX + (x - data.mixX) * alpha;\n\t\t\tconstraint.mixY = data.mixY + (y - data.mixY) * alpha;\n\t\t} else {\n\t\t\tconstraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\n\t\t\tconstraint.mixX += (x - constraint.mixX) * alpha;\n\t\t\tconstraint.mixY += (y - constraint.mixY) * alpha;\n\t\t}\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Animation, MixBlend, AttachmentTimeline, MixDirection, RotateTimeline, DrawOrderTimeline, Timeline, EventTimeline } from \"./Animation\";\nimport { AnimationStateData } from \"./AnimationStateData\";\nimport { Skeleton } from \"./Skeleton\";\nimport { Slot } from \"./Slot\";\nimport { StringSet, Pool, Utils, MathUtils } from \"./Utils\";\nimport { Event } from \"./Event\";\n\n\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\n * multiple animations on top of each other (layering).\n *\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */\nexport class AnimationState {\n\tprivate static emptyAnimation(): Animation {\n\t\tif (!_emptyAnimation) _emptyAnimation = new Animation(\"<empty>\", [], 0);\n\t\treturn _emptyAnimation;\n\t}\n\n\t/** The AnimationStateData to look up mix durations. */\n\tdata: AnimationStateData;\n\n\t/** The list of tracks that currently have animations, which may contain null entries. */\n\ttracks = new Array<TrackEntry>();\n\n\t/** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n\t * or faster. Defaults to 1.\n\t *\n\t * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\n\ttimeScale = 1;\n\tunkeyedState = 0;\n\n\tevents = new Array<Event>();\n\tlisteners = new Array<AnimationStateListener>();\n\tqueue = new EventQueue(this);\n\tpropertyIDs = new StringSet();\n\tanimationsChanged = false;\n\n\ttrackEntryPool = new Pool<TrackEntry>(() => new TrackEntry());\n\n\tconstructor(data: AnimationStateData) {\n\t\tthis.data = data;\n\t}\n\n\t/** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\n\tupdate(delta: number) {\n\t\tdelta *= this.timeScale;\n\t\tlet tracks = this.tracks;\n\t\tfor (let i = 0, n = tracks.length; i < n; i++) {\n\t\t\tlet current = tracks[i];\n\t\t\tif (!current) continue;\n\n\t\t\tcurrent.animationLast = current.nextAnimationLast;\n\t\t\tcurrent.trackLast = current.nextTrackLast;\n\n\t\t\tlet currentDelta = delta * current.timeScale;\n\n\t\t\tif (current.delay > 0) {\n\t\t\t\tcurrent.delay -= currentDelta;\n\t\t\t\tif (current.delay > 0) continue;\n\t\t\t\tcurrentDelta = -current.delay;\n\t\t\t\tcurrent.delay = 0;\n\t\t\t}\n\n\t\t\tlet next = current.next;\n\t\t\tif (next) {\n\t\t\t\t// When the next entry's delay is passed, change to the next entry, preserving leftover time.\n\t\t\t\tlet nextTime = current.trackLast - next.delay;\n\t\t\t\tif (nextTime >= 0) {\n\t\t\t\t\tnext.delay = 0;\n\t\t\t\t\tnext.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\n\t\t\t\t\tcurrent.trackTime += currentDelta;\n\t\t\t\t\tthis.setCurrent(i, next, true);\n\t\t\t\t\twhile (next.mixingFrom) {\n\t\t\t\t\t\tnext.mixTime += delta;\n\t\t\t\t\t\tnext = next.mixingFrom;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {\n\t\t\t\ttracks[i] = null;\n\t\t\t\tthis.queue.end(current);\n\t\t\t\tthis.clearNext(current);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (current.mixingFrom && this.updateMixingFrom(current, delta)) {\n\t\t\t\t// End mixing from entries once all have completed.\n\t\t\t\tlet from = current.mixingFrom;\n\t\t\t\tcurrent.mixingFrom = null;\n\t\t\t\tif (from) from.mixingTo = null;\n\t\t\t\twhile (from) {\n\t\t\t\t\tthis.queue.end(from);\n\t\t\t\t\tfrom = from.mixingFrom;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrent.trackTime += currentDelta;\n\t\t}\n\n\t\tthis.queue.drain();\n\t}\n\n\t/** Returns true when all mixing from entries are complete. */\n\tupdateMixingFrom(to: TrackEntry, delta: number): boolean {\n\t\tlet from = to.mixingFrom;\n\t\tif (!from) return true;\n\n\t\tlet finished = this.updateMixingFrom(from, delta);\n\n\t\tfrom.animationLast = from.nextAnimationLast;\n\t\tfrom.trackLast = from.nextTrackLast;\n\n\t\t// Require mixTime > 0 to ensure the mixing from entry was applied at least once.\n\t\tif (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\n\t\t\t// Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\n\t\t\tif (from.totalAlpha == 0 || to.mixDuration == 0) {\n\t\t\t\tto.mixingFrom = from.mixingFrom;\n\t\t\t\tif (from.mixingFrom) from.mixingFrom.mixingTo = to;\n\t\t\t\tto.interruptAlpha = from.interruptAlpha;\n\t\t\t\tthis.queue.end(from);\n\t\t\t}\n\t\t\treturn finished;\n\t\t}\n\n\t\tfrom.trackTime += delta * from.timeScale;\n\t\tto.mixTime += delta;\n\t\treturn false;\n\t}\n\n\t/** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\n\t * animation state can be applied to multiple skeletons to pose them identically.\n\t * @returns True if any animations were applied. */\n\tapply(skeleton: Skeleton): boolean {\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\n\t\tif (this.animationsChanged) this._animationsChanged();\n\n\t\tlet events = this.events;\n\t\tlet tracks = this.tracks;\n\t\tlet applied = false;\n\n\t\tfor (let i = 0, n = tracks.length; i < n; i++) {\n\t\t\tlet current = tracks[i];\n\t\t\tif (!current || current.delay > 0) continue;\n\t\t\tapplied = true;\n\t\t\tlet blend: MixBlend = i == 0 ? MixBlend.first : current.mixBlend;\n\n\t\t\t// Apply mixing from entries first.\n\t\t\tlet mix = current.alpha;\n\t\t\tif (current.mixingFrom)\n\t\t\t\tmix *= this.applyMixingFrom(current, skeleton, blend);\n\t\t\telse if (current.trackTime >= current.trackEnd && !current.next)\n\t\t\t\tmix = 0;\n\n\t\t\t// Apply current entry.\n\t\t\tlet animationLast = current.animationLast, animationTime = current.getAnimationTime(), applyTime = animationTime;\n\t\t\tlet applyEvents = events;\n\t\t\tif (current.reverse) {\n\t\t\t\tapplyTime = current.animation.duration - applyTime;\n\t\t\t\tapplyEvents = null;\n\t\t\t}\n\t\t\tlet timelines = current.animation.timelines;\n\t\t\tlet timelineCount = timelines.length;\n\t\t\tif ((i == 0 && mix == 1) || blend == MixBlend.add) {\n\t\t\t\tfor (let ii = 0; ii < timelineCount; ii++) {\n\t\t\t\t\t// Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\n\t\t\t\t\t// to sometimes stop rendering when using color correction, as their RGBA values become NaN.\n\t\t\t\t\t// (https://github.com/pixijs/pixi-spine/issues/302)\n\t\t\t\t\tUtils.webkit602BugfixHelper(mix, blend);\n\t\t\t\t\tvar timeline = timelines[ii];\n\t\t\t\t\tif (timeline instanceof AttachmentTimeline)\n\t\t\t\t\t\tthis.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\n\t\t\t\t\telse\n\t\t\t\t\t\ttimeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, blend, MixDirection.mixIn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet timelineMode = current.timelineMode;\n\n\t\t\t\tlet firstFrame = current.timelinesRotation.length != timelineCount << 1;\n\t\t\t\tif (firstFrame) current.timelinesRotation.length = timelineCount << 1;\n\n\t\t\t\tfor (let ii = 0; ii < timelineCount; ii++) {\n\t\t\t\t\tlet timeline = timelines[ii];\n\t\t\t\t\tlet timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;\n\t\t\t\t\tif (timeline instanceof RotateTimeline) {\n\t\t\t\t\t\tthis.applyRotateTimeline(timeline, skeleton, applyTime, mix, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);\n\t\t\t\t\t} else if (timeline instanceof AttachmentTimeline) {\n\t\t\t\t\t\tthis.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n\t\t\t\t\t\tUtils.webkit602BugfixHelper(mix, blend);\n\t\t\t\t\t\ttimeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, timelineBlend, MixDirection.mixIn);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.queueEvents(current, animationTime);\n\t\t\tevents.length = 0;\n\t\t\tcurrent.nextAnimationLast = animationTime;\n\t\t\tcurrent.nextTrackLast = current.trackTime;\n\t\t}\n\n\t\t// Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\n\t\t// subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\n\t\t// the time is before the first key).\n\t\tvar setupState = this.unkeyedState + SETUP;\n\t\tvar slots = skeleton.slots;\n\t\tfor (var i = 0, n = skeleton.slots.length; i < n; i++) {\n\t\t\tvar slot = slots[i];\n\t\t\tif (slot.attachmentState == setupState) {\n\t\t\t\tvar attachmentName = slot.data.attachmentName;\n\t\t\t\tslot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n\t\t\t}\n\t\t}\n\t\tthis.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.\n\n\t\tthis.queue.drain();\n\t\treturn applied;\n\t}\n\n\tapplyMixingFrom(to: TrackEntry, skeleton: Skeleton, blend: MixBlend) {\n\t\tlet from = to.mixingFrom;\n\t\tif (from.mixingFrom) this.applyMixingFrom(from, skeleton, blend);\n\n\t\tlet mix = 0;\n\t\tif (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.\n\t\t\tmix = 1;\n\t\t\tif (blend == MixBlend.first) blend = MixBlend.setup;\n\t\t} else {\n\t\t\tmix = to.mixTime / to.mixDuration;\n\t\t\tif (mix > 1) mix = 1;\n\t\t\tif (blend != MixBlend.first) blend = from.mixBlend;\n\t\t}\n\n\t\tlet attachments = mix < from.attachmentThreshold, drawOrder = mix < from.drawOrderThreshold;\n\t\tlet timelines = from.animation.timelines;\n\t\tlet timelineCount = timelines.length;\n\t\tlet alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);\n\t\tlet animationLast = from.animationLast, animationTime = from.getAnimationTime(), applyTime = animationTime;\n\t\tlet events = null;\n\t\tif (from.reverse)\n\t\t\tapplyTime = from.animation.duration - applyTime;\n\t\telse if (mix < from.eventThreshold)\n\t\t\tevents = this.events;\n\n\t\tif (blend == MixBlend.add) {\n\t\t\tfor (let i = 0; i < timelineCount; i++)\n\t\t\t\ttimelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);\n\t\t} else {\n\t\t\tlet timelineMode = from.timelineMode;\n\t\t\tlet timelineHoldMix = from.timelineHoldMix;\n\n\t\t\tlet firstFrame = from.timelinesRotation.length != timelineCount << 1;\n\t\t\tif (firstFrame) from.timelinesRotation.length = timelineCount << 1;\n\n\t\t\tfrom.totalAlpha = 0;\n\t\t\tfor (let i = 0; i < timelineCount; i++) {\n\t\t\t\tlet timeline = timelines[i];\n\t\t\t\tlet direction = MixDirection.mixOut;\n\t\t\t\tlet timelineBlend: MixBlend;\n\t\t\t\tlet alpha = 0;\n\t\t\t\tswitch (timelineMode[i]) {\n\t\t\t\t\tcase SUBSEQUENT:\n\t\t\t\t\t\tif (!drawOrder && timeline instanceof DrawOrderTimeline) continue;\n\t\t\t\t\t\ttimelineBlend = blend;\n\t\t\t\t\t\talpha = alphaMix;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FIRST:\n\t\t\t\t\t\ttimelineBlend = MixBlend.setup;\n\t\t\t\t\t\talpha = alphaMix;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HOLD_SUBSEQUENT:\n\t\t\t\t\t\ttimelineBlend = blend;\n\t\t\t\t\t\talpha = alphaHold;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HOLD_FIRST:\n\t\t\t\t\t\ttimelineBlend = MixBlend.setup;\n\t\t\t\t\t\talpha = alphaHold;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttimelineBlend = MixBlend.setup;\n\t\t\t\t\t\tlet holdMix = timelineHoldMix[i];\n\t\t\t\t\t\talpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfrom.totalAlpha += alpha;\n\n\t\t\t\tif (timeline instanceof RotateTimeline)\n\t\t\t\t\tthis.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);\n\t\t\t\telse if (timeline instanceof AttachmentTimeline)\n\t\t\t\t\tthis.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments);\n\t\t\t\telse {\n\t\t\t\t\t// This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n\t\t\t\t\tUtils.webkit602BugfixHelper(alpha, blend);\n\t\t\t\t\tif (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)\n\t\t\t\t\t\tdirection = MixDirection.mixIn;\n\t\t\t\t\ttimeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (to.mixDuration > 0) this.queueEvents(from, animationTime);\n\t\tthis.events.length = 0;\n\t\tfrom.nextAnimationLast = animationTime;\n\t\tfrom.nextTrackLast = from.trackTime;\n\n\t\treturn mix;\n\t}\n\n\tapplyAttachmentTimeline(timeline: AttachmentTimeline, skeleton: Skeleton, time: number, blend: MixBlend, attachments: boolean) {\n\t\tvar slot = skeleton.slots[timeline.slotIndex];\n\t\tif (!slot.bone.active) return;\n\n\t\tif (time < timeline.frames[0]) { // Time is before first frame.\n\t\t\tif (blend == MixBlend.setup || blend == MixBlend.first)\n\t\t\t\tthis.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\n\t\t} else\n\t\t\tthis.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline.search1(timeline.frames, time)], attachments);\n\n\t\t// If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\n\t\tif (slot.attachmentState <= this.unkeyedState) slot.attachmentState = this.unkeyedState + SETUP;\n\t}\n\n\tsetAttachment(skeleton: Skeleton, slot: Slot, attachmentName: string, attachments: boolean) {\n\t\tslot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n\t\tif (attachments) slot.attachmentState = this.unkeyedState + CURRENT;\n\t}\n\n\tapplyRotateTimeline(timeline: RotateTimeline, skeleton: Skeleton, time: number, alpha: number, blend: MixBlend,\n\t\ttimelinesRotation: Array<number>, i: number, firstFrame: boolean) {\n\n\t\tif (firstFrame) timelinesRotation[i] = 0;\n\n\t\tif (alpha == 1) {\n\t\t\ttimeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\n\t\t\treturn;\n\t\t}\n\n\t\tlet bone = skeleton.bones[timeline.boneIndex];\n\t\tif (!bone.active) return;\n\t\tlet frames = timeline.frames;\n\t\tlet r1 = 0, r2 = 0;\n\t\tif (time < frames[0]) {\n\t\t\tswitch (blend) {\n\t\t\t\tcase MixBlend.setup:\n\t\t\t\t\tbone.rotation = bone.data.rotation;\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t\tcase MixBlend.first:\n\t\t\t\t\tr1 = bone.rotation;\n\t\t\t\t\tr2 = bone.data.rotation;\n\t\t\t}\n\t\t} else {\n\t\t\tr1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\n\t\t\tr2 = bone.data.rotation + timeline.getCurveValue(time);\n\t\t}\n\n\t\t// Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\n\t\tlet total = 0, diff = r2 - r1;\n\t\tdiff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;\n\t\tif (diff == 0) {\n\t\t\ttotal = timelinesRotation[i];\n\t\t} else {\n\t\t\tlet lastTotal = 0, lastDiff = 0;\n\t\t\tif (firstFrame) {\n\t\t\t\tlastTotal = 0;\n\t\t\t\tlastDiff = diff;\n\t\t\t} else {\n\t\t\t\tlastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\n\t\t\t\tlastDiff = timelinesRotation[i + 1]; // Difference between bones.\n\t\t\t}\n\t\t\tlet current = diff > 0, dir = lastTotal >= 0;\n\t\t\t// Detect cross at 0 (not 180).\n\t\t\tif (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\n\t\t\t\t// A cross after a 360 rotation is a loop.\n\t\t\t\tif (Math.abs(lastTotal) > 180) lastTotal += 360 * MathUtils.signum(lastTotal);\n\t\t\t\tdir = current;\n\t\t\t}\n\t\t\ttotal = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.\n\t\t\tif (dir != current) total += 360 * MathUtils.signum(lastTotal);\n\t\t\ttimelinesRotation[i] = total;\n\t\t}\n\t\ttimelinesRotation[i + 1] = diff;\n\t\tbone.rotation = r1 + total * alpha;\n\t}\n\n\tqueueEvents(entry: TrackEntry, animationTime: number) {\n\t\tlet animationStart = entry.animationStart, animationEnd = entry.animationEnd;\n\t\tlet duration = animationEnd - animationStart;\n\t\tlet trackLastWrapped = entry.trackLast % duration;\n\n\t\t// Queue events before complete.\n\t\tlet events = this.events;\n\t\tlet i = 0, n = events.length;\n\t\tfor (; i < n; i++) {\n\t\t\tlet event = events[i];\n\t\t\tif (event.time < trackLastWrapped) break;\n\t\t\tif (event.time > animationEnd) continue; // Discard events outside animation start/end.\n\t\t\tthis.queue.event(entry, event);\n\t\t}\n\n\t\t// Queue complete if completed a loop iteration or the animation.\n\t\tlet complete = false;\n\t\tif (entry.loop)\n\t\t\tcomplete = duration == 0 || trackLastWrapped > entry.trackTime % duration;\n\t\telse\n\t\t\tcomplete = animationTime >= animationEnd && entry.animationLast < animationEnd;\n\t\tif (complete) this.queue.complete(entry);\n\n\t\t// Queue events after complete.\n\t\tfor (; i < n; i++) {\n\t\t\tlet event = events[i];\n\t\t\tif (event.time < animationStart) continue; // Discard events outside animation start/end.\n\t\t\tthis.queue.event(entry, event);\n\t\t}\n\t}\n\n\t/** Removes all animations from all tracks, leaving skeletons in their current pose.\n\t *\n\t * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n\t * rather than leaving them in their current pose. */\n\tclearTracks() {\n\t\tlet oldDrainDisabled = this.queue.drainDisabled;\n\t\tthis.queue.drainDisabled = true;\n\t\tfor (let i = 0, n = this.tracks.length; i < n; i++)\n\t\t\tthis.clearTrack(i);\n\t\tthis.tracks.length = 0;\n\t\tthis.queue.drainDisabled = oldDrainDisabled;\n\t\tthis.queue.drain();\n\t}\n\n\t/** Removes all animations from the track, leaving skeletons in their current pose.\n\t *\n\t * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n\t * rather than leaving them in their current pose. */\n\tclearTrack(trackIndex: number) {\n\t\tif (trackIndex >= this.tracks.length) return;\n\t\tlet current = this.tracks[trackIndex];\n\t\tif (!current) return;\n\n\t\tthis.queue.end(current);\n\n\t\tthis.clearNext(current);\n\n\t\tlet entry = current;\n\t\twhile (true) {\n\t\t\tlet from = entry.mixingFrom;\n\t\t\tif (!from) break;\n\t\t\tthis.queue.end(from);\n\t\t\tentry.mixingFrom = null;\n\t\t\tentry.mixingTo = null;\n\t\t\tentry = from;\n\t\t}\n\n\t\tthis.tracks[current.trackIndex] = null;\n\n\t\tthis.queue.drain();\n\t}\n\n\tsetCurrent(index: number, current: TrackEntry, interrupt: boolean) {\n\t\tlet from = this.expandToIndex(index);\n\t\tthis.tracks[index] = current;\n\t\tcurrent.previous = null;\n\n\t\tif (from) {\n\t\t\tif (interrupt) this.queue.interrupt(from);\n\t\t\tcurrent.mixingFrom = from;\n\t\t\tfrom.mixingTo = current;\n\t\t\tcurrent.mixTime = 0;\n\n\t\t\t// Store the interrupted mix percentage.\n\t\t\tif (from.mixingFrom && from.mixDuration > 0)\n\t\t\t\tcurrent.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\n\n\t\t\tfrom.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\n\t\t}\n\n\t\tthis.queue.start(current);\n\t}\n\n\t/** Sets an animation by name.\n\t  *\n\t  * See {@link #setAnimationWith()}. */\n\tsetAnimation(trackIndex: number, animationName: string, loop: boolean = false) {\n\t\tlet animation = this.data.skeletonData.findAnimation(animationName);\n\t\tif (!animation) throw new Error(\"Animation not found: \" + animationName);\n\t\treturn this.setAnimationWith(trackIndex, animation, loop);\n\t}\n\n\t/** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n\t * applied to a skeleton, it is replaced (not mixed from).\n\t * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n\t *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\n\t * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n\t *         after the {@link AnimationStateListener#dispose()} event occurs. */\n\tsetAnimationWith(trackIndex: number, animation: Animation, loop: boolean = false) {\n\t\tif (!animation) throw new Error(\"animation cannot be null.\");\n\t\tlet interrupt = true;\n\t\tlet current = this.expandToIndex(trackIndex);\n\t\tif (current) {\n\t\t\tif (current.nextTrackLast == -1) {\n\t\t\t\t// Don't mix from an entry that was never applied.\n\t\t\t\tthis.tracks[trackIndex] = current.mixingFrom;\n\t\t\t\tthis.queue.interrupt(current);\n\t\t\t\tthis.queue.end(current);\n\t\t\t\tthis.clearNext(current);\n\t\t\t\tcurrent = current.mixingFrom;\n\t\t\t\tinterrupt = false;\n\t\t\t} else\n\t\t\t\tthis.clearNext(current);\n\t\t}\n\t\tlet entry = this.trackEntry(trackIndex, animation, loop, current);\n\t\tthis.setCurrent(trackIndex, entry, interrupt);\n\t\tthis.queue.drain();\n\t\treturn entry;\n\t}\n\n\t/** Queues an animation by name.\n\t *\n\t * See {@link #addAnimationWith()}. */\n\taddAnimation(trackIndex: number, animationName: string, loop: boolean = false, delay: number = 0) {\n\t\tlet animation = this.data.skeletonData.findAnimation(animationName);\n\t\tif (!animation) throw new Error(\"Animation not found: \" + animationName);\n\t\treturn this.addAnimationWith(trackIndex, animation, loop, delay);\n\t}\n\n\t/** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n\t * equivalent to calling {@link #setAnimationWith()}.\n\t * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n\t *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\n\t *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n\t *           previous entry is looping, its next loop completion is used instead of its duration.\n\t * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n\t *         after the {@link AnimationStateListener#dispose()} event occurs. */\n\taddAnimationWith(trackIndex: number, animation: Animation, loop: boolean = false, delay: number = 0) {\n\t\tif (!animation) throw new Error(\"animation cannot be null.\");\n\n\t\tlet last = this.expandToIndex(trackIndex);\n\t\tif (last) {\n\t\t\twhile (last.next)\n\t\t\t\tlast = last.next;\n\t\t}\n\n\t\tlet entry = this.trackEntry(trackIndex, animation, loop, last);\n\n\t\tif (!last) {\n\t\t\tthis.setCurrent(trackIndex, entry, true);\n\t\t\tthis.queue.drain();\n\t\t} else {\n\t\t\tlast.next = entry;\n\t\t\tentry.previous = last;\n\t\t\tif (delay <= 0) delay += last.getTrackComplete() - entry.mixDuration;\n\t\t}\n\n\t\tentry.delay = delay;\n\t\treturn entry;\n\t}\n\n\t/** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n\t * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n\t *\n\t * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n\t * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\n\t * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n\t * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n\t * 0 still mixes out over one frame.\n\t *\n\t * Mixing in is done by first setting an empty animation, then adding an animation using\n\t * {@link #addAnimation()} and on the returned track entry, set the\n\t * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\n\t * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n\t * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\n\tsetEmptyAnimation(trackIndex: number, mixDuration: number = 0) {\n\t\tlet entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);\n\t\tentry.mixDuration = mixDuration;\n\t\tentry.trackEnd = mixDuration;\n\t\treturn entry;\n\t}\n\n\t/** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n\t * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n\t * {@link #setEmptyAnimation()}.\n\t *\n\t * See {@link #setEmptyAnimation()}.\n\t * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n\t *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n\t *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n\t *           loop completion is used instead of its duration.\n\t * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n\t *         after the {@link AnimationStateListener#dispose()} event occurs. */\n\taddEmptyAnimation(trackIndex: number, mixDuration: number = 0, delay: number = 0) {\n\t\tlet entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay);\n\t\tif (delay <= 0) entry.delay += entry.mixDuration - mixDuration;\n\t\tentry.mixDuration = mixDuration;\n\t\tentry.trackEnd = mixDuration;\n\t\treturn entry;\n\t}\n\n\t/** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n\t  * duration. */\n\tsetEmptyAnimations(mixDuration: number = 0) {\n\t\tlet oldDrainDisabled = this.queue.drainDisabled;\n\t\tthis.queue.drainDisabled = true;\n\t\tfor (let i = 0, n = this.tracks.length; i < n; i++) {\n\t\t\tlet current = this.tracks[i];\n\t\t\tif (current) this.setEmptyAnimation(current.trackIndex, mixDuration);\n\t\t}\n\t\tthis.queue.drainDisabled = oldDrainDisabled;\n\t\tthis.queue.drain();\n\t}\n\n\texpandToIndex(index: number) {\n\t\tif (index < this.tracks.length) return this.tracks[index];\n\t\tUtils.ensureArrayCapacity(this.tracks, index + 1, null);\n\t\tthis.tracks.length = index + 1;\n\t\treturn null;\n\t}\n\n\t/** @param last May be null. */\n\ttrackEntry(trackIndex: number, animation: Animation, loop: boolean, last: TrackEntry) {\n\t\tlet entry = this.trackEntryPool.obtain();\n\t\tentry.trackIndex = trackIndex;\n\t\tentry.animation = animation;\n\t\tentry.loop = loop;\n\t\tentry.holdPrevious = false;\n\n\t\tentry.eventThreshold = 0;\n\t\tentry.attachmentThreshold = 0;\n\t\tentry.drawOrderThreshold = 0;\n\n\t\tentry.animationStart = 0;\n\t\tentry.animationEnd = animation.duration;\n\t\tentry.animationLast = -1;\n\t\tentry.nextAnimationLast = -1;\n\n\t\tentry.delay = 0;\n\t\tentry.trackTime = 0;\n\t\tentry.trackLast = -1;\n\t\tentry.nextTrackLast = -1;\n\t\tentry.trackEnd = Number.MAX_VALUE;\n\t\tentry.timeScale = 1;\n\n\t\tentry.alpha = 1;\n\t\tentry.interruptAlpha = 1;\n\t\tentry.mixTime = 0;\n\t\tentry.mixDuration = !last ? 0 : this.data.getMix(last.animation, animation);\n\t\tentry.mixBlend = MixBlend.replace;\n\t\treturn entry;\n\t}\n\n\t/** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */\n\tclearNext(entry: TrackEntry) {\n\t\tlet next = entry.next;\n\t\twhile (next) {\n\t\t\tthis.queue.dispose(next);\n\t\t\tnext = next.next;\n\t\t}\n\t\tentry.next = null;\n\t}\n\n\t_animationsChanged() {\n\t\tthis.animationsChanged = false;\n\n\t\tthis.propertyIDs.clear();\n\t\tlet tracks = this.tracks;\n\t\tfor (let i = 0, n = tracks.length; i < n; i++) {\n\t\t\tlet entry = tracks[i];\n\t\t\tif (!entry) continue;\n\t\t\twhile (entry.mixingFrom)\n\t\t\t\tentry = entry.mixingFrom;\n\t\t\tdo {\n\t\t\t\tif (!entry.mixingTo || entry.mixBlend != MixBlend.add) this.computeHold(entry);\n\t\t\t\tentry = entry.mixingTo;\n\t\t\t} while (entry);\n\t\t}\n\t}\n\n\tcomputeHold(entry: TrackEntry) {\n\t\tlet to = entry.mixingTo;\n\t\tlet timelines = entry.animation.timelines;\n\t\tlet timelinesCount = entry.animation.timelines.length;\n\t\tlet timelineMode = entry.timelineMode;\n\t\ttimelineMode.length = timelinesCount;\n\t\tlet timelineHoldMix = entry.timelineHoldMix;\n\t\ttimelineHoldMix.length = 0;\n\t\tlet propertyIDs = this.propertyIDs;\n\n\t\tif (to && to.holdPrevious) {\n\t\t\tfor (let i = 0; i < timelinesCount; i++)\n\t\t\t\ttimelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;\n\t\t\treturn;\n\t\t}\n\n\t\touter:\n\t\tfor (let i = 0; i < timelinesCount; i++) {\n\t\t\tlet timeline = timelines[i];\n\t\t\tlet ids = timeline.getPropertyIds();\n\t\t\tif (!propertyIDs.addAll(ids))\n\t\t\t\ttimelineMode[i] = SUBSEQUENT;\n\t\t\telse if (!to || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline\n\t\t\t\t|| timeline instanceof EventTimeline || !to.animation.hasTimeline(ids)) {\n\t\t\t\ttimelineMode[i] = FIRST;\n\t\t\t} else {\n\t\t\t\tfor (let next = to.mixingTo; next; next = next.mixingTo) {\n\t\t\t\t\tif (next.animation.hasTimeline(ids)) continue;\n\t\t\t\t\tif (entry.mixDuration > 0) {\n\t\t\t\t\t\ttimelineMode[i] = HOLD_MIX;\n\t\t\t\t\t\ttimelineHoldMix[i] = next;\n\t\t\t\t\t\tcontinue outer;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttimelineMode[i] = HOLD_FIRST;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\n\tgetCurrent(trackIndex: number) {\n\t\tif (trackIndex >= this.tracks.length) return null;\n\t\treturn this.tracks[trackIndex];\n\t}\n\n\t/** Adds a listener to receive events for all track entries. */\n\taddListener(listener: AnimationStateListener) {\n\t\tif (!listener) throw new Error(\"listener cannot be null.\");\n\t\tthis.listeners.push(listener);\n\t}\n\n\t/** Removes the listener added with {@link #addListener()}. */\n\tremoveListener(listener: AnimationStateListener) {\n\t\tlet index = this.listeners.indexOf(listener);\n\t\tif (index >= 0) this.listeners.splice(index, 1);\n\t}\n\n\t/** Removes all listeners added with {@link #addListener()}. */\n\tclearListeners() {\n\t\tthis.listeners.length = 0;\n\t}\n\n\t/** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n\t * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\n\t * are not wanted because new animations are being set. */\n\tclearListenerNotifications() {\n\t\tthis.queue.clear();\n\t}\n}\n\n/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n *\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */\nexport class TrackEntry {\n\t/** The animation to apply for this track entry. */\n\tanimation: Animation;\n\n\tprevious: TrackEntry;\n\n\t/** The animation queued to start after this animation, or null. `next` makes up a linked list. */\n\tnext: TrackEntry;\n\n\t/** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\n\t * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */\n\tmixingFrom: TrackEntry;\n\n\t/** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\n\t * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */\n\tmixingTo: TrackEntry;\n\n\t/** The listener for events generated by this track entry, or null.\n\t *\n\t * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\n\t * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */\n\tlistener: AnimationStateListener;\n\n\t/** The index of the track where this track entry is either current or queued.\n\t *\n\t * See {@link AnimationState#getCurrent()}. */\n\ttrackIndex: number;\n\n\t/** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n\t * duration. */\n\tloop: boolean;\n\n\t/** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\n\t * of being mixed out.\n\t *\n\t * When mixing between animations that key the same property, if a lower track also keys that property then the value will\n\t * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\n\t * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\n\t * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\n\t * keys the property, only when a higher track also keys the property.\n\t *\n\t * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\n\t * previous animation. */\n\tholdPrevious: boolean;\n\n\treverse: boolean;\n\n\t/** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n\t * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\n\t * timelines are not applied while this animation is being mixed out. */\n\teventThreshold: number;\n\n\t/** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\n\t * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\n\t * 0, so attachment timelines are not applied while this animation is being mixed out. */\n\tattachmentThreshold: number;\n\n\t/** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n\t * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\n\t * so draw order timelines are not applied while this animation is being mixed out. */\n\tdrawOrderThreshold: number;\n\n\t/** Seconds when this animation starts, both initially and after looping. Defaults to 0.\n\t *\n\t * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\n\t * value to prevent timeline keys before the start time from triggering. */\n\tanimationStart: number;\n\n\t/** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\n\t * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */\n\tanimationEnd: number;\n\n\n\t/** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\n\t * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\n\t * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\n\t * is applied. */\n\tanimationLast: number;\n\n\tnextAnimationLast: number;\n\n\t/** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\n\t * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\n\t * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\n\t * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\n\t *\n\t * {@link #timeScale} affects the delay. */\n\tdelay: number;\n\n\t/** Current time in seconds this track entry has been the current track entry. The track time determines\n\t * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\n\t * looping. */\n\ttrackTime: number;\n\n\ttrackLast: number; nextTrackLast: number;\n\n\t/** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\n\t * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\n\t * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\n\t * properties keyed by the animation are set to the setup pose and the track is cleared.\n\t *\n\t * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\n\t * abruptly cease being applied. */\n\ttrackEnd: number;\n\n\t/** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\n\t * faster. Defaults to 1.\n\t *\n\t * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\n\t * match the animation speed.\n\t *\n\t * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n\t * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\n\t * the time scale is not 1, the delay may need to be adjusted.\n\t *\n\t * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */\n\ttimeScale: number;\n\n\t/** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\n\t * to 1, which overwrites the skeleton's current pose with this animation.\n\t *\n\t * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\n\t * use alpha on track 0 if the skeleton pose is from the last frame render. */\n\talpha: number;\n\n\t/** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\n\t * slightly more than `mixDuration` when the mix is complete. */\n\tmixTime: number;\n\n\t/** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n\t * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\n\t *\n\t * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\n\t * properties it was animating.\n\t *\n\t * The `mixDuration` can be set manually rather than use the value from\n\t * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\n\t * track entry only before {@link AnimationState#update(float)} is first called.\n\t *\n\t * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n\t * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\n\t * afterward. */\n\tmixDuration: number; interruptAlpha: number; totalAlpha: number;\n\n\t/** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\n\t * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\n\t * the values from the lower tracks.\n\t *\n\t * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\n\t * called. */\n\tmixBlend = MixBlend.replace;\n\ttimelineMode = new Array<number>();\n\ttimelineHoldMix = new Array<TrackEntry>();\n\ttimelinesRotation = new Array<number>();\n\n\treset() {\n\t\tthis.next = null;\n\t\tthis.previous = null;\n\t\tthis.mixingFrom = null;\n\t\tthis.mixingTo = null;\n\t\tthis.animation = null;\n\t\tthis.listener = null;\n\t\tthis.timelineMode.length = 0;\n\t\tthis.timelineHoldMix.length = 0;\n\t\tthis.timelinesRotation.length = 0;\n\t}\n\n\t/** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\n\t * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\n\t * `animationStart` time. */\n\tgetAnimationTime() {\n\t\tif (this.loop) {\n\t\t\tlet duration = this.animationEnd - this.animationStart;\n\t\t\tif (duration == 0) return this.animationStart;\n\t\t\treturn (this.trackTime % duration) + this.animationStart;\n\t\t}\n\t\treturn Math.min(this.trackTime + this.animationStart, this.animationEnd);\n\t}\n\n\tsetAnimationLast(animationLast: number) {\n\t\tthis.animationLast = animationLast;\n\t\tthis.nextAnimationLast = animationLast;\n\t}\n\n\t/** Returns true if at least one loop has been completed.\n\t *\n\t * See {@link AnimationStateListener#complete()}. */\n\tisComplete() {\n\t\treturn this.trackTime >= this.animationEnd - this.animationStart;\n\t}\n\n\t/** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n\t * long way around when using {@link #alpha} and starting animations on other tracks.\n\t *\n\t * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\n\t * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n\t * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n\t * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\n\tresetRotationDirections() {\n\t\tthis.timelinesRotation.length = 0;\n\t}\n\n\tgetTrackComplete() {\n\t\tlet duration = this.animationEnd - this.animationStart;\n\t\tif (duration != 0) {\n\t\t\tif (this.loop) return duration * (1 + ((this.trackTime / duration) | 0)); // Completion of next loop.\n\t\t\tif (this.trackTime < duration) return duration; // Before duration.\n\t\t}\n\t\treturn this.trackTime; // Next update.\n\t}\n}\n\nexport class EventQueue {\n\tobjects: Array<any> = [];\n\tdrainDisabled = false;\n\tanimState: AnimationState;\n\n\tconstructor(animState: AnimationState) {\n\t\tthis.animState = animState;\n\t}\n\n\tstart(entry: TrackEntry) {\n\t\tthis.objects.push(EventType.start);\n\t\tthis.objects.push(entry);\n\t\tthis.animState.animationsChanged = true;\n\t}\n\n\tinterrupt(entry: TrackEntry) {\n\t\tthis.objects.push(EventType.interrupt);\n\t\tthis.objects.push(entry);\n\t}\n\n\tend(entry: TrackEntry) {\n\t\tthis.objects.push(EventType.end);\n\t\tthis.objects.push(entry);\n\t\tthis.animState.animationsChanged = true;\n\t}\n\n\tdispose(entry: TrackEntry) {\n\t\tthis.objects.push(EventType.dispose);\n\t\tthis.objects.push(entry);\n\t}\n\n\tcomplete(entry: TrackEntry) {\n\t\tthis.objects.push(EventType.complete);\n\t\tthis.objects.push(entry);\n\t}\n\n\tevent(entry: TrackEntry, event: Event) {\n\t\tthis.objects.push(EventType.event);\n\t\tthis.objects.push(entry);\n\t\tthis.objects.push(event);\n\t}\n\n\tdrain() {\n\t\tif (this.drainDisabled) return;\n\t\tthis.drainDisabled = true;\n\n\t\tlet objects = this.objects;\n\t\tlet listeners = this.animState.listeners;\n\n\t\tfor (let i = 0; i < objects.length; i += 2) {\n\t\t\tlet type = objects[i] as EventType;\n\t\t\tlet entry = objects[i + 1] as TrackEntry;\n\t\t\tswitch (type) {\n\t\t\t\tcase EventType.start:\n\t\t\t\t\tif (entry.listener && entry.listener.start) entry.listener.start(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].start) listeners[ii].start(entry);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EventType.interrupt:\n\t\t\t\t\tif (entry.listener && entry.listener.interrupt) entry.listener.interrupt(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].interrupt) listeners[ii].interrupt(entry);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EventType.end:\n\t\t\t\t\tif (entry.listener && entry.listener.end) entry.listener.end(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].end) listeners[ii].end(entry);\n\t\t\t\t// Fall through.\n\t\t\t\tcase EventType.dispose:\n\t\t\t\t\tif (entry.listener && entry.listener.dispose) entry.listener.dispose(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].dispose) listeners[ii].dispose(entry);\n\t\t\t\t\tthis.animState.trackEntryPool.free(entry);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EventType.complete:\n\t\t\t\t\tif (entry.listener && entry.listener.complete) entry.listener.complete(entry);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].complete) listeners[ii].complete(entry);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EventType.event:\n\t\t\t\t\tlet event = objects[i++ + 2] as Event;\n\t\t\t\t\tif (entry.listener && entry.listener.event) entry.listener.event(entry, event);\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++)\n\t\t\t\t\t\tif (listeners[ii].event) listeners[ii].event(entry, event);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.clear();\n\n\t\tthis.drainDisabled = false;\n\t}\n\n\tclear() {\n\t\tthis.objects.length = 0;\n\t}\n}\n\nexport enum EventType {\n\tstart, interrupt, end, dispose, complete, event\n}\n\n/** The interface to implement for receiving TrackEntry events. It is always safe to call AnimationState methods when receiving\n * events.\n *\n * See TrackEntry {@link TrackEntry#listener} and AnimationState\n * {@link AnimationState#addListener()}. */\nexport interface AnimationStateListener {\n\t/** Invoked when this entry has been set as the current entry. */\n\tstart(entry: TrackEntry): void;\n\n\t/** Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\n\t * mixing. */\n\tinterrupt(entry: TrackEntry): void;\n\n\t/** Invoked when this entry is no longer the current entry and will never be applied again. */\n\tend(entry: TrackEntry): void;\n\n\t/** Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\n\t * References to the entry should not be kept after dispose is called, as it may be destroyed or reused. */\n\tdispose(entry: TrackEntry): void;\n\n\t/** Invoked every time this entry's animation completes a loop. */\n\tcomplete(entry: TrackEntry): void;\n\n\t/** Invoked when this entry's animation triggers an event. */\n\tevent(entry: TrackEntry, event: Event): void;\n}\n\nexport abstract class AnimationStateAdapter implements AnimationStateListener {\n\tstart(entry: TrackEntry) {\n\t}\n\n\tinterrupt(entry: TrackEntry) {\n\t}\n\n\tend(entry: TrackEntry) {\n\t}\n\n\tdispose(entry: TrackEntry) {\n\t}\n\n\tcomplete(entry: TrackEntry) {\n\t}\n\n\tevent(entry: TrackEntry, event: Event) {\n\t}\n}\n\n/** 1. A previously applied timeline has set this property.\n *\n * Result: Mix from the current pose to the timeline pose. */\nexport const SUBSEQUENT = 0;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry applied after this one does not have a timeline to set this property.\n *\n * Result: Mix from the setup pose to the timeline pose. */\nexport const FIRST = 1;\n/** 1) A previously applied timeline has set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\nexport const HOLD_SUBSEQUENT = 2;\n/** 1) This is the first timeline to set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n * that key the same property. A subsequent timeline will set this property using a mix. */\nexport const HOLD_FIRST = 3;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry to be applied does have a timeline to set this property.\n * 3. The next track entry after that one does have a timeline to set this property.\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\n *\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n * 2 track entries in a row have a timeline that sets the same property.\n *\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n * place. */\nexport const HOLD_MIX = 4;\n\nexport const SETUP = 1;\nexport const CURRENT = 2;\n\nlet _emptyAnimation: Animation = null;\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Animation } from \"./Animation\";\nimport { SkeletonData } from \"./SkeletonData\";\nimport { StringMap } from \"./Utils\";\n\n\n/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed. */\nexport class AnimationStateData {\n\t/** The SkeletonData to look up animations when they are specified by name. */\n\tskeletonData: SkeletonData;\n\n\tanimationToMixTime: StringMap<number> = {};\n\n\t/** The mix duration to use when no mix duration has been defined between two animations. */\n\tdefaultMix = 0;\n\n\tconstructor(skeletonData: SkeletonData) {\n\t\tif (!skeletonData) throw new Error(\"skeletonData cannot be null.\");\n\t\tthis.skeletonData = skeletonData;\n\t}\n\n\t/** Sets a mix duration by animation name.\n\t *\n\t * See {@link #setMixWith()}. */\n\tsetMix(fromName: string, toName: string, duration: number) {\n\t\tlet from = this.skeletonData.findAnimation(fromName);\n\t\tif (!from) throw new Error(\"Animation not found: \" + fromName);\n\t\tlet to = this.skeletonData.findAnimation(toName);\n\t\tif (!to) throw new Error(\"Animation not found: \" + toName);\n\t\tthis.setMixWith(from, to, duration);\n\t}\n\n\t/** Sets the mix duration when changing from the specified animation to the other.\n\t *\n\t * See {@link TrackEntry#mixDuration}. */\n\tsetMixWith(from: Animation, to: Animation, duration: number) {\n\t\tif (!from) throw new Error(\"from cannot be null.\");\n\t\tif (!to) throw new Error(\"to cannot be null.\");\n\t\tlet key = from.name + \".\" + to.name;\n\t\tthis.animationToMixTime[key] = duration;\n\t}\n\n\t/** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\n\t  * no mix duration has been set. */\n\tgetMix(from: Animation, to: Animation) {\n\t\tlet key = from.name + \".\" + to.name;\n\t\tlet value = this.animationToMixTime[key];\n\t\treturn value === undefined ? this.defaultMix : value;\n\t}\n}", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Color } from \"../Utils\";\nimport { VertexAttachment, Attachment } from \"./Attachment\";\n\n/** An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\n * effects, and more.\n *\n * See {@link SkeletonBounds} and [Bounding Boxes](http://esotericsoftware.com/spine-bounding-boxes) in the Spine User\n * Guide. */\nexport class BoundingBoxAttachment extends VertexAttachment {\n\tcolor = new Color(1, 1, 1, 1);\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t}\n\n\tcopy(): Attachment {\n\t\tlet copy = new BoundingBoxAttachment(this.name);\n\t\tthis.copyTo(copy);\n\t\tcopy.color.setFromColor(this.color);\n\t\treturn copy;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { SlotData } from \"../SlotData\";\nimport { Color } from \"../Utils\";\nimport { VertexAttachment, Attachment } from \"./Attachment\";\n\n/** An attachment with vertices that make up a polygon used for clipping the rendering of other attachments. */\nexport class ClippingAttachment extends VertexAttachment {\n\t/** Clipping is performed between the clipping polygon's slot and the end slot. Returns null if clipping is done until the end of\n\t * the skeleton's rendering. */\n\tendSlot: SlotData;\n\n\t// Nonessential.\n\t/** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\n\t * are not usually rendered at runtime. */\n\tcolor = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t}\n\n\tcopy(): Attachment {\n\t\tlet copy = new ClippingAttachment(this.name);\n\t\tthis.copyTo(copy);\n\t\tcopy.endSlot = this.endSlot;\n\t\tcopy.color.setFromColor(this.color);\n\t\treturn copy;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nexport abstract class Texture {\n\tprotected _image: HTMLImageElement | ImageBitmap;\n\n\tconstructor(image: HTMLImageElement | ImageBitmap) {\n\t\tthis._image = image;\n\t}\n\n\tgetImage(): HTMLImageElement | ImageBitmap {\n\t\treturn this._image;\n\t}\n\n\tabstract setFilters(minFilter: TextureFilter, magFilter: TextureFilter): void;\n\tabstract setWraps(uWrap: TextureWrap, vWrap: TextureWrap): void;\n\tabstract dispose(): void;\n}\n\nexport enum TextureFilter {\n\tNearest = 9728, // WebGLRenderingContext.NEAREST\n\tLinear = 9729, // WebGLRenderingContext.LINEAR\n\tMipMap = 9987, // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n\tMipMapNearestNearest = 9984, // WebGLRenderingContext.NEAREST_MIPMAP_NEAREST\n\tMipMapLinearNearest = 9985, // WebGLRenderingContext.LINEAR_MIPMAP_NEAREST\n\tMipMapNearestLinear = 9986, // WebGLRenderingContext.NEAREST_MIPMAP_LINEAR\n\tMipMapLinearLinear = 9987 // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n}\n\nexport enum TextureWrap {\n\tMirroredRepeat = 33648, // WebGLRenderingContext.MIRRORED_REPEAT\n\tClampToEdge = 33071, // WebGLRenderingContext.CLAMP_TO_EDGE\n\tRepeat = 10497 // WebGLRenderingContext.REPEAT\n}\n\nexport class TextureRegion {\n\trenderObject: any;\n\tu = 0; v = 0;\n\tu2 = 0; v2 = 0;\n\twidth = 0; height = 0;\n\tdegrees = 0;\n\toffsetX = 0; offsetY = 0;\n\toriginalWidth = 0; originalHeight = 0;\n}\n\nexport class FakeTexture extends Texture {\n\tsetFilters(minFilter: TextureFilter, magFilter: TextureFilter) { }\n\tsetWraps(uWrap: TextureWrap, vWrap: TextureWrap) { }\n\tdispose() { }\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { AssetManagerBase } from \"./AssetManagerBase\";\nimport { TextureFilter, TextureWrap, Texture, TextureRegion } from \"./Texture\";\nimport { Disposable, Utils, StringMap } from \"./Utils\";\n\nexport class TextureAtlas implements Disposable {\n\tpages = new Array<TextureAtlasPage>();\n\tregions = new Array<TextureAtlasRegion>();\n\n\tconstructor(atlasText: string) {\n\t\tlet reader = new TextureAtlasReader(atlasText);\n\t\tlet entry = new Array<string>(4);\n\t\tlet page: TextureAtlasPage = null;\n\t\tlet region: TextureAtlasRegion = null;\n\n\t\tlet pageFields: StringMap<Function> = {};\n\t\tpageFields[\"size\"] = () => {\n\t\t\tpage.width = parseInt(entry[1]);\n\t\t\tpage.height = parseInt(entry[2]);\n\t\t};\n\t\tpageFields[\"format\"] = () => {\n\t\t\t// page.format = Format[tuple[0]]; we don't need format in WebGL\n\t\t};\n\t\tpageFields[\"filter\"] = () => {\n\t\t\tpage.minFilter = Utils.enumValue(TextureFilter, entry[1]);\n\t\t\tpage.magFilter = Utils.enumValue(TextureFilter, entry[2]);\n\t\t};\n\t\tpageFields[\"repeat\"] = () => {\n\t\t\tif (entry[1].indexOf('x') != -1) page.uWrap = TextureWrap.Repeat;\n\t\t\tif (entry[1].indexOf('y') != -1) page.vWrap = TextureWrap.Repeat;\n\t\t};\n\t\tpageFields[\"pma\"] = () => {\n\t\t\tpage.pma = entry[1] == \"true\";\n\t\t};\n\n\t\tvar regionFields: StringMap<Function> = {};\n\t\tregionFields[\"xy\"] = () => { // Deprecated, use bounds.\n\t\t\tregion.x = parseInt(entry[1]);\n\t\t\tregion.y = parseInt(entry[2]);\n\t\t};\n\t\tregionFields[\"size\"] = () => { // Deprecated, use bounds.\n\t\t\tregion.width = parseInt(entry[1]);\n\t\t\tregion.height = parseInt(entry[2]);\n\t\t};\n\t\tregionFields[\"bounds\"] = () => {\n\t\t\tregion.x = parseInt(entry[1]);\n\t\t\tregion.y = parseInt(entry[2]);\n\t\t\tregion.width = parseInt(entry[3]);\n\t\t\tregion.height = parseInt(entry[4]);\n\t\t};\n\t\tregionFields[\"offset\"] = () => { // Deprecated, use offsets.\n\t\t\tregion.offsetX = parseInt(entry[1]);\n\t\t\tregion.offsetY = parseInt(entry[2]);\n\t\t};\n\t\tregionFields[\"orig\"] = () => { // Deprecated, use offsets.\n\t\t\tregion.originalWidth = parseInt(entry[1]);\n\t\t\tregion.originalHeight = parseInt(entry[2]);\n\t\t};\n\t\tregionFields[\"offsets\"] = () => {\n\t\t\tregion.offsetX = parseInt(entry[1]);\n\t\t\tregion.offsetY = parseInt(entry[2]);\n\t\t\tregion.originalWidth = parseInt(entry[3]);\n\t\t\tregion.originalHeight = parseInt(entry[4]);\n\t\t};\n\t\tregionFields[\"rotate\"] = () => {\n\t\t\tlet value = entry[1];\n\t\t\tif (value == \"true\")\n\t\t\t\tregion.degrees = 90;\n\t\t\telse if (value != \"false\")\n\t\t\t\tregion.degrees = parseInt(value);\n\t\t};\n\t\tregionFields[\"index\"] = () => {\n\t\t\tregion.index = parseInt(entry[1]);\n\t\t};\n\n\t\tlet line = reader.readLine();\n\t\t// Ignore empty lines before first entry.\n\t\twhile (line && line.trim().length == 0)\n\t\t\tline = reader.readLine();\n\t\t// Header entries.\n\t\twhile (true) {\n\t\t\tif (!line || line.trim().length == 0) break;\n\t\t\tif (reader.readEntry(entry, line) == 0) break; // Silently ignore all header fields.\n\t\t\tline = reader.readLine();\n\t\t}\n\n\t\t// Page and region entries.\n\t\tlet names: string[] = null;\n\t\tlet values: number[][] = null;\n\t\twhile (true) {\n\t\t\tif (line === null) break;\n\t\t\tif (line.trim().length == 0) {\n\t\t\t\tpage = null;\n\t\t\t\tline = reader.readLine();\n\t\t\t} else if (!page) {\n\t\t\t\tpage = new TextureAtlasPage();\n\t\t\t\tpage.name = line.trim();\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (reader.readEntry(entry, line = reader.readLine()) == 0) break;\n\t\t\t\t\tlet field: Function = pageFields[entry[0]];\n\t\t\t\t\tif (field) field();\n\t\t\t\t}\n\t\t\t\tthis.pages.push(page);\n\t\t\t} else {\n\t\t\t\tregion = new TextureAtlasRegion();\n\n\t\t\t\tregion.page = page;\n\t\t\t\tregion.name = line;\n\t\t\t\twhile (true) {\n\t\t\t\t\tlet count = reader.readEntry(entry, line = reader.readLine());\n\t\t\t\t\tif (count == 0) break;\n\t\t\t\t\tlet field: Function = regionFields[entry[0]];\n\t\t\t\t\tif (field)\n\t\t\t\t\t\tfield();\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!names) {\n\t\t\t\t\t\t\tnames = [];\n\t\t\t\t\t\t\tvalues = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnames.push(entry[0]);\n\t\t\t\t\t\tlet entryValues: number[] = [];\n\t\t\t\t\t\tfor (let i = 0; i < count; i++)\n\t\t\t\t\t\t\tentryValues.push(parseInt(entry[i + 1]));\n\t\t\t\t\t\tvalues.push(entryValues);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (region.originalWidth == 0 && region.originalHeight == 0) {\n\t\t\t\t\tregion.originalWidth = region.width;\n\t\t\t\t\tregion.originalHeight = region.height;\n\t\t\t\t}\n\t\t\t\tif (names && names.length > 0) {\n\t\t\t\t\tregion.names = names;\n\t\t\t\t\tregion.values = values;\n\t\t\t\t\tnames = null;\n\t\t\t\t\tvalues = null;\n\t\t\t\t}\n\t\t\t\tregion.u = region.x / page.width;\n\t\t\t\tregion.v = region.y / page.height;\n\t\t\t\tif (region.degrees == 90) {\n\t\t\t\t\tregion.u2 = (region.x + region.height) / page.width;\n\t\t\t\t\tregion.v2 = (region.y + region.width) / page.height;\n\t\t\t\t} else {\n\t\t\t\t\tregion.u2 = (region.x + region.width) / page.width;\n\t\t\t\t\tregion.v2 = (region.y + region.height) / page.height;\n\t\t\t\t}\n\t\t\t\tthis.regions.push(region);\n\t\t\t}\n\t\t}\n\t}\n\n\tfindRegion(name: string): TextureAtlasRegion {\n\t\tfor (let i = 0; i < this.regions.length; i++) {\n\t\t\tif (this.regions[i].name == name) {\n\t\t\t\treturn this.regions[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tsetTextures(assetManager: AssetManagerBase, pathPrefix: string = \"\") {\n\t\tfor (let page of this.pages)\n\t\t\tpage.setTexture(assetManager.get(pathPrefix + page.name));\n\t}\n\n\tdispose() {\n\t\tfor (let i = 0; i < this.pages.length; i++) {\n\t\t\tthis.pages[i].texture.dispose();\n\t\t}\n\t}\n}\n\nclass TextureAtlasReader {\n\tlines: Array<string>;\n\tindex: number = 0;\n\n\tconstructor(text: string) {\n\t\tthis.lines = text.split(/\\r\\n|\\r|\\n/);\n\t}\n\n\treadLine(): string {\n\t\tif (this.index >= this.lines.length)\n\t\t\treturn null;\n\t\treturn this.lines[this.index++];\n\t}\n\n\treadEntry(entry: string[], line: string): number {\n\t\tif (!line) return 0;\n\t\tline = line.trim();\n\t\tif (line.length == 0) return 0;\n\n\t\tlet colon = line.indexOf(':');\n\t\tif (colon == -1) return 0;\n\t\tentry[0] = line.substr(0, colon).trim();\n\t\tfor (let i = 1, lastMatch = colon + 1; ; i++) {\n\t\t\tlet comma = line.indexOf(',', lastMatch);\n\t\t\tif (comma == -1) {\n\t\t\t\tentry[i] = line.substr(lastMatch).trim();\n\t\t\t\treturn i;\n\t\t\t}\n\t\t\tentry[i] = line.substr(lastMatch, comma - lastMatch).trim();\n\t\t\tlastMatch = comma + 1;\n\t\t\tif (i == 4) return 4;\n\t\t}\n\t}\n}\n\nexport class TextureAtlasPage {\n\tname: string;\n\tminFilter: TextureFilter = TextureFilter.Nearest;\n\tmagFilter: TextureFilter = TextureFilter.Nearest;\n\tuWrap: TextureWrap = TextureWrap.ClampToEdge;\n\tvWrap: TextureWrap = TextureWrap.ClampToEdge;\n\ttexture: Texture;\n\twidth: number;\n\theight: number;\n\tpma: boolean;\n\n\tsetTexture(texture: Texture) {\n\t\tthis.texture = texture;\n\t\ttexture.setFilters(this.minFilter, this.magFilter);\n\t\ttexture.setWraps(this.uWrap, this.vWrap);\n\t}\n}\n\nexport class TextureAtlasRegion extends TextureRegion {\n\tpage: TextureAtlasPage;\n\tname: string;\n\tx: number;\n\ty: number;\n\toffsetX: number;\n\toffsetY: number;\n\toriginalWidth: number;\n\toriginalHeight: number;\n\tindex: number;\n\tdegrees: number;\n\tnames: string[];\n\tvalues: number[][];\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { TextureRegion } from \"../Texture\";\nimport { TextureAtlasRegion } from \"../TextureAtlas\";\nimport { Color, NumberArrayLike, Utils } from \"../Utils\";\nimport { VertexAttachment, Attachment } from \"./Attachment\";\n\n/** An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\n * supported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.\n *\n * See [Mesh attachments](http://esotericsoftware.com/spine-meshes) in the Spine User Guide. */\nexport class MeshAttachment extends VertexAttachment {\n\tregion: TextureRegion;\n\n\t/** The name of the texture region for this attachment. */\n\tpath: string;\n\n\t/** The UV pair for each vertex, normalized within the texture region. */\n\tregionUVs: NumberArrayLike;\n\n\t/** The UV pair for each vertex, normalized within the entire texture.\n\t *\n\t * See {@link #updateUVs}. */\n\tuvs: NumberArrayLike;\n\n\t/** Triplets of vertex indices which describe the mesh's triangulation. */\n\ttriangles: Array<number>;\n\n\t/** The color to tint the mesh. */\n\tcolor = new Color(1, 1, 1, 1);\n\n\t/** The width of the mesh's image. Available only when nonessential data was exported. */\n\twidth: number;\n\n\t/** The height of the mesh's image. Available only when nonessential data was exported. */\n\theight: number;\n\n\t/** The number of entries at the beginning of {@link #vertices} that make up the mesh hull. */\n\thullLength: number;\n\n\t/** Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if\n\t * nonessential data was exported. Triangulation is not performed at runtime. */\n\tedges: Array<number>;\n\n\tprivate parentMesh: MeshAttachment;\n\ttempColor = new Color(0, 0, 0, 0);\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t}\n\n\t/** Calculates {@link #uvs} using {@link #regionUVs} and the {@link #region}. Must be called after changing the region UVs or\n\t * region. */\n\tupdateUVs() {\n\t\tlet regionUVs = this.regionUVs;\n\t\tif (!this.uvs || this.uvs.length != regionUVs.length) this.uvs = Utils.newFloatArray(regionUVs.length);\n\t\tlet uvs = this.uvs;\n\t\tlet n = this.uvs.length;\n\t\tlet u = this.region.u, v = this.region.v, width = 0, height = 0;\n\t\tif (this.region instanceof TextureAtlasRegion) {\n\t\t\tlet region = this.region, image = region.page.texture.getImage();\n\t\t\tlet textureWidth = image.width, textureHeight = image.height;\n\t\t\tswitch (region.degrees) {\n\t\t\t\tcase 90:\n\t\t\t\t\tu -= (region.originalHeight - region.offsetY - region.height) / textureWidth;\n\t\t\t\t\tv -= (region.originalWidth - region.offsetX - region.width) / textureHeight;\n\t\t\t\t\twidth = region.originalHeight / textureWidth;\n\t\t\t\t\theight = region.originalWidth / textureHeight;\n\t\t\t\t\tfor (let i = 0; i < n; i += 2) {\n\t\t\t\t\t\tuvs[i] = u + regionUVs[i + 1] * width;\n\t\t\t\t\t\tuvs[i + 1] = v + (1 - regionUVs[i]) * height;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\tcase 180:\n\t\t\t\t\tu -= (region.originalWidth - region.offsetX - region.width) / textureWidth;\n\t\t\t\t\tv -= region.offsetY / textureHeight;\n\t\t\t\t\twidth = region.originalWidth / textureWidth;\n\t\t\t\t\theight = region.originalHeight / textureHeight;\n\t\t\t\t\tfor (let i = 0; i < n; i += 2) {\n\t\t\t\t\t\tuvs[i] = u + (1 - regionUVs[i]) * width;\n\t\t\t\t\t\tuvs[i + 1] = v + (1 - regionUVs[i + 1]) * height;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\tcase 270:\n\t\t\t\t\tu -= region.offsetY / textureWidth;\n\t\t\t\t\tv -= region.offsetX / textureHeight;\n\t\t\t\t\twidth = region.originalHeight / textureWidth;\n\t\t\t\t\theight = region.originalWidth / textureHeight;\n\t\t\t\t\tfor (let i = 0; i < n; i += 2) {\n\t\t\t\t\t\tuvs[i] = u + (1 - regionUVs[i + 1]) * width;\n\t\t\t\t\t\tuvs[i + 1] = v + regionUVs[i] * height;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tu -= region.offsetX / textureWidth;\n\t\t\tv -= (region.originalHeight - region.offsetY - region.height) / textureHeight;\n\t\t\twidth = region.originalWidth / textureWidth;\n\t\t\theight = region.originalHeight / textureHeight;\n\t\t} else if (!this.region) {\n\t\t\tu = v = 0;\n\t\t\twidth = height = 1;\n\t\t} else {\n\t\t\twidth = this.region.u2 - u;\n\t\t\theight = this.region.v2 - v;\n\t\t}\n\n\t\tfor (let i = 0; i < n; i += 2) {\n\t\t\tuvs[i] = u + regionUVs[i] * width;\n\t\t\tuvs[i + 1] = v + regionUVs[i + 1] * height;\n\t\t}\n\t}\n\n\t/** The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\n\t * {@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\n\t * parent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture). */\n\tgetParentMesh() {\n\t\treturn this.parentMesh;\n\t}\n\n\t/** @param parentMesh May be null. */\n\tsetParentMesh(parentMesh: MeshAttachment) {\n\t\tthis.parentMesh = parentMesh;\n\t\tif (parentMesh) {\n\t\t\tthis.bones = parentMesh.bones;\n\t\t\tthis.vertices = parentMesh.vertices;\n\t\t\tthis.worldVerticesLength = parentMesh.worldVerticesLength;\n\t\t\tthis.regionUVs = parentMesh.regionUVs;\n\t\t\tthis.triangles = parentMesh.triangles;\n\t\t\tthis.hullLength = parentMesh.hullLength;\n\t\t\tthis.worldVerticesLength = parentMesh.worldVerticesLength\n\t\t}\n\t}\n\n\tcopy(): Attachment {\n\t\tif (this.parentMesh) return this.newLinkedMesh();\n\n\t\tlet copy = new MeshAttachment(this.name);\n\t\tcopy.region = this.region;\n\t\tcopy.path = this.path;\n\t\tcopy.color.setFromColor(this.color);\n\n\t\tthis.copyTo(copy);\n\t\tcopy.regionUVs = new Array<number>(this.regionUVs.length);\n\t\tUtils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\n\t\tcopy.uvs = new Array<number>(this.uvs.length);\n\t\tUtils.arrayCopy(this.uvs, 0, copy.uvs, 0, this.uvs.length);\n\t\tcopy.triangles = new Array<number>(this.triangles.length);\n\t\tUtils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\n\t\tcopy.hullLength = this.hullLength;\n\n\t\t// Nonessential.\n\t\tif (this.edges) {\n\t\t\tcopy.edges = new Array<number>(this.edges.length);\n\t\t\tUtils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\n\t\t}\n\t\tcopy.width = this.width;\n\t\tcopy.height = this.height;\n\n\t\treturn copy;\n\t}\n\n\t/** Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh. **/\n\tnewLinkedMesh(): MeshAttachment {\n\t\tlet copy = new MeshAttachment(this.name);\n\t\tcopy.region = this.region;\n\t\tcopy.path = this.path;\n\t\tcopy.color.setFromColor(this.color);\n\t\tcopy.deformAttachment = this.deformAttachment;\n\t\tcopy.setParentMesh(this.parentMesh ? this.parentMesh : this);\n\t\tcopy.updateUVs();\n\t\treturn copy;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Color, Utils } from \"../Utils\";\nimport { VertexAttachment, Attachment } from \"./Attachment\";\n\n/** An attachment whose vertices make up a composite Bezier curve.\n *\n * See {@link PathConstraint} and [Paths](http://esotericsoftware.com/spine-paths) in the Spine User Guide. */\nexport class PathAttachment extends VertexAttachment {\n\n\t/** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */\n\tlengths: Array<number>;\n\n\t/** If true, the start and end knots are connected. */\n\tclosed = false;\n\n\t/** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\n\t * calculations are performed but calculating positions along the path is less accurate. */\n\tconstantSpeed = false;\n\n\t/** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\n\t * rendered at runtime. */\n\tcolor = new Color(1, 1, 1, 1);\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t}\n\n\tcopy(): Attachment {\n\t\tlet copy = new PathAttachment(this.name);\n\t\tthis.copyTo(copy);\n\t\tcopy.lengths = new Array<number>(this.lengths.length);\n\t\tUtils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\n\t\tcopy.closed = closed;\n\t\tcopy.constantSpeed = this.constantSpeed;\n\t\tcopy.color.setFromColor(this.color);\n\t\treturn copy;\n\t}\n}", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Bone } from \"../Bone\";\nimport { Color, Vector2, MathUtils } from \"../Utils\";\nimport { VertexAttachment, Attachment } from \"./Attachment\";\n\n/** An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\n * used in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\n * skin.\n *\n * See [Point Attachments](http://esotericsoftware.com/spine-point-attachments) in the Spine User Guide. */\nexport class PointAttachment extends VertexAttachment {\n\tx: number; y: number; rotation: number;\n\n\t/** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\n\t * are not usually rendered at runtime. */\n\tcolor = new Color(0.38, 0.94, 0, 1);\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t}\n\n\tcomputeWorldPosition(bone: Bone, point: Vector2) {\n\t\tpoint.x = this.x * bone.a + this.y * bone.b + bone.worldX;\n\t\tpoint.y = this.x * bone.c + this.y * bone.d + bone.worldY;\n\t\treturn point;\n\t}\n\n\tcomputeWorldRotation(bone: Bone) {\n\t\tlet cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);\n\t\tlet x = cos * bone.a + sin * bone.b;\n\t\tlet y = cos * bone.c + sin * bone.d;\n\t\treturn Math.atan2(y, x) * MathUtils.radDeg;\n\t}\n\n\tcopy(): Attachment {\n\t\tlet copy = new PointAttachment(this.name);\n\t\tcopy.x = this.x;\n\t\tcopy.y = this.y;\n\t\tcopy.rotation = this.rotation;\n\t\tcopy.color.setFromColor(this.color);\n\t\treturn copy;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Bone } from \"../Bone\";\nimport { TextureRegion } from \"../Texture\";\nimport { Color, NumberArrayLike, Utils } from \"../Utils\";\nimport { Attachment } from \"./Attachment\";\n\n/** An attachment that displays a textured quadrilateral.\n *\n * See [Region attachments](http://esotericsoftware.com/spine-regions) in the Spine User Guide. */\nexport class RegionAttachment extends Attachment {\n\t/** The local x translation. */\n\tx = 0;\n\n\t/** The local y translation. */\n\ty = 0;\n\n\t/** The local scaleX. */\n\tscaleX = 1;\n\n\t/** The local scaleY. */\n\tscaleY = 1;\n\n\t/** The local rotation. */\n\trotation = 0;\n\n\t/** The width of the region attachment in Spine. */\n\twidth = 0;\n\n\t/** The height of the region attachment in Spine. */\n\theight = 0;\n\n\t/** The color to tint the region attachment. */\n\tcolor = new Color(1, 1, 1, 1);\n\n\t/** The name of the texture region for this attachment. */\n\tpath: string;\n\n\trendererObject: any;\n\tregion: TextureRegion;\n\n\t/** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\n\t *\n\t * See {@link #updateOffset()}. */\n\toffset = Utils.newFloatArray(8);\n\n\tuvs = Utils.newFloatArray(8);\n\n\ttempColor = new Color(1, 1, 1, 1);\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t}\n\n\t/** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\n\tupdateOffset(): void {\n\t\tlet region = this.region;\n\t\tlet regionScaleX = this.width / this.region.originalWidth * this.scaleX;\n\t\tlet regionScaleY = this.height / this.region.originalHeight * this.scaleY;\n\t\tlet localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\n\t\tlet localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\n\t\tlet localX2 = localX + this.region.width * regionScaleX;\n\t\tlet localY2 = localY + this.region.height * regionScaleY;\n\t\tlet radians = this.rotation * Math.PI / 180;\n\t\tlet cos = Math.cos(radians);\n\t\tlet sin = Math.sin(radians);\n\t\tlet x = this.x, y = this.y;\n\t\tlet localXCos = localX * cos + x;\n\t\tlet localXSin = localX * sin;\n\t\tlet localYCos = localY * cos + y;\n\t\tlet localYSin = localY * sin;\n\t\tlet localX2Cos = localX2 * cos + x;\n\t\tlet localX2Sin = localX2 * sin;\n\t\tlet localY2Cos = localY2 * cos + y;\n\t\tlet localY2Sin = localY2 * sin;\n\t\tlet offset = this.offset;\n\t\toffset[0] = localXCos - localYSin;\n\t\toffset[1] = localYCos + localXSin;\n\t\toffset[2] = localXCos - localY2Sin;\n\t\toffset[3] = localY2Cos + localXSin;\n\t\toffset[4] = localX2Cos - localY2Sin;\n\t\toffset[5] = localY2Cos + localX2Sin;\n\t\toffset[6] = localX2Cos - localYSin;\n\t\toffset[7] = localYCos + localX2Sin;\n\t}\n\n\tsetRegion(region: TextureRegion): void {\n\t\tthis.region = region;\n\t\tlet uvs = this.uvs;\n\t\tif (region.degrees == 90) {\n\t\t\tuvs[2] = region.u;\n\t\t\tuvs[3] = region.v2;\n\t\t\tuvs[4] = region.u;\n\t\t\tuvs[5] = region.v;\n\t\t\tuvs[6] = region.u2;\n\t\t\tuvs[7] = region.v;\n\t\t\tuvs[0] = region.u2;\n\t\t\tuvs[1] = region.v2;\n\t\t} else {\n\t\t\tuvs[0] = region.u;\n\t\t\tuvs[1] = region.v2;\n\t\t\tuvs[2] = region.u;\n\t\t\tuvs[3] = region.v;\n\t\t\tuvs[4] = region.u2;\n\t\t\tuvs[5] = region.v;\n\t\t\tuvs[6] = region.u2;\n\t\t\tuvs[7] = region.v2;\n\t\t}\n\t}\n\n\t/** Transforms the attachment's four vertices to world coordinates.\n\t *\n\t * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n\t * Runtimes Guide.\n\t * @param worldVertices The output world vertices. Must have a length >= `offset` + 8.\n\t * @param offset The `worldVertices` index to begin writing values.\n\t * @param stride The number of `worldVertices` entries between the value pairs written. */\n\tcomputeWorldVertices(bone: Bone, worldVertices: NumberArrayLike, offset: number, stride: number) {\n\t\tlet vertexOffset = this.offset;\n\t\tlet x = bone.worldX, y = bone.worldY;\n\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n\t\tlet offsetX = 0, offsetY = 0;\n\n\t\toffsetX = vertexOffset[0];\n\t\toffsetY = vertexOffset[1];\n\t\tworldVertices[offset] = offsetX * a + offsetY * b + x; // br\n\t\tworldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n\t\toffset += stride;\n\n\t\toffsetX = vertexOffset[2];\n\t\toffsetY = vertexOffset[3];\n\t\tworldVertices[offset] = offsetX * a + offsetY * b + x; // bl\n\t\tworldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n\t\toffset += stride;\n\n\t\toffsetX = vertexOffset[4];\n\t\toffsetY = vertexOffset[5];\n\t\tworldVertices[offset] = offsetX * a + offsetY * b + x; // ul\n\t\tworldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n\t\toffset += stride;\n\n\t\toffsetX = vertexOffset[6];\n\t\toffsetY = vertexOffset[7];\n\t\tworldVertices[offset] = offsetX * a + offsetY * b + x; // ur\n\t\tworldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n\t}\n\n\tcopy(): Attachment {\n\t\tlet copy = new RegionAttachment(this.name);\n\t\tcopy.region = this.region;\n\t\tcopy.rendererObject = this.rendererObject;\n\t\tcopy.path = this.path;\n\t\tcopy.x = this.x;\n\t\tcopy.y = this.y;\n\t\tcopy.scaleX = this.scaleX;\n\t\tcopy.scaleY = this.scaleY;\n\t\tcopy.rotation = this.rotation;\n\t\tcopy.width = this.width;\n\t\tcopy.height = this.height;\n\t\tUtils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\n\t\tUtils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\n\t\tcopy.color.setFromColor(this.color);\n\t\treturn copy;\n\t}\n\n\tstatic X1 = 0;\n\tstatic Y1 = 1;\n\tstatic C1R = 2;\n\tstatic C1G = 3;\n\tstatic C1B = 4;\n\tstatic C1A = 5;\n\tstatic U1 = 6;\n\tstatic V1 = 7;\n\n\tstatic X2 = 8;\n\tstatic Y2 = 9;\n\tstatic C2R = 10;\n\tstatic C2G = 11;\n\tstatic C2B = 12;\n\tstatic C2A = 13;\n\tstatic U2 = 14;\n\tstatic V2 = 15;\n\n\tstatic X3 = 16;\n\tstatic Y3 = 17;\n\tstatic C3R = 18;\n\tstatic C3G = 19;\n\tstatic C3B = 20;\n\tstatic C3A = 21;\n\tstatic U3 = 22;\n\tstatic V3 = 23;\n\n\tstatic X4 = 24;\n\tstatic Y4 = 25;\n\tstatic C4R = 26;\n\tstatic C4G = 27;\n\tstatic C4B = 28;\n\tstatic C4A = 29;\n\tstatic U4 = 30;\n\tstatic V4 = 31;\n}", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { AttachmentLoader } from \"./attachments/AttachmentLoader\";\nimport { BoundingBoxAttachment } from \"./attachments/BoundingBoxAttachment\";\nimport { ClippingAttachment } from \"./attachments/ClippingAttachment\";\nimport { MeshAttachment } from \"./attachments/MeshAttachment\";\nimport { PathAttachment } from \"./attachments/PathAttachment\";\nimport { PointAttachment } from \"./attachments/PointAttachment\";\nimport { RegionAttachment } from \"./attachments/RegionAttachment\";\nimport { Skin } from \"./Skin\";\nimport { TextureAtlas } from \"./TextureAtlas\";\n\n/** An {@link AttachmentLoader} that configures attachments using texture regions from an {@link TextureAtlas}.\n *\n * See [Loading skeleton data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the\n * Spine Runtimes Guide. */\nexport class AtlasAttachmentLoader implements AttachmentLoader {\n\tatlas: TextureAtlas;\n\n\tconstructor(atlas: TextureAtlas) {\n\t\tthis.atlas = atlas;\n\t}\n\n\tnewRegionAttachment(skin: Skin, name: string, path: string): RegionAttachment {\n\t\tlet region = this.atlas.findRegion(path);\n\t\tif (!region) throw new Error(\"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\");\n\t\tregion.renderObject = region;\n\t\tlet attachment = new RegionAttachment(name);\n\t\tattachment.setRegion(region);\n\t\treturn attachment;\n\t}\n\n\tnewMeshAttachment(skin: Skin, name: string, path: string): MeshAttachment {\n\t\tlet region = this.atlas.findRegion(path);\n\t\tif (!region) throw new Error(\"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\");\n\t\tregion.renderObject = region;\n\t\tlet attachment = new MeshAttachment(name);\n\t\tattachment.region = region;\n\t\treturn attachment;\n\t}\n\n\tnewBoundingBoxAttachment(skin: Skin, name: string): BoundingBoxAttachment {\n\t\treturn new BoundingBoxAttachment(name);\n\t}\n\n\tnewPathAttachment(skin: Skin, name: string): PathAttachment {\n\t\treturn new PathAttachment(name);\n\t}\n\n\tnewPointAttachment(skin: Skin, name: string): PointAttachment {\n\t\treturn new PointAttachment(name);\n\t}\n\n\tnewClippingAttachment(skin: Skin, name: string): ClippingAttachment {\n\t\treturn new ClippingAttachment(name);\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Color } from \"./Utils\";\n\n/** Stores the setup pose for a {@link Bone}. */\nexport class BoneData {\n\t/** The index of the bone in {@link Skeleton#getBones()}. */\n\tindex: number;\n\n\t/** The name of the bone, which is unique across all bones in the skeleton. */\n\tname: string;\n\n\t/** @returns May be null. */\n\tparent: BoneData;\n\n\t/** The bone's length. */\n\tlength: number;\n\n\t/** The local x translation. */\n\tx = 0;\n\n\t/** The local y translation. */\n\ty = 0;\n\n\t/** The local rotation. */\n\trotation = 0;\n\n\t/** The local scaleX. */\n\tscaleX = 1;\n\n\t/** The local scaleY. */\n\tscaleY = 1;\n\n\t/** The local shearX. */\n\tshearX = 0;\n\n\t/** The local shearX. */\n\tshearY = 0;\n\n\t/** The transform mode for how parent world transforms affect this bone. */\n\ttransformMode = TransformMode.Normal;\n\n\t/** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\n\t  * bone.\n\t  * @see Skin#bones */\n\tskinRequired = false;\n\n\t/** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\n\t * rendered at runtime. */\n\tcolor = new Color();\n\n\tconstructor(index: number, name: string, parent: BoneData) {\n\t\tif (index < 0) throw new Error(\"index must be >= 0.\");\n\t\tif (!name) throw new Error(\"name cannot be null.\");\n\t\tthis.index = index;\n\t\tthis.name = name;\n\t\tthis.parent = parent;\n\t}\n}\n\n/** Determines how a bone inherits world transforms from parent bones. */\nexport enum TransformMode { Normal, OnlyTranslation, NoRotationOrReflection, NoScale, NoScaleOrReflection }\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { BoneData, TransformMode } from \"./BoneData\";\nimport { Skeleton } from \"./Skeleton\";\nimport { Updatable } from \"./Updatable\";\nimport { MathUtils, Vector2 } from \"./Utils\";\n\n/** Stores a bone's current pose.\n *\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\n * constraint or application code modifies the world transform after it was computed from the local transform. */\nexport class Bone implements Updatable {\n\t/** The bone's setup pose data. */\n\tdata: BoneData;\n\n\t/** The skeleton this bone belongs to. */\n\tskeleton: Skeleton;\n\n\t/** The parent bone, or null if this is the root bone. */\n\tparent: Bone;\n\n\t/** The immediate children of this bone. */\n\tchildren = new Array<Bone>();\n\n\t/** The local x translation. */\n\tx = 0;\n\n\t/** The local y translation. */\n\ty = 0;\n\n\t/** The local rotation in degrees, counter clockwise. */\n\trotation = 0;\n\n\t/** The local scaleX. */\n\tscaleX = 0;\n\n\t/** The local scaleY. */\n\tscaleY = 0;\n\n\t/** The local shearX. */\n\tshearX = 0;\n\n\t/** The local shearY. */\n\tshearY = 0;\n\n\t/** The applied local x translation. */\n\tax = 0;\n\n\t/** The applied local y translation. */\n\tay = 0;\n\n\t/** The applied local rotation in degrees, counter clockwise. */\n\tarotation = 0;\n\n\t/** The applied local scaleX. */\n\tascaleX = 0;\n\n\t/** The applied local scaleY. */\n\tascaleY = 0;\n\n\t/** The applied local shearX. */\n\tashearX = 0;\n\n\t/** The applied local shearY. */\n\tashearY = 0;\n\n\t/** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\n\ta = 0;\n\n\t/** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\n\tb = 0;\n\n\t/** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\n\tc = 0;\n\n\t/** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\n\td = 0;\n\n\t/** The world X position. If changed, {@link #updateAppliedTransform()} should be called. */\n\tworldY = 0;\n\n\t/** The world Y position. If changed, {@link #updateAppliedTransform()} should be called. */\n\tworldX = 0;\n\n\tsorted = false;\n\tactive = false;\n\n\t/** @param parent May be null. */\n\tconstructor(data: BoneData, skeleton: Skeleton, parent: Bone) {\n\t\tif (!data) throw new Error(\"data cannot be null.\");\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\n\t\tthis.data = data;\n\t\tthis.skeleton = skeleton;\n\t\tthis.parent = parent;\n\t\tthis.setToSetupPose();\n\t}\n\n\t/** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\n\t  * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */\n\tisActive() {\n\t\treturn this.active;\n\t}\n\n\t/** Computes the world transform using the parent bone and this bone's local applied transform. */\n\tupdate() {\n\t\tthis.updateWorldTransformWith(this.ax, this.ay, this.arotation, this.ascaleX, this.ascaleY, this.ashearX, this.ashearY);\n\t}\n\n\t/** Computes the world transform using the parent bone and this bone's local transform.\n\t *\n\t * See {@link #updateWorldTransformWith()}. */\n\tupdateWorldTransform() {\n\t\tthis.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n\t}\n\n\t/** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\n\t * specified local transform. Child bones are not updated.\n\t *\n\t * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n\t * Runtimes Guide. */\n\tupdateWorldTransformWith(x: number, y: number, rotation: number, scaleX: number, scaleY: number, shearX: number, shearY: number) {\n\t\tthis.ax = x;\n\t\tthis.ay = y;\n\t\tthis.arotation = rotation;\n\t\tthis.ascaleX = scaleX;\n\t\tthis.ascaleY = scaleY;\n\t\tthis.ashearX = shearX;\n\t\tthis.ashearY = shearY;\n\n\t\tlet parent = this.parent;\n\t\tif (!parent) { // Root bone.\n\t\t\tlet skeleton = this.skeleton;\n\t\t\tlet rotationY = rotation + 90 + shearY;\n\t\t\tlet sx = skeleton.scaleX;\n\t\t\tlet sy = skeleton.scaleY;\n\t\t\tthis.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\n\t\t\tthis.b = MathUtils.cosDeg(rotationY) * scaleY * sx;\n\t\t\tthis.c = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\n\t\t\tthis.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\n\t\t\tthis.worldX = x * sx + skeleton.x;\n\t\t\tthis.worldY = y * sy + skeleton.y;\n\t\t\treturn;\n\t\t}\n\n\t\tlet pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n\t\tthis.worldX = pa * x + pb * y + parent.worldX;\n\t\tthis.worldY = pc * x + pd * y + parent.worldY;\n\n\t\tswitch (this.data.transformMode) {\n\t\t\tcase TransformMode.Normal: {\n\t\t\t\tlet rotationY = rotation + 90 + shearY;\n\t\t\t\tlet la = MathUtils.cosDeg(rotation + shearX) * scaleX;\n\t\t\t\tlet lb = MathUtils.cosDeg(rotationY) * scaleY;\n\t\t\t\tlet lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\n\t\t\t\tlet ld = MathUtils.sinDeg(rotationY) * scaleY;\n\t\t\t\tthis.a = pa * la + pb * lc;\n\t\t\t\tthis.b = pa * lb + pb * ld;\n\t\t\t\tthis.c = pc * la + pd * lc;\n\t\t\t\tthis.d = pc * lb + pd * ld;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase TransformMode.OnlyTranslation: {\n\t\t\t\tlet rotationY = rotation + 90 + shearY;\n\t\t\t\tthis.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\n\t\t\t\tthis.b = MathUtils.cosDeg(rotationY) * scaleY;\n\t\t\t\tthis.c = MathUtils.sinDeg(rotation + shearX) * scaleX;\n\t\t\t\tthis.d = MathUtils.sinDeg(rotationY) * scaleY;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TransformMode.NoRotationOrReflection: {\n\t\t\t\tlet s = pa * pa + pc * pc;\n\t\t\t\tlet prx = 0;\n\t\t\t\tif (s > 0.0001) {\n\t\t\t\t\ts = Math.abs(pa * pd - pb * pc) / s;\n\t\t\t\t\tpa /= this.skeleton.scaleX;\n\t\t\t\t\tpc /= this.skeleton.scaleY;\n\t\t\t\t\tpb = pc * s;\n\t\t\t\t\tpd = pa * s;\n\t\t\t\t\tprx = Math.atan2(pc, pa) * MathUtils.radDeg;\n\t\t\t\t} else {\n\t\t\t\t\tpa = 0;\n\t\t\t\t\tpc = 0;\n\t\t\t\t\tprx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\n\t\t\t\t}\n\t\t\t\tlet rx = rotation + shearX - prx;\n\t\t\t\tlet ry = rotation + shearY - prx + 90;\n\t\t\t\tlet la = MathUtils.cosDeg(rx) * scaleX;\n\t\t\t\tlet lb = MathUtils.cosDeg(ry) * scaleY;\n\t\t\t\tlet lc = MathUtils.sinDeg(rx) * scaleX;\n\t\t\t\tlet ld = MathUtils.sinDeg(ry) * scaleY;\n\t\t\t\tthis.a = pa * la - pb * lc;\n\t\t\t\tthis.b = pa * lb - pb * ld;\n\t\t\t\tthis.c = pc * la + pd * lc;\n\t\t\t\tthis.d = pc * lb + pd * ld;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TransformMode.NoScale:\n\t\t\tcase TransformMode.NoScaleOrReflection: {\n\t\t\t\tlet cos = MathUtils.cosDeg(rotation);\n\t\t\t\tlet sin = MathUtils.sinDeg(rotation);\n\t\t\t\tlet za = (pa * cos + pb * sin) / this.skeleton.scaleX;\n\t\t\t\tlet zc = (pc * cos + pd * sin) / this.skeleton.scaleY;\n\t\t\t\tlet s = Math.sqrt(za * za + zc * zc);\n\t\t\t\tif (s > 0.00001) s = 1 / s;\n\t\t\t\tza *= s;\n\t\t\t\tzc *= s;\n\t\t\t\ts = Math.sqrt(za * za + zc * zc);\n\t\t\t\tif (this.data.transformMode == TransformMode.NoScale\n\t\t\t\t\t&& (pa * pd - pb * pc < 0) != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)) s = -s;\n\t\t\t\tlet r = Math.PI / 2 + Math.atan2(zc, za);\n\t\t\t\tlet zb = Math.cos(r) * s;\n\t\t\t\tlet zd = Math.sin(r) * s;\n\t\t\t\tlet la = MathUtils.cosDeg(shearX) * scaleX;\n\t\t\t\tlet lb = MathUtils.cosDeg(90 + shearY) * scaleY;\n\t\t\t\tlet lc = MathUtils.sinDeg(shearX) * scaleX;\n\t\t\t\tlet ld = MathUtils.sinDeg(90 + shearY) * scaleY;\n\t\t\t\tthis.a = za * la + zb * lc;\n\t\t\t\tthis.b = za * lb + zb * ld;\n\t\t\t\tthis.c = zc * la + zd * lc;\n\t\t\t\tthis.d = zc * lb + zd * ld;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.a *= this.skeleton.scaleX;\n\t\tthis.b *= this.skeleton.scaleX;\n\t\tthis.c *= this.skeleton.scaleY;\n\t\tthis.d *= this.skeleton.scaleY;\n\t}\n\n\t/** Sets this bone's local transform to the setup pose. */\n\tsetToSetupPose() {\n\t\tlet data = this.data;\n\t\tthis.x = data.x;\n\t\tthis.y = data.y;\n\t\tthis.rotation = data.rotation;\n\t\tthis.scaleX = data.scaleX;\n\t\tthis.scaleY = data.scaleY;\n\t\tthis.shearX = data.shearX;\n\t\tthis.shearY = data.shearY;\n\t}\n\n\t/** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */\n\tgetWorldRotationX() {\n\t\treturn Math.atan2(this.c, this.a) * MathUtils.radDeg;\n\t}\n\n\t/** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */\n\tgetWorldRotationY() {\n\t\treturn Math.atan2(this.d, this.b) * MathUtils.radDeg;\n\t}\n\n\t/** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */\n\tgetWorldScaleX() {\n\t\treturn Math.sqrt(this.a * this.a + this.c * this.c);\n\t}\n\n\t/** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */\n\tgetWorldScaleY() {\n\t\treturn Math.sqrt(this.b * this.b + this.d * this.d);\n\t}\n\n\t/** Computes the applied transform values from the world transform.\n\t *\n\t * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\n\t * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\n\t * constraints).\n\t *\n\t * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\n\t * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */\n\tupdateAppliedTransform() {\n\t\tlet parent = this.parent;\n\t\tif (!parent) {\n\t\t\tthis.ax = this.worldX;\n\t\t\tthis.ay = this.worldY;\n\t\t\tthis.arotation = Math.atan2(this.c, this.a) * MathUtils.radDeg;\n\t\t\tthis.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);\n\t\t\tthis.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);\n\t\t\tthis.ashearX = 0;\n\t\t\tthis.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * MathUtils.radDeg;\n\t\t\treturn;\n\t\t}\n\t\tlet pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n\t\tlet pid = 1 / (pa * pd - pb * pc);\n\t\tlet dx = this.worldX - parent.worldX, dy = this.worldY - parent.worldY;\n\t\tthis.ax = (dx * pd * pid - dy * pb * pid);\n\t\tthis.ay = (dy * pa * pid - dx * pc * pid);\n\t\tlet ia = pid * pd;\n\t\tlet id = pid * pa;\n\t\tlet ib = pid * pb;\n\t\tlet ic = pid * pc;\n\t\tlet ra = ia * this.a - ib * this.c;\n\t\tlet rb = ia * this.b - ib * this.d;\n\t\tlet rc = id * this.c - ic * this.a;\n\t\tlet rd = id * this.d - ic * this.b;\n\t\tthis.ashearX = 0;\n\t\tthis.ascaleX = Math.sqrt(ra * ra + rc * rc);\n\t\tif (this.ascaleX > 0.0001) {\n\t\t\tlet det = ra * rd - rb * rc;\n\t\t\tthis.ascaleY = det / this.ascaleX;\n\t\t\tthis.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\n\t\t\tthis.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\n\t\t} else {\n\t\t\tthis.ascaleX = 0;\n\t\t\tthis.ascaleY = Math.sqrt(rb * rb + rd * rd);\n\t\t\tthis.ashearY = 0;\n\t\t\tthis.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\n\t\t}\n\t}\n\n\t/** Transforms a point from world coordinates to the bone's local coordinates. */\n\tworldToLocal(world: Vector2) {\n\t\tlet invDet = 1 / (this.a * this.d - this.b * this.c);\n\t\tlet x = world.x - this.worldX, y = world.y - this.worldY;\n\t\tworld.x = x * this.d * invDet - y * this.b * invDet;\n\t\tworld.y = y * this.a * invDet - x * this.c * invDet;\n\t\treturn world;\n\t}\n\n\t/** Transforms a point from the bone's local coordinates to world coordinates. */\n\tlocalToWorld(local: Vector2) {\n\t\tlet x = local.x, y = local.y;\n\t\tlocal.x = x * this.a + y * this.b + this.worldX;\n\t\tlocal.y = x * this.c + y * this.d + this.worldY;\n\t\treturn local;\n\t}\n\n\t/** Transforms a world rotation to a local rotation. */\n\tworldToLocalRotation(worldRotation: number) {\n\t\tlet sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);\n\t\treturn Math.atan2(this.a * sin - this.c * cos, this.d * cos - this.b * sin) * MathUtils.radDeg + this.rotation - this.shearX;\n\t}\n\n\t/** Transforms a local rotation to a world rotation. */\n\tlocalToWorldRotation(localRotation: number) {\n\t\tlocalRotation -= this.rotation - this.shearX;\n\t\tlet sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);\n\t\treturn Math.atan2(cos * this.c + sin * this.d, cos * this.a + sin * this.b) * MathUtils.radDeg;\n\t}\n\n\t/** Rotates the world transform the specified amount.\n\t * <p>\n\t * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and {@link #update()} will\n\t * need to be called on any child bones, recursively. */\n\trotateWorld(degrees: number) {\n\t\tlet a = this.a, b = this.b, c = this.c, d = this.d;\n\t\tlet cos = MathUtils.cosDeg(degrees), sin = MathUtils.sinDeg(degrees);\n\t\tthis.a = cos * a - sin * c;\n\t\tthis.b = cos * b - sin * d;\n\t\tthis.c = sin * a + cos * c;\n\t\tthis.d = sin * b + cos * d;\n\t}\n}", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\n/** The base class for all constraint datas. */\nexport abstract class ConstraintData {\n\tconstructor(public name: string, public order: number, public skinRequired: boolean) { }\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Texture } from \"./Texture\";\nimport { TextureAtlas } from \"./TextureAtlas\";\nimport { Disposable, StringMap } from \"./Utils\";\n\nexport class AssetManagerBase implements Disposable {\n\tprivate pathPrefix: string;\n\tprivate textureLoader: (image: HTMLImageElement | ImageBitmap) => Texture;\n\tprivate downloader: Downloader;\n\tprivate assets: StringMap<any> = {};\n\tprivate errors: StringMap<string> = {};\n\tprivate toLoad = 0;\n\tprivate loaded = 0;\n\n\tconstructor(textureLoader: (image: HTMLImageElement | ImageBitmap) => Texture, pathPrefix: string = \"\", downloader: Downloader = null) {\n\t\tthis.textureLoader = textureLoader;\n\t\tthis.pathPrefix = pathPrefix;\n\t\tthis.downloader = downloader || new Downloader();\n\t}\n\n\tprivate start(path: string): string {\n\t\tthis.toLoad++;\n\t\treturn this.pathPrefix + path;\n\t}\n\n\tprivate success(callback: (path: string, data: any) => void, path: string, asset: any) {\n\t\tthis.toLoad--;\n\t\tthis.loaded++;\n\t\tthis.assets[path] = asset;\n\t\tif (callback) callback(path, asset);\n\t}\n\n\tprivate error(callback: (path: string, message: string) => void, path: string, message: string) {\n\t\tthis.toLoad--;\n\t\tthis.loaded++;\n\t\tthis.errors[path] = message;\n\t\tif (callback) callback(path, message);\n\t}\n\n\tsetRawDataURI(path: string, data: string) {\n\t\tthis.downloader.rawDataUris[this.pathPrefix + path] = data;\n\t}\n\n\tloadBinary(path: string,\n\t\tsuccess: (path: string, binary: Uint8Array) => void = null,\n\t\terror: (path: string, message: string) => void = null) {\n\t\tpath = this.start(path);\n\n\t\tthis.downloader.downloadBinary(path, (data: Uint8Array): void => {\n\t\t\tthis.success(success, path, data);\n\t\t}, (status: number, responseText: string): void => {\n\t\t\tthis.error(error, path, `Couldn't load binary ${path}: status ${status}, ${responseText}`);\n\t\t});\n\t}\n\n\tloadText(path: string,\n\t\tsuccess: (path: string, text: string) => void = null,\n\t\terror: (path: string, message: string) => void = null) {\n\t\tpath = this.start(path);\n\n\t\tthis.downloader.downloadText(path, (data: string): void => {\n\t\t\tthis.success(success, path, data);\n\t\t}, (status: number, responseText: string): void => {\n\t\t\tthis.error(error, path, `Couldn't load text ${path}: status ${status}, ${responseText}`);\n\t\t});\n\t}\n\n\tloadJson(path: string,\n\t\tsuccess: (path: string, object: object) => void = null,\n\t\terror: (path: string, message: string) => void = null) {\n\t\tpath = this.start(path);\n\n\t\tthis.downloader.downloadJson(path, (data: object): void => {\n\t\t\tthis.success(success, path, data);\n\t\t}, (status: number, responseText: string): void => {\n\t\t\tthis.error(error, path, `Couldn't load JSON ${path}: status ${status}, ${responseText}`);\n\t\t});\n\t}\n\n\tloadTexture(path: string,\n\t\tsuccess: (path: string, texture: Texture) => void = null,\n\t\terror: (path: string, message: string) => void = null) {\n\t\tpath = this.start(path);\n\n\t\tlet isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document);\n\t\tlet isWebWorker = !isBrowser; // && typeof importScripts !== 'undefined';\n\t\tif (isWebWorker) {\n\t\t\tfetch(path, { mode: <RequestMode>\"cors\" }).then((response) => {\n\t\t\t\tif (response.ok) return response.blob();\n\t\t\t\tthis.error(error, path, `Couldn't load image: ${path}`);\n\t\t\t\treturn null;\n\t\t\t}).then((blob) => {\n\t\t\t\treturn blob ? createImageBitmap(blob, { premultiplyAlpha: \"none\", colorSpaceConversion: \"none\" }) : null;\n\t\t\t}).then((bitmap) => {\n\t\t\t\tif (bitmap) this.success(success, path, this.textureLoader(bitmap));\n\t\t\t});\n\t\t} else {\n\t\t\tlet image = new Image();\n\t\t\timage.crossOrigin = \"anonymous\";\n\t\t\timage.onload = () => {\n\t\t\t\tthis.success(success, path, this.textureLoader(image));\n\t\t\t};\n\t\t\timage.onerror = () => {\n\t\t\t\tthis.error(error, path, `Couldn't load image: ${path}`);\n\t\t\t};\n\t\t\tif (this.downloader.rawDataUris[path]) path = this.downloader.rawDataUris[path];\n\t\t\timage.src = path;\n\t\t}\n\t}\n\n\tloadTextureAtlas(path: string,\n\t\tsuccess: (path: string, atlas: TextureAtlas) => void = null,\n\t\terror: (path: string, message: string) => void = null\n\t) {\n\t\tlet index = path.lastIndexOf(\"/\");\n\t\tlet parent = index >= 0 ? path.substring(0, index + 1) : \"\";\n\t\tpath = this.start(path);\n\n\t\tthis.downloader.downloadText(path, (atlasText: string): void => {\n\t\t\ttry {\n\t\t\t\tlet atlas = new TextureAtlas(atlasText);\n\t\t\t\tlet toLoad = atlas.pages.length, abort = false;\n\t\t\t\tfor (let page of atlas.pages) {\n\t\t\t\t\tthis.loadTexture(parent + page.name,\n\t\t\t\t\t\t(imagePath: string, texture: Texture) => {\n\t\t\t\t\t\t\tif (!abort) {\n\t\t\t\t\t\t\t\tpage.setTexture(texture);\n\t\t\t\t\t\t\t\tif (--toLoad == 0) this.success(success, path, atlas);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(imagePath: string, message: string) => {\n\t\t\t\t\t\t\tif (!abort) this.error(error, path, `Couldn't load texture atlas ${path} page image: ${imagePath}`);\n\t\t\t\t\t\t\tabort = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(error, path, `Couldn't parse texture atlas ${path}: ${e.message}`);\n\t\t\t}\n\t\t}, (status: number, responseText: string): void => {\n\t\t\tthis.error(error, path, `Couldn't load texture atlas ${path}: status ${status}, ${responseText}`);\n\t\t});\n\t}\n\n\tget(path: string) {\n\t\treturn this.assets[this.pathPrefix + path];\n\t}\n\n\trequire(path: string) {\n\t\tpath = this.pathPrefix + path;\n\t\tlet asset = this.assets[path];\n\t\tif (asset) return asset;\n\t\tlet error = this.errors[path];\n\t\tthrow Error(\"Asset not found: \" + path + (error ? \"\\n\" + error : \"\"));\n\t}\n\n\tremove(path: string) {\n\t\tpath = this.pathPrefix + path;\n\t\tlet asset = this.assets[path];\n\t\tif ((<any>asset).dispose) (<any>asset).dispose();\n\t\tdelete this.assets[path];\n\t\treturn asset;\n\t}\n\n\tremoveAll() {\n\t\tfor (let key in this.assets) {\n\t\t\tlet asset = this.assets[key];\n\t\t\tif ((<any>asset).dispose) (<any>asset).dispose();\n\t\t}\n\t\tthis.assets = {};\n\t}\n\n\tisLoadingComplete(): boolean {\n\t\treturn this.toLoad == 0;\n\t}\n\n\tgetToLoad(): number {\n\t\treturn this.toLoad;\n\t}\n\n\tgetLoaded(): number {\n\t\treturn this.loaded;\n\t}\n\n\tdispose() {\n\t\tthis.removeAll();\n\t}\n\n\thasErrors() {\n\t\treturn Object.keys(this.errors).length > 0;\n\t}\n\n\tgetErrors() {\n\t\treturn this.errors;\n\t}\n}\n\nexport class Downloader {\n\tprivate callbacks: StringMap<Array<Function>> = {};\n\trawDataUris: StringMap<string> = {};\n\n\tdownloadText(url: string, success: (data: string) => void, error: (status: number, responseText: string) => void) {\n\t\tif (this.rawDataUris[url]) url = this.rawDataUris[url];\n\t\tif (this.start(url, success, error)) return;\n\t\tlet request = new XMLHttpRequest();\n\t\trequest.overrideMimeType(\"text/html\");\n\t\trequest.open(\"GET\", url, true);\n\t\tlet done = () => {\n\t\t\tthis.finish(url, request.status, request.responseText);\n\t\t};\n\t\trequest.onload = done;\n\t\trequest.onerror = done;\n\t\trequest.send();\n\t}\n\n\tdownloadJson(url: string, success: (data: object) => void, error: (status: number, responseText: string) => void) {\n\t\tthis.downloadText(url, (data: string): void => {\n\t\t\tsuccess(JSON.parse(data));\n\t\t}, error);\n\t}\n\n\tdownloadBinary(url: string, success: (data: Uint8Array) => void, error: (status: number, responseText: string) => void) {\n\t\tif (this.rawDataUris[url]) url = this.rawDataUris[url];\n\t\tif (this.start(url, success, error)) return;\n\t\tlet request = new XMLHttpRequest();\n\t\trequest.open(\"GET\", url, true);\n\t\trequest.responseType = \"arraybuffer\";\n\t\tlet onerror = () => {\n\t\t\tthis.finish(url, request.status, request.responseText);\n\t\t};\n\t\trequest.onload = () => {\n\t\t\tif (request.status == 200)\n\t\t\t\tthis.finish(url, 200, new Uint8Array(request.response as ArrayBuffer));\n\t\t\telse\n\t\t\t\tonerror();\n\t\t};\n\t\trequest.onerror = onerror;\n\t\trequest.send();\n\t}\n\n\tprivate start(url: string, success: any, error: any) {\n\t\tlet callbacks = this.callbacks[url];\n\t\ttry {\n\t\t\tif (callbacks) return true;\n\t\t\tthis.callbacks[url] = callbacks = [];\n\t\t} finally {\n\t\t\tcallbacks.push(success, error);\n\t\t}\n\t}\n\n\tprivate finish(url: string, status: number, data: any) {\n\t\tlet callbacks = this.callbacks[url];\n\t\tdelete this.callbacks[url];\n\t\tlet args = status == 200 ? [data] : [status, data];\n\t\tfor (let i = args.length - 1, n = callbacks.length; i < n; i += 2)\n\t\t\tcallbacks[i].apply(null, args);\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { EventData } from \"./EventData\";\n\n/** Stores the current pose values for an {@link Event}.\n *\n * See Timeline {@link Timeline#apply()},\n * AnimationStateListener {@link AnimationStateListener#event()}, and\n * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */\nexport class Event {\n\tdata: EventData;\n\tintValue: number;\n\tfloatValue: number;\n\tstringValue: string;\n\ttime: number;\n\tvolume: number;\n\tbalance: number;\n\n\tconstructor(time: number, data: EventData) {\n\t\tif (!data) throw new Error(\"data cannot be null.\");\n\t\tthis.time = time;\n\t\tthis.data = data;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\n/** Stores the setup pose values for an {@link Event}.\n *\n * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */\nexport class EventData {\n\tname: string;\n\tintValue: number;\n\tfloatValue: number;\n\tstringValue: string;\n\taudioPath: string;\n\tvolume: number;\n\tbalance: number;\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Bone } from \"./Bone\";\nimport { TransformMode } from \"./BoneData\";\nimport { IkConstraintData } from \"./IkConstraintData\";\nimport { Skeleton } from \"./Skeleton\";\nimport { Updatable } from \"./Updatable\";\nimport { MathUtils } from \"./Utils\";\n\n/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\n * the last bone is as close to the target bone as possible.\n *\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */\nexport class IkConstraint implements Updatable {\n\t/** The IK constraint's setup pose data. */\n\tdata: IkConstraintData;\n\n\t/** The bones that will be modified by this IK constraint. */\n\tbones: Array<Bone>;\n\n\t/** The bone that is the IK target. */\n\ttarget: Bone;\n\n\t/** Controls the bend direction of the IK bones, either 1 or -1. */\n\tbendDirection = 0;\n\n\t/** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\n\tcompress = false;\n\n\t/** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n\t * and the parent bone has local nonuniform scale, stretch is not applied. */\n\tstretch = false;\n\n\t/** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\n\tmix = 1;\n\n\t/** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\n\tsoftness = 0;\n\tactive = false;\n\n\tconstructor(data: IkConstraintData, skeleton: Skeleton) {\n\t\tif (!data) throw new Error(\"data cannot be null.\");\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\n\t\tthis.data = data;\n\t\tthis.mix = data.mix;\n\t\tthis.softness = data.softness;\n\t\tthis.bendDirection = data.bendDirection;\n\t\tthis.compress = data.compress;\n\t\tthis.stretch = data.stretch;\n\n\t\tthis.bones = new Array<Bone>();\n\t\tfor (let i = 0; i < data.bones.length; i++)\n\t\t\tthis.bones.push(skeleton.findBone(data.bones[i].name));\n\t\tthis.target = skeleton.findBone(data.target.name);\n\t}\n\n\tisActive() {\n\t\treturn this.active;\n\t}\n\n\tupdate() {\n\t\tif (this.mix == 0) return;\n\t\tlet target = this.target;\n\t\tlet bones = this.bones;\n\t\tswitch (bones.length) {\n\t\t\tcase 1:\n\t\t\t\tthis.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tthis.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.data.uniform, this.softness, this.mix);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/** Applies 1 bone IK. The target is specified in the world coordinate system. */\n\tapply1(bone: Bone, targetX: number, targetY: number, compress: boolean, stretch: boolean, uniform: boolean, alpha: number) {\n\t\tlet p = bone.parent;\n\t\tlet pa = p.a, pb = p.b, pc = p.c, pd = p.d;\n\t\tlet rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;\n\n\t\tswitch (bone.data.transformMode) {\n\t\t\tcase TransformMode.OnlyTranslation:\n\t\t\t\ttx = targetX - bone.worldX;\n\t\t\t\tty = targetY - bone.worldY;\n\t\t\t\tbreak;\n\t\t\tcase TransformMode.NoRotationOrReflection:\n\t\t\t\tlet s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);\n\t\t\t\tlet sa = pa / bone.skeleton.scaleX;\n\t\t\t\tlet sc = pc / bone.skeleton.scaleY;\n\t\t\t\tpb = -sc * s * bone.skeleton.scaleX;\n\t\t\t\tpd = sa * s * bone.skeleton.scaleY;\n\t\t\t\trotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;\n\t\t\t// Fall through\n\t\t\tdefault:\n\t\t\t\tlet x = targetX - p.worldX, y = targetY - p.worldY;\n\t\t\t\tlet d = pa * pd - pb * pc;\n\t\t\t\ttx = (x * pd - y * pb) / d - bone.ax;\n\t\t\t\tty = (y * pa - x * pc) / d - bone.ay;\n\t\t}\n\t\trotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;\n\t\tif (bone.ascaleX < 0) rotationIK += 180;\n\t\tif (rotationIK > 180)\n\t\t\trotationIK -= 360;\n\t\telse if (rotationIK < -180)\n\t\t\trotationIK += 360;\n\t\tlet sx = bone.ascaleX, sy = bone.ascaleY;\n\t\tif (compress || stretch) {\n\t\t\tswitch (bone.data.transformMode) {\n\t\t\t\tcase TransformMode.NoScale:\n\t\t\t\tcase TransformMode.NoScaleOrReflection:\n\t\t\t\t\ttx = targetX - bone.worldX;\n\t\t\t\t\tty = targetY - bone.worldY;\n\t\t\t}\n\t\t\tlet b = bone.data.length * sx, dd = Math.sqrt(tx * tx + ty * ty);\n\t\t\tif ((compress && dd < b) || (stretch && dd > b) && b > 0.0001) {\n\t\t\t\tlet s = (dd / b - 1) * alpha + 1;\n\t\t\t\tsx *= s;\n\t\t\t\tif (uniform) sy *= s;\n\t\t\t}\n\t\t}\n\t\tbone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX,\n\t\t\tbone.ashearY);\n\t}\n\n\t/** Applies 2 bone IK. The target is specified in the world coordinate system.\n\t * @param child A direct descendant of the parent bone. */\n\tapply2(parent: Bone, child: Bone, targetX: number, targetY: number, bendDir: number, stretch: boolean, uniform: boolean, softness: number, alpha: number) {\n\t\tlet px = parent.ax, py = parent.ay, psx = parent.ascaleX, psy = parent.ascaleY, sx = psx, sy = psy, csx = child.ascaleX;\n\t\tlet os1 = 0, os2 = 0, s2 = 0;\n\t\tif (psx < 0) {\n\t\t\tpsx = -psx;\n\t\t\tos1 = 180;\n\t\t\ts2 = -1;\n\t\t} else {\n\t\t\tos1 = 0;\n\t\t\ts2 = 1;\n\t\t}\n\t\tif (psy < 0) {\n\t\t\tpsy = -psy;\n\t\t\ts2 = -s2;\n\t\t}\n\t\tif (csx < 0) {\n\t\t\tcsx = -csx;\n\t\t\tos2 = 180;\n\t\t} else\n\t\t\tos2 = 0;\n\t\tlet cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = parent.a, b = parent.b, c = parent.c, d = parent.d;\n\t\tlet u = Math.abs(psx - psy) <= 0.0001;\n\t\tif (!u || stretch) {\n\t\t\tcy = 0;\n\t\t\tcwx = a * cx + parent.worldX;\n\t\t\tcwy = c * cx + parent.worldY;\n\t\t} else {\n\t\t\tcy = child.ay;\n\t\t\tcwx = a * cx + b * cy + parent.worldX;\n\t\t\tcwy = c * cx + d * cy + parent.worldY;\n\t\t}\n\t\tlet pp = parent.parent;\n\t\ta = pp.a;\n\t\tb = pp.b;\n\t\tc = pp.c;\n\t\td = pp.d;\n\t\tlet id = 1 / (a * d - b * c), x = cwx - pp.worldX, y = cwy - pp.worldY;\n\t\tlet dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;\n\t\tlet l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\n\t\tif (l1 < 0.0001) {\n\t\t\tthis.apply1(parent, targetX, targetY, false, stretch, false, alpha);\n\t\t\tchild.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n\t\t\treturn;\n\t\t}\n\t\tx = targetX - pp.worldX;\n\t\ty = targetY - pp.worldY;\n\t\tlet tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;\n\t\tlet dd = tx * tx + ty * ty;\n\t\tif (softness != 0) {\n\t\t\tsoftness *= psx * (csx + 1) * 0.5;\n\t\t\tlet td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;\n\t\t\tif (sd > 0) {\n\t\t\t\tlet p = Math.min(1, sd / (softness * 2)) - 1;\n\t\t\t\tp = (sd - softness * (1 - p * p)) / td;\n\t\t\t\ttx -= p * tx;\n\t\t\t\tty -= p * ty;\n\t\t\t\tdd = tx * tx + ty * ty;\n\t\t\t}\n\t\t}\n\t\touter:\n\t\tif (u) {\n\t\t\tl2 *= psx;\n\t\t\tlet cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n\t\t\tif (cos < -1) {\n\t\t\t\tcos = -1;\n\t\t\t\ta2 = Math.PI * bendDir;\n\t\t\t} else if (cos > 1) {\n\t\t\t\tcos = 1;\n\t\t\t\ta2 = 0;\n\t\t\t\tif (stretch) {\n\t\t\t\t\ta = (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;\n\t\t\t\t\tsx *= a;\n\t\t\t\t\tif (uniform) sy *= a;\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\ta2 = Math.acos(cos) * bendDir;\n\t\t\ta = l1 + l2 * cos;\n\t\t\tb = l2 * Math.sin(a2);\n\t\t\ta1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\n\t\t} else {\n\t\t\ta = psx * l2;\n\t\t\tb = psy * l2;\n\t\t\tlet aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);\n\t\t\tc = bb * l1 * l1 + aa * dd - aa * bb;\n\t\t\tlet c1 = -2 * bb * l1, c2 = bb - aa;\n\t\t\td = c1 * c1 - 4 * c2 * c;\n\t\t\tif (d >= 0) {\n\t\t\t\tlet q = Math.sqrt(d);\n\t\t\t\tif (c1 < 0) q = -q;\n\t\t\t\tq = -(c1 + q) * 0.5;\n\t\t\t\tlet r0 = q / c2, r1 = c / q;\n\t\t\t\tlet r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n\t\t\t\tif (r * r <= dd) {\n\t\t\t\t\ty = Math.sqrt(dd - r * r) * bendDir;\n\t\t\t\t\ta1 = ta - Math.atan2(y, r);\n\t\t\t\t\ta2 = Math.atan2(y / psy, (r - l1) / psx);\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;\n\t\t\tlet maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;\n\t\t\tc = -a * l1 / (aa - bb);\n\t\t\tif (c >= -1 && c <= 1) {\n\t\t\t\tc = Math.acos(c);\n\t\t\t\tx = a * Math.cos(c) + l1;\n\t\t\t\ty = b * Math.sin(c);\n\t\t\t\td = x * x + y * y;\n\t\t\t\tif (d < minDist) {\n\t\t\t\t\tminAngle = c;\n\t\t\t\t\tminDist = d;\n\t\t\t\t\tminX = x;\n\t\t\t\t\tminY = y;\n\t\t\t\t}\n\t\t\t\tif (d > maxDist) {\n\t\t\t\t\tmaxAngle = c;\n\t\t\t\t\tmaxDist = d;\n\t\t\t\t\tmaxX = x;\n\t\t\t\t\tmaxY = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dd <= (minDist + maxDist) * 0.5) {\n\t\t\t\ta1 = ta - Math.atan2(minY * bendDir, minX);\n\t\t\t\ta2 = minAngle * bendDir;\n\t\t\t} else {\n\t\t\t\ta1 = ta - Math.atan2(maxY * bendDir, maxX);\n\t\t\t\ta2 = maxAngle * bendDir;\n\t\t\t}\n\t\t}\n\t\tlet os = Math.atan2(cy, cx) * s2;\n\t\tlet rotation = parent.arotation;\n\t\ta1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\n\t\tif (a1 > 180)\n\t\t\ta1 -= 360;\n\t\telse if (a1 < -180) //\n\t\t\ta1 += 360;\n\t\tparent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, sy, 0, 0);\n\t\trotation = child.arotation;\n\t\ta2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\n\t\tif (a2 > 180)\n\t\t\ta2 -= 360;\n\t\telse if (a2 < -180) //\n\t\t\ta2 += 360;\n\t\tchild.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { BoneData } from \"./BoneData\";\nimport { ConstraintData } from \"./ConstraintData\";\n\n\n/** Stores the setup pose for an {@link IkConstraint}.\n * <p>\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */\nexport class IkConstraintData extends ConstraintData {\n\t/** The bones that are constrained by this IK constraint. */\n\tbones = new Array<BoneData>();\n\n\t/** The bone that is the IK target. */\n\ttarget: BoneData;\n\n\t/** Controls the bend direction of the IK bones, either 1 or -1. */\n\tbendDirection = 1;\n\n\t/** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\n\tcompress = false;\n\n\t/** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n\t * and the parent bone has local nonuniform scale, stretch is not applied. */\n\tstretch = false;\n\n\t/** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\n\t * is scaled on both the X and Y axes. */\n\tuniform = false;\n\n\t/** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\n\tmix = 1;\n\n\t/** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\n\tsoftness = 0;\n\n\tconstructor(name: string) {\n\t\tsuper(name, 0, false);\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { BoneData } from \"./BoneData\";\nimport { ConstraintData } from \"./ConstraintData\";\nimport { SlotData } from \"./SlotData\";\n\n\n/** Stores the setup pose for a {@link PathConstraint}.\n *\n * See [path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\nexport class PathConstraintData extends ConstraintData {\n\n\t/** The bones that will be modified by this path constraint. */\n\tbones = new Array<BoneData>();\n\n\t/** The slot whose path attachment will be used to constrained the bones. */\n\ttarget: SlotData;\n\n\t/** The mode for positioning the first bone on the path. */\n\tpositionMode: PositionMode;\n\n\t/** The mode for positioning the bones after the first bone on the path. */\n\tspacingMode: SpacingMode;\n\n\t/** The mode for adjusting the rotation of the bones. */\n\trotateMode: RotateMode;\n\n\t/** An offset added to the constrained bone rotation. */\n\toffsetRotation: number;\n\n\t/** The position along the path. */\n\tposition: number;\n\n\t/** The spacing between bones. */\n\tspacing: number;\n\n\tmixRotate = 0;\n\tmixX = 0;\n\tmixY = 0;\n\n\tconstructor(name: string) {\n\t\tsuper(name, 0, false);\n\t}\n}\n\n/** Controls how the first bone is positioned along the path.\n *\n * See [position](http://esotericsoftware.com/spine-path-constraints#Position) in the Spine User Guide. */\nexport enum PositionMode { Fixed, Percent }\n\n/** Controls how bones after the first bone are positioned along the path.\n *\n * See [spacing](http://esotericsoftware.com/spine-path-constraints#Spacing) in the Spine User Guide. */\nexport enum SpacingMode { Length, Fixed, Percent, Proportional }\n\n/** Controls how bones are rotated, translated, and scaled to match the path.\n *\n * See [rotate mix](http://esotericsoftware.com/spine-path-constraints#Rotate-mix) in the Spine User Guide. */\nexport enum RotateMode { Tangent, Chain, ChainScale }\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { PathAttachment } from \"./attachments/PathAttachment\";\nimport { Bone } from \"./Bone\";\nimport { PathConstraintData, RotateMode, SpacingMode, PositionMode } from \"./PathConstraintData\";\nimport { Skeleton } from \"./Skeleton\";\nimport { Slot } from \"./Slot\";\nimport { Updatable } from \"./Updatable\";\nimport { Utils, MathUtils } from \"./Utils\";\n\n\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\n * constrained bones so they follow a {@link PathAttachment}.\n *\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\nexport class PathConstraint implements Updatable {\n\tstatic NONE = -1; static BEFORE = -2; static AFTER = -3;\n\tstatic epsilon = 0.00001;\n\n\t/** The path constraint's setup pose data. */\n\tdata: PathConstraintData;\n\n\t/** The bones that will be modified by this path constraint. */\n\tbones: Array<Bone>;\n\n\t/** The slot whose path attachment will be used to constrained the bones. */\n\ttarget: Slot;\n\n\t/** The position along the path. */\n\tposition = 0;\n\n\t/** The spacing between bones. */\n\tspacing = 0;\n\n\tmixRotate = 0;\n\n\tmixX = 0;\n\n\tmixY = 0;\n\n\tspaces = new Array<number>(); positions = new Array<number>();\n\tworld = new Array<number>(); curves = new Array<number>(); lengths = new Array<number>();\n\tsegments = new Array<number>();\n\n\tactive = false;\n\n\tconstructor(data: PathConstraintData, skeleton: Skeleton) {\n\t\tif (!data) throw new Error(\"data cannot be null.\");\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\n\t\tthis.data = data;\n\t\tthis.bones = new Array<Bone>();\n\t\tfor (let i = 0, n = data.bones.length; i < n; i++)\n\t\t\tthis.bones.push(skeleton.findBone(data.bones[i].name));\n\t\tthis.target = skeleton.findSlot(data.target.name);\n\t\tthis.position = data.position;\n\t\tthis.spacing = data.spacing;\n\t\tthis.mixRotate = data.mixRotate;\n\t\tthis.mixX = data.mixX;\n\t\tthis.mixY = data.mixY;\n\t}\n\n\tisActive() {\n\t\treturn this.active;\n\t}\n\n\tupdate() {\n\t\tlet attachment = this.target.getAttachment();\n\t\tif (!(attachment instanceof PathAttachment)) return;\n\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY;\n\t\tif (mixRotate == 0 && mixX == 0 && mixY == 0) return;\n\n\t\tlet data = this.data;\n\t\tlet tangents = data.rotateMode == RotateMode.Tangent, scale = data.rotateMode == RotateMode.ChainScale;\n\n\t\tlet bones = this.bones;\n\t\tlet boneCount = bones.length, spacesCount = tangents ? boneCount : boneCount + 1;\n\t\tlet spaces = Utils.setArraySize(this.spaces, spacesCount), lengths: Array<number> = scale ? this.lengths = Utils.setArraySize(this.lengths, boneCount) : null;\n\t\tlet spacing = this.spacing;\n\n\t\tswitch (data.spacingMode) {\n\t\t\tcase SpacingMode.Percent:\n\t\t\t\tif (scale) {\n\t\t\t\t\tfor (let i = 0, n = spacesCount - 1; i < n; i++) {\n\t\t\t\t\t\tlet bone = bones[i];\n\t\t\t\t\t\tlet setupLength = bone.data.length;\n\t\t\t\t\t\tif (setupLength < PathConstraint.epsilon)\n\t\t\t\t\t\t\tlengths[i] = 0;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tlet x = setupLength * bone.a, y = setupLength * bone.c;\n\t\t\t\t\t\t\tlengths[i] = Math.sqrt(x * x + y * y);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tUtils.arrayFill(spaces, 1, spacesCount, spacing);\n\t\t\t\tbreak;\n\t\t\tcase SpacingMode.Proportional:\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor (let i = 0, n = spacesCount - 1; i < n;) {\n\t\t\t\t\tlet bone = bones[i];\n\t\t\t\t\tlet setupLength = bone.data.length;\n\t\t\t\t\tif (setupLength < PathConstraint.epsilon) {\n\t\t\t\t\t\tif (scale) lengths[i] = 0;\n\t\t\t\t\t\tspaces[++i] = spacing;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet x = setupLength * bone.a, y = setupLength * bone.c;\n\t\t\t\t\t\tlet length = Math.sqrt(x * x + y * y);\n\t\t\t\t\t\tif (scale) lengths[i] = length;\n\t\t\t\t\t\tspaces[++i] = length;\n\t\t\t\t\t\tsum += length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (sum > 0) {\n\t\t\t\t\tsum = spacesCount / sum * spacing;\n\t\t\t\t\tfor (let i = 1; i < spacesCount; i++)\n\t\t\t\t\t\tspaces[i] *= sum;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlet lengthSpacing = data.spacingMode == SpacingMode.Length;\n\t\t\t\tfor (let i = 0, n = spacesCount - 1; i < n;) {\n\t\t\t\t\tlet bone = bones[i];\n\t\t\t\t\tlet setupLength = bone.data.length;\n\t\t\t\t\tif (setupLength < PathConstraint.epsilon) {\n\t\t\t\t\t\tif (scale) lengths[i] = 0;\n\t\t\t\t\t\tspaces[++i] = spacing;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet x = setupLength * bone.a, y = setupLength * bone.c;\n\t\t\t\t\t\tlet length = Math.sqrt(x * x + y * y);\n\t\t\t\t\t\tif (scale) lengths[i] = length;\n\t\t\t\t\t\tspaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tlet positions = this.computeWorldPositions(<PathAttachment>attachment, spacesCount, tangents);\n\t\tlet boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;\n\t\tlet tip = false;\n\t\tif (offsetRotation == 0)\n\t\t\ttip = data.rotateMode == RotateMode.Chain;\n\t\telse {\n\t\t\ttip = false;\n\t\t\tlet p = this.target.bone;\n\t\t\toffsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\n\t\t}\n\t\tfor (let i = 0, p = 3; i < boneCount; i++, p += 3) {\n\t\t\tlet bone = bones[i];\n\t\t\tbone.worldX += (boneX - bone.worldX) * mixX;\n\t\t\tbone.worldY += (boneY - bone.worldY) * mixY;\n\t\t\tlet x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;\n\t\t\tif (scale) {\n\t\t\t\tlet length = lengths[i];\n\t\t\t\tif (length != 0) {\n\t\t\t\t\tlet s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;\n\t\t\t\t\tbone.a *= s;\n\t\t\t\t\tbone.c *= s;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboneX = x;\n\t\t\tboneY = y;\n\t\t\tif (mixRotate > 0) {\n\t\t\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d, r = 0, cos = 0, sin = 0;\n\t\t\t\tif (tangents)\n\t\t\t\t\tr = positions[p - 1];\n\t\t\t\telse if (spaces[i + 1] == 0)\n\t\t\t\t\tr = positions[p + 2];\n\t\t\t\telse\n\t\t\t\t\tr = Math.atan2(dy, dx);\n\t\t\t\tr -= Math.atan2(c, a);\n\t\t\t\tif (tip) {\n\t\t\t\t\tcos = Math.cos(r);\n\t\t\t\t\tsin = Math.sin(r);\n\t\t\t\t\tlet length = bone.data.length;\n\t\t\t\t\tboneX += (length * (cos * a - sin * c) - dx) * mixRotate;\n\t\t\t\t\tboneY += (length * (sin * a + cos * c) - dy) * mixRotate;\n\t\t\t\t} else {\n\t\t\t\t\tr += offsetRotation;\n\t\t\t\t}\n\t\t\t\tif (r > MathUtils.PI)\n\t\t\t\t\tr -= MathUtils.PI2;\n\t\t\t\telse if (r < -MathUtils.PI) //\n\t\t\t\t\tr += MathUtils.PI2;\n\t\t\t\tr *= mixRotate;\n\t\t\t\tcos = Math.cos(r);\n\t\t\t\tsin = Math.sin(r);\n\t\t\t\tbone.a = cos * a - sin * c;\n\t\t\t\tbone.b = cos * b - sin * d;\n\t\t\t\tbone.c = sin * a + cos * c;\n\t\t\t\tbone.d = sin * b + cos * d;\n\t\t\t}\n\t\t\tbone.updateAppliedTransform();\n\t\t}\n\t}\n\n\tcomputeWorldPositions(path: PathAttachment, spacesCount: number, tangents: boolean) {\n\t\tlet target = this.target;\n\t\tlet position = this.position;\n\t\tlet spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world: Array<number> = null;\n\t\tlet closed = path.closed;\n\t\tlet verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;\n\n\t\tif (!path.constantSpeed) {\n\t\t\tlet lengths = path.lengths;\n\t\t\tcurveCount -= closed ? 1 : 2;\n\t\t\tlet pathLength = lengths[curveCount];\n\t\t\tif (this.data.positionMode == PositionMode.Percent) position *= pathLength;\n\n\t\t\tlet multiplier;\n\t\t\tswitch (this.data.spacingMode) {\n\t\t\t\tcase SpacingMode.Percent:\n\t\t\t\t\tmultiplier = pathLength;\n\t\t\t\t\tbreak;\n\t\t\t\tcase SpacingMode.Proportional:\n\t\t\t\t\tmultiplier = pathLength / spacesCount;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmultiplier = 1;\n\t\t\t}\n\t\t\tworld = Utils.setArraySize(this.world, 8);\n\t\t\tfor (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\n\t\t\t\tlet space = spaces[i] * multiplier;\n\t\t\t\tposition += space;\n\t\t\t\tlet p = position;\n\n\t\t\t\tif (closed) {\n\t\t\t\t\tp %= pathLength;\n\t\t\t\t\tif (p < 0) p += pathLength;\n\t\t\t\t\tcurve = 0;\n\t\t\t\t} else if (p < 0) {\n\t\t\t\t\tif (prevCurve != PathConstraint.BEFORE) {\n\t\t\t\t\t\tprevCurve = PathConstraint.BEFORE;\n\t\t\t\t\t\tpath.computeWorldVertices(target, 2, 4, world, 0, 2);\n\t\t\t\t\t}\n\t\t\t\t\tthis.addBeforePosition(p, world, 0, out, o);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (p > pathLength) {\n\t\t\t\t\tif (prevCurve != PathConstraint.AFTER) {\n\t\t\t\t\t\tprevCurve = PathConstraint.AFTER;\n\t\t\t\t\t\tpath.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\n\t\t\t\t\t}\n\t\t\t\t\tthis.addAfterPosition(p - pathLength, world, 0, out, o);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Determine curve containing position.\n\t\t\t\tfor (; ; curve++) {\n\t\t\t\t\tlet length = lengths[curve];\n\t\t\t\t\tif (p > length) continue;\n\t\t\t\t\tif (curve == 0)\n\t\t\t\t\t\tp /= length;\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet prev = lengths[curve - 1];\n\t\t\t\t\t\tp = (p - prev) / (length - prev);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (curve != prevCurve) {\n\t\t\t\t\tprevCurve = curve;\n\t\t\t\t\tif (closed && curve == curveCount) {\n\t\t\t\t\t\tpath.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\n\t\t\t\t\t\tpath.computeWorldVertices(target, 0, 4, world, 4, 2);\n\t\t\t\t\t} else\n\t\t\t\t\t\tpath.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\n\t\t\t\t}\n\t\t\t\tthis.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o,\n\t\t\t\t\ttangents || (i > 0 && space == 0));\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// World vertices.\n\t\tif (closed) {\n\t\t\tverticesLength += 2;\n\t\t\tworld = Utils.setArraySize(this.world, verticesLength);\n\t\t\tpath.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\n\t\t\tpath.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\n\t\t\tworld[verticesLength - 2] = world[0];\n\t\t\tworld[verticesLength - 1] = world[1];\n\t\t} else {\n\t\t\tcurveCount--;\n\t\t\tverticesLength -= 4;\n\t\t\tworld = Utils.setArraySize(this.world, verticesLength);\n\t\t\tpath.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\n\t\t}\n\n\t\t// Curve lengths.\n\t\tlet curves = Utils.setArraySize(this.curves, curveCount);\n\t\tlet pathLength = 0;\n\t\tlet x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;\n\t\tlet tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;\n\t\tfor (let i = 0, w = 2; i < curveCount; i++, w += 6) {\n\t\t\tcx1 = world[w];\n\t\t\tcy1 = world[w + 1];\n\t\t\tcx2 = world[w + 2];\n\t\t\tcy2 = world[w + 3];\n\t\t\tx2 = world[w + 4];\n\t\t\ty2 = world[w + 5];\n\t\t\ttmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\n\t\t\ttmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\n\t\t\tdddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\n\t\t\tdddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\n\t\t\tddfx = tmpx * 2 + dddfx;\n\t\t\tddfy = tmpy * 2 + dddfy;\n\t\t\tdfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\n\t\t\tdfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n\t\t\tdfx += ddfx;\n\t\t\tdfy += ddfy;\n\t\t\tddfx += dddfx;\n\t\t\tddfy += dddfy;\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n\t\t\tdfx += ddfx;\n\t\t\tdfy += ddfy;\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n\t\t\tdfx += ddfx + dddfx;\n\t\t\tdfy += ddfy + dddfy;\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n\t\t\tcurves[i] = pathLength;\n\t\t\tx1 = x2;\n\t\t\ty1 = y2;\n\t\t}\n\n\t\tif (this.data.positionMode == PositionMode.Percent) position *= pathLength;\n\n\t\tlet multiplier;\n\t\tswitch (this.data.spacingMode) {\n\t\t\tcase SpacingMode.Percent:\n\t\t\t\tmultiplier = pathLength;\n\t\t\t\tbreak;\n\t\t\tcase SpacingMode.Proportional:\n\t\t\t\tmultiplier = pathLength / spacesCount;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmultiplier = 1;\n\t\t}\n\n\t\tlet segments = this.segments;\n\t\tlet curveLength = 0;\n\t\tfor (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\n\t\t\tlet space = spaces[i] * multiplier;\n\t\t\tposition += space;\n\t\t\tlet p = position;\n\n\t\t\tif (closed) {\n\t\t\t\tp %= pathLength;\n\t\t\t\tif (p < 0) p += pathLength;\n\t\t\t\tcurve = 0;\n\t\t\t} else if (p < 0) {\n\t\t\t\tthis.addBeforePosition(p, world, 0, out, o);\n\t\t\t\tcontinue;\n\t\t\t} else if (p > pathLength) {\n\t\t\t\tthis.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Determine curve containing position.\n\t\t\tfor (; ; curve++) {\n\t\t\t\tlet length = curves[curve];\n\t\t\t\tif (p > length) continue;\n\t\t\t\tif (curve == 0)\n\t\t\t\t\tp /= length;\n\t\t\t\telse {\n\t\t\t\t\tlet prev = curves[curve - 1];\n\t\t\t\t\tp = (p - prev) / (length - prev);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Curve segment lengths.\n\t\t\tif (curve != prevCurve) {\n\t\t\t\tprevCurve = curve;\n\t\t\t\tlet ii = curve * 6;\n\t\t\t\tx1 = world[ii];\n\t\t\t\ty1 = world[ii + 1];\n\t\t\t\tcx1 = world[ii + 2];\n\t\t\t\tcy1 = world[ii + 3];\n\t\t\t\tcx2 = world[ii + 4];\n\t\t\t\tcy2 = world[ii + 5];\n\t\t\t\tx2 = world[ii + 6];\n\t\t\t\ty2 = world[ii + 7];\n\t\t\t\ttmpx = (x1 - cx1 * 2 + cx2) * 0.03;\n\t\t\t\ttmpy = (y1 - cy1 * 2 + cy2) * 0.03;\n\t\t\t\tdddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\n\t\t\t\tdddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\n\t\t\t\tddfx = tmpx * 2 + dddfx;\n\t\t\t\tddfy = tmpy * 2 + dddfy;\n\t\t\t\tdfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\n\t\t\t\tdfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\n\t\t\t\tcurveLength = Math.sqrt(dfx * dfx + dfy * dfy);\n\t\t\t\tsegments[0] = curveLength;\n\t\t\t\tfor (ii = 1; ii < 8; ii++) {\n\t\t\t\t\tdfx += ddfx;\n\t\t\t\t\tdfy += ddfy;\n\t\t\t\t\tddfx += dddfx;\n\t\t\t\t\tddfy += dddfy;\n\t\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n\t\t\t\t\tsegments[ii] = curveLength;\n\t\t\t\t}\n\t\t\t\tdfx += ddfx;\n\t\t\t\tdfy += ddfy;\n\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n\t\t\t\tsegments[8] = curveLength;\n\t\t\t\tdfx += ddfx + dddfx;\n\t\t\t\tdfy += ddfy + dddfy;\n\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n\t\t\t\tsegments[9] = curveLength;\n\t\t\t\tsegment = 0;\n\t\t\t}\n\n\t\t\t// Weight by segment length.\n\t\t\tp *= curveLength;\n\t\t\tfor (; ; segment++) {\n\t\t\t\tlet length = segments[segment];\n\t\t\t\tif (p > length) continue;\n\t\t\t\tif (segment == 0)\n\t\t\t\t\tp /= length;\n\t\t\t\telse {\n\t\t\t\t\tlet prev = segments[segment - 1];\n\t\t\t\t\tp = segment + (p - prev) / (length - prev);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\n\t\t}\n\t\treturn out;\n\t}\n\n\taddBeforePosition(p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\n\t\tlet x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);\n\t\tout[o] = x1 + p * Math.cos(r);\n\t\tout[o + 1] = y1 + p * Math.sin(r);\n\t\tout[o + 2] = r;\n\t}\n\n\taddAfterPosition(p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\n\t\tlet x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);\n\t\tout[o] = x1 + p * Math.cos(r);\n\t\tout[o + 1] = y1 + p * Math.sin(r);\n\t\tout[o + 2] = r;\n\t}\n\n\taddCurvePosition(p: number, x1: number, y1: number, cx1: number, cy1: number, cx2: number, cy2: number, x2: number, y2: number,\n\t\tout: Array<number>, o: number, tangents: boolean) {\n\t\tif (p == 0 || isNaN(p)) {\n\t\t\tout[o] = x1;\n\t\t\tout[o + 1] = y1;\n\t\t\tout[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n\t\t\treturn;\n\t\t}\n\t\tlet tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;\n\t\tlet ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;\n\t\tlet x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\n\t\tout[o] = x;\n\t\tout[o + 1] = y;\n\t\tif (tangents) {\n\t\t\tif (p < 0.001)\n\t\t\t\tout[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n\t\t\telse\n\t\t\t\tout[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\n\t\t}\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Attachment, VertexAttachment } from \"./attachments/Attachment\";\nimport { Bone } from \"./Bone\";\nimport { Skeleton } from \"./Skeleton\";\nimport { SlotData } from \"./SlotData\";\nimport { Color } from \"./Utils\";\n\n/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\n * across multiple skeletons. */\nexport class Slot {\n\t/** The slot's setup pose data. */\n\tdata: SlotData;\n\n\t/** The bone this slot belongs to. */\n\tbone: Bone;\n\n\t/** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n\t * color tinting. */\n\tcolor: Color;\n\n\t/** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n\t * color's alpha is not used. */\n\tdarkColor: Color;\n\n\tattachment: Attachment;\n\n\tprivate attachmentTime: number;\n\n\tattachmentState: number;\n\n\t/** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\n\t * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\n\t *\n\t * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */\n\tdeform = new Array<number>();\n\n\tconstructor(data: SlotData, bone: Bone) {\n\t\tif (!data) throw new Error(\"data cannot be null.\");\n\t\tif (!bone) throw new Error(\"bone cannot be null.\");\n\t\tthis.data = data;\n\t\tthis.bone = bone;\n\t\tthis.color = new Color();\n\t\tthis.darkColor = !data.darkColor ? null : new Color();\n\t\tthis.setToSetupPose();\n\t}\n\n\t/** The skeleton this slot belongs to. */\n\tgetSkeleton(): Skeleton {\n\t\treturn this.bone.skeleton;\n\t}\n\n\t/** The current attachment for the slot, or null if the slot has no attachment. */\n\tgetAttachment(): Attachment {\n\t\treturn this.attachment;\n\t}\n\n\t/** Sets the slot's attachment and, if the attachment changed, resets {@link #attachmentTime} and clears the {@link #deform}.\n\t * The deform is not cleared if the old attachment has the same {@link VertexAttachment#getDeformAttachment()} as the specified\n\t * attachment.\n\t * @param attachment May be null. */\n\tsetAttachment(attachment: Attachment) {\n\t\tif (this.attachment == attachment) return;\n\t\tif (!(attachment instanceof VertexAttachment) || !(this.attachment instanceof VertexAttachment)\n\t\t\t|| (<VertexAttachment>attachment).deformAttachment != (<VertexAttachment>this.attachment).deformAttachment) {\n\t\t\tthis.deform.length = 0;\n\t\t}\n\t\tthis.attachment = attachment;\n\t\tthis.attachmentTime = this.bone.skeleton.time;\n\t}\n\n\tsetAttachmentTime(time: number) {\n\t\tthis.attachmentTime = this.bone.skeleton.time - time;\n\t}\n\n\t/** The time that has elapsed since the last time the attachment was set or cleared. Relies on Skeleton\n\t * {@link Skeleton#time}. */\n\tgetAttachmentTime(): number {\n\t\treturn this.bone.skeleton.time - this.attachmentTime;\n\t}\n\n\t/** Sets this slot to the setup pose. */\n\tsetToSetupPose() {\n\t\tthis.color.setFromColor(this.data.color);\n\t\tif (this.darkColor) this.darkColor.setFromColor(this.data.darkColor);\n\t\tif (!this.data.attachmentName)\n\t\t\tthis.attachment = null;\n\t\telse {\n\t\t\tthis.attachment = null;\n\t\t\tthis.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\n\t\t}\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Bone } from \"./Bone\";\nimport { Skeleton } from \"./Skeleton\";\nimport { TransformConstraintData } from \"./TransformConstraintData\";\nimport { Updatable } from \"./Updatable\";\nimport { Vector2, MathUtils } from \"./Utils\";\n\n\n/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\n * bones to match that of the target bone.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */\nexport class TransformConstraint implements Updatable {\n\n\t/** The transform constraint's setup pose data. */\n\tdata: TransformConstraintData;\n\n\t/** The bones that will be modified by this transform constraint. */\n\tbones: Array<Bone>;\n\n\t/** The target bone whose world transform will be copied to the constrained bones. */\n\ttarget: Bone;\n\n\tmixRotate = 0; mixX = 0; mixY = 0; mixScaleX = 0; mixScaleY = 0; mixShearY = 0;\n\n\ttemp = new Vector2();\n\tactive = false;\n\n\tconstructor(data: TransformConstraintData, skeleton: Skeleton) {\n\t\tif (!data) throw new Error(\"data cannot be null.\");\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\n\t\tthis.data = data;\n\t\tthis.mixRotate = data.mixRotate;\n\t\tthis.mixX = data.mixX;\n\t\tthis.mixY = data.mixY;\n\t\tthis.mixScaleX = data.mixScaleX;\n\t\tthis.mixScaleY = data.mixScaleY;\n\t\tthis.mixShearY = data.mixShearY;\n\t\tthis.bones = new Array<Bone>();\n\t\tfor (let i = 0; i < data.bones.length; i++)\n\t\t\tthis.bones.push(skeleton.findBone(data.bones[i].name));\n\t\tthis.target = skeleton.findBone(data.target.name);\n\t}\n\n\tisActive() {\n\t\treturn this.active;\n\t}\n\n\tupdate() {\n\t\tif (this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleX == 0 && this.mixShearY == 0) return;\n\n\t\tif (this.data.local) {\n\t\t\tif (this.data.relative)\n\t\t\t\tthis.applyRelativeLocal();\n\t\t\telse\n\t\t\t\tthis.applyAbsoluteLocal();\n\t\t} else {\n\t\t\tif (this.data.relative)\n\t\t\t\tthis.applyRelativeWorld();\n\t\t\telse\n\t\t\t\tthis.applyAbsoluteWorld();\n\t\t}\n\t}\n\n\tapplyAbsoluteWorld() {\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\n\t\t\tmixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n\t\tlet translate = mixX != 0 || mixY != 0;\n\n\t\tlet target = this.target;\n\t\tlet ta = target.a, tb = target.b, tc = target.c, td = target.d;\n\t\tlet degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n\t\tlet offsetRotation = this.data.offsetRotation * degRadReflect;\n\t\tlet offsetShearY = this.data.offsetShearY * degRadReflect;\n\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\n\t\t\tif (mixRotate != 0) {\n\t\t\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n\t\t\t\tlet r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\n\t\t\t\tif (r > MathUtils.PI)\n\t\t\t\t\tr -= MathUtils.PI2;\n\t\t\t\telse if (r < -MathUtils.PI) //\n\t\t\t\t\tr += MathUtils.PI2;\n\t\t\t\tr *= mixRotate;\n\t\t\t\tlet cos = Math.cos(r), sin = Math.sin(r);\n\t\t\t\tbone.a = cos * a - sin * c;\n\t\t\t\tbone.b = cos * b - sin * d;\n\t\t\t\tbone.c = sin * a + cos * c;\n\t\t\t\tbone.d = sin * b + cos * d;\n\t\t\t}\n\n\t\t\tif (translate) {\n\t\t\t\tlet temp = this.temp;\n\t\t\t\ttarget.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n\t\t\t\tbone.worldX += (temp.x - bone.worldX) * mixX;\n\t\t\t\tbone.worldY += (temp.y - bone.worldY) * mixY;\n\t\t\t}\n\n\t\t\tif (mixScaleX != 0) {\n\t\t\t\tlet s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);\n\t\t\t\tif (s != 0) s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;\n\t\t\t\tbone.a *= s;\n\t\t\t\tbone.c *= s;\n\t\t\t}\n\t\t\tif (mixScaleY != 0) {\n\t\t\t\tlet s = Math.sqrt(bone.b * bone.b + bone.d * bone.d);\n\t\t\t\tif (s != 0) s = (s + (Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY) * mixScaleY) / s;\n\t\t\t\tbone.b *= s;\n\t\t\t\tbone.d *= s;\n\t\t\t}\n\n\t\t\tif (mixShearY > 0) {\n\t\t\t\tlet b = bone.b, d = bone.d;\n\t\t\t\tlet by = Math.atan2(d, b);\n\t\t\t\tlet r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(bone.c, bone.a));\n\t\t\t\tif (r > MathUtils.PI)\n\t\t\t\t\tr -= MathUtils.PI2;\n\t\t\t\telse if (r < -MathUtils.PI) //\n\t\t\t\t\tr += MathUtils.PI2;\n\t\t\t\tr = by + (r + offsetShearY) * mixShearY;\n\t\t\t\tlet s = Math.sqrt(b * b + d * d);\n\t\t\t\tbone.b = Math.cos(r) * s;\n\t\t\t\tbone.d = Math.sin(r) * s;\n\t\t\t}\n\n\t\t\tbone.updateAppliedTransform();\n\t\t}\n\t}\n\n\tapplyRelativeWorld() {\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\n\t\t\tmixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n\t\tlet translate = mixX != 0 || mixY != 0;\n\n\t\tlet target = this.target;\n\t\tlet ta = target.a, tb = target.b, tc = target.c, td = target.d;\n\t\tlet degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n\t\tlet offsetRotation = this.data.offsetRotation * degRadReflect, offsetShearY = this.data.offsetShearY * degRadReflect;\n\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\n\t\t\tif (mixRotate != 0) {\n\t\t\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n\t\t\t\tlet r = Math.atan2(tc, ta) + offsetRotation;\n\t\t\t\tif (r > MathUtils.PI)\n\t\t\t\t\tr -= MathUtils.PI2;\n\t\t\t\telse if (r < -MathUtils.PI) //\n\t\t\t\t\tr += MathUtils.PI2;\n\t\t\t\tr *= mixRotate;\n\t\t\t\tlet cos = Math.cos(r), sin = Math.sin(r);\n\t\t\t\tbone.a = cos * a - sin * c;\n\t\t\t\tbone.b = cos * b - sin * d;\n\t\t\t\tbone.c = sin * a + cos * c;\n\t\t\t\tbone.d = sin * b + cos * d;\n\t\t\t}\n\n\t\t\tif (translate) {\n\t\t\t\tlet temp = this.temp;\n\t\t\t\ttarget.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n\t\t\t\tbone.worldX += temp.x * mixX;\n\t\t\t\tbone.worldY += temp.y * mixY;\n\t\t\t}\n\n\t\t\tif (mixScaleX != 0) {\n\t\t\t\tlet s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;\n\t\t\t\tbone.a *= s;\n\t\t\t\tbone.c *= s;\n\t\t\t}\n\t\t\tif (mixScaleY != 0) {\n\t\t\t\tlet s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;\n\t\t\t\tbone.b *= s;\n\t\t\t\tbone.d *= s;\n\t\t\t}\n\n\t\t\tif (mixShearY > 0) {\n\t\t\t\tlet r = Math.atan2(td, tb) - Math.atan2(tc, ta);\n\t\t\t\tif (r > MathUtils.PI)\n\t\t\t\t\tr -= MathUtils.PI2;\n\t\t\t\telse if (r < -MathUtils.PI) //\n\t\t\t\t\tr += MathUtils.PI2;\n\t\t\t\tlet b = bone.b, d = bone.d;\n\t\t\t\tr = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * mixShearY;\n\t\t\t\tlet s = Math.sqrt(b * b + d * d);\n\t\t\t\tbone.b = Math.cos(r) * s;\n\t\t\t\tbone.d = Math.sin(r) * s;\n\t\t\t}\n\n\t\t\tbone.updateAppliedTransform();\n\t\t}\n\t}\n\n\tapplyAbsoluteLocal() {\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\n\t\t\tmixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n\n\t\tlet target = this.target;\n\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\n\t\t\tlet rotation = bone.arotation;\n\t\t\tif (mixRotate != 0) {\n\t\t\t\tlet r = target.arotation - rotation + this.data.offsetRotation;\n\t\t\t\tr -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n\t\t\t\trotation += r * mixRotate;\n\t\t\t}\n\n\t\t\tlet x = bone.ax, y = bone.ay;\n\t\t\tx += (target.ax - x + this.data.offsetX) * mixX;\n\t\t\ty += (target.ay - y + this.data.offsetY) * mixY;\n\n\t\t\tlet scaleX = bone.ascaleX, scaleY = bone.ascaleY;\n\t\t\tif (mixScaleX != 0 && scaleX != 0)\n\t\t\t\tscaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;\n\t\t\tif (mixScaleY != 0 && scaleY != 0)\n\t\t\t\tscaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;\n\n\t\t\tlet shearY = bone.ashearY;\n\t\t\tif (mixShearY != 0) {\n\t\t\t\tlet r = target.ashearY - shearY + this.data.offsetShearY;\n\t\t\t\tr -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n\t\t\t\tshearY += r * mixShearY;\n\t\t\t}\n\n\t\t\tbone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n\t\t}\n\t}\n\n\tapplyRelativeLocal() {\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\n\t\t\tmixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n\n\t\tlet target = this.target;\n\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\n\t\t\tlet rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;\n\t\t\tlet x = bone.ax + (target.ax + this.data.offsetX) * mixX;\n\t\t\tlet y = bone.ay + (target.ay + this.data.offsetY) * mixY;\n\t\t\tlet scaleX = (bone.ascaleX * ((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1);\n\t\t\tlet scaleY = (bone.ascaleY * ((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1);\n\t\t\tlet shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;\n\n\t\t\tbone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n\t\t}\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Attachment } from \"./attachments/Attachment\";\nimport { MeshAttachment } from \"./attachments/MeshAttachment\";\nimport { PathAttachment } from \"./attachments/PathAttachment\";\nimport { RegionAttachment } from \"./attachments/RegionAttachment\";\nimport { Bone } from \"./Bone\";\nimport { IkConstraint } from \"./IkConstraint\";\nimport { PathConstraint } from \"./PathConstraint\";\nimport { SkeletonData } from \"./SkeletonData\";\nimport { Skin } from \"./Skin\";\nimport { Slot } from \"./Slot\";\nimport { TransformConstraint } from \"./TransformConstraint\";\nimport { Updatable } from \"./Updatable\";\nimport { Color, Utils, MathUtils, Vector2, NumberArrayLike } from \"./Utils\";\n\n/** Stores the current pose for a skeleton.\n *\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide. */\nexport class Skeleton {\n\t/** The skeleton's setup pose data. */\n\tdata: SkeletonData;\n\n\t/** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\n\tbones: Array<Bone>;\n\n\t/** The skeleton's slots. */\n\tslots: Array<Slot>;\n\n\t/** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order. */\n\tdrawOrder: Array<Slot>;\n\n\t/** The skeleton's IK constraints. */\n\tikConstraints: Array<IkConstraint>;\n\n\t/** The skeleton's transform constraints. */\n\ttransformConstraints: Array<TransformConstraint>;\n\n\t/** The skeleton's path constraints. */\n\tpathConstraints: Array<PathConstraint>;\n\n\t/** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */\n\t_updateCache = new Array<Updatable>();\n\n\t/** The skeleton's current skin. May be null. */\n\tskin: Skin;\n\n\t/** The color to tint all the skeleton's attachments. */\n\tcolor: Color;\n\n\t/** Returns the skeleton's time. This can be used for tracking, such as with Slot {@link Slot#attachmentTime}.\n\t * <p>\n\t * See {@link #update()}. */\n\ttime = 0;\n\n\t/** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\n\t  * inheritance. */\n\tscaleX = 1;\n\n\t/** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\n\t  * inheritance. */\n\tscaleY = 1;\n\n\t/** Sets the skeleton X position, which is added to the root bone worldX position. */\n\tx = 0;\n\n\t/** Sets the skeleton Y position, which is added to the root bone worldY position. */\n\ty = 0;\n\n\tconstructor(data: SkeletonData) {\n\t\tif (!data) throw new Error(\"data cannot be null.\");\n\t\tthis.data = data;\n\n\t\tthis.bones = new Array<Bone>();\n\t\tfor (let i = 0; i < data.bones.length; i++) {\n\t\t\tlet boneData = data.bones[i];\n\t\t\tlet bone: Bone;\n\t\t\tif (!boneData.parent)\n\t\t\t\tbone = new Bone(boneData, this, null);\n\t\t\telse {\n\t\t\t\tlet parent = this.bones[boneData.parent.index];\n\t\t\t\tbone = new Bone(boneData, this, parent);\n\t\t\t\tparent.children.push(bone);\n\t\t\t}\n\t\t\tthis.bones.push(bone);\n\t\t}\n\n\t\tthis.slots = new Array<Slot>();\n\t\tthis.drawOrder = new Array<Slot>();\n\t\tfor (let i = 0; i < data.slots.length; i++) {\n\t\t\tlet slotData = data.slots[i];\n\t\t\tlet bone = this.bones[slotData.boneData.index];\n\t\t\tlet slot = new Slot(slotData, bone);\n\t\t\tthis.slots.push(slot);\n\t\t\tthis.drawOrder.push(slot);\n\t\t}\n\n\t\tthis.ikConstraints = new Array<IkConstraint>();\n\t\tfor (let i = 0; i < data.ikConstraints.length; i++) {\n\t\t\tlet ikConstraintData = data.ikConstraints[i];\n\t\t\tthis.ikConstraints.push(new IkConstraint(ikConstraintData, this));\n\t\t}\n\n\t\tthis.transformConstraints = new Array<TransformConstraint>();\n\t\tfor (let i = 0; i < data.transformConstraints.length; i++) {\n\t\t\tlet transformConstraintData = data.transformConstraints[i];\n\t\t\tthis.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\n\t\t}\n\n\t\tthis.pathConstraints = new Array<PathConstraint>();\n\t\tfor (let i = 0; i < data.pathConstraints.length; i++) {\n\t\t\tlet pathConstraintData = data.pathConstraints[i];\n\t\t\tthis.pathConstraints.push(new PathConstraint(pathConstraintData, this));\n\t\t}\n\n\t\tthis.color = new Color(1, 1, 1, 1);\n\t\tthis.updateCache();\n\t}\n\n\t/** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\n\t * constraints, or weighted path attachments are added or removed. */\n\tupdateCache() {\n\t\tlet updateCache = this._updateCache;\n\t\tupdateCache.length = 0;\n\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\t\t\tbone.sorted = bone.data.skinRequired;\n\t\t\tbone.active = !bone.sorted;\n\t\t}\n\n\t\tif (this.skin) {\n\t\t\tlet skinBones = this.skin.bones;\n\t\t\tfor (let i = 0, n = this.skin.bones.length; i < n; i++) {\n\t\t\t\tlet bone = this.bones[skinBones[i].index];\n\t\t\t\tdo {\n\t\t\t\t\tbone.sorted = false;\n\t\t\t\t\tbone.active = true;\n\t\t\t\t\tbone = bone.parent;\n\t\t\t\t} while (bone);\n\t\t\t}\n\t\t}\n\n\t\t// IK first, lowest hierarchy depth first.\n\t\tlet ikConstraints = this.ikConstraints;\n\t\tlet transformConstraints = this.transformConstraints;\n\t\tlet pathConstraints = this.pathConstraints;\n\t\tlet ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length;\n\t\tlet constraintCount = ikCount + transformCount + pathCount;\n\n\t\touter:\n\t\tfor (let i = 0; i < constraintCount; i++) {\n\t\t\tfor (let ii = 0; ii < ikCount; ii++) {\n\t\t\t\tlet constraint = ikConstraints[ii];\n\t\t\t\tif (constraint.data.order == i) {\n\t\t\t\t\tthis.sortIkConstraint(constraint);\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let ii = 0; ii < transformCount; ii++) {\n\t\t\t\tlet constraint = transformConstraints[ii];\n\t\t\t\tif (constraint.data.order == i) {\n\t\t\t\t\tthis.sortTransformConstraint(constraint);\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let ii = 0; ii < pathCount; ii++) {\n\t\t\t\tlet constraint = pathConstraints[ii];\n\t\t\t\tif (constraint.data.order == i) {\n\t\t\t\t\tthis.sortPathConstraint(constraint);\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0, n = bones.length; i < n; i++)\n\t\t\tthis.sortBone(bones[i]);\n\t}\n\n\tsortIkConstraint(constraint: IkConstraint) {\n\t\tconstraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n\t\tif (!constraint.active) return;\n\n\t\tlet target = constraint.target;\n\t\tthis.sortBone(target);\n\n\t\tlet constrained = constraint.bones;\n\t\tlet parent = constrained[0];\n\t\tthis.sortBone(parent);\n\n\t\tif (constrained.length == 1) {\n\t\t\tthis._updateCache.push(constraint);\n\t\t\tthis.sortReset(parent.children);\n\t\t} else {\n\t\t\tlet child = constrained[constrained.length - 1];\n\t\t\tthis.sortBone(child);\n\n\t\t\tthis._updateCache.push(constraint);\n\n\t\t\tthis.sortReset(parent.children);\n\t\t\tchild.sorted = true;\n\t\t}\n\t}\n\n\tsortPathConstraint(constraint: PathConstraint) {\n\t\tconstraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n\t\tif (!constraint.active) return;\n\n\t\tlet slot = constraint.target;\n\t\tlet slotIndex = slot.data.index;\n\t\tlet slotBone = slot.bone;\n\t\tif (this.skin) this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\n\t\tif (this.data.defaultSkin && this.data.defaultSkin != this.skin)\n\t\t\tthis.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\n\t\tfor (let i = 0, n = this.data.skins.length; i < n; i++)\n\t\t\tthis.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\n\n\t\tlet attachment = slot.getAttachment();\n\t\tif (attachment instanceof PathAttachment) this.sortPathConstraintAttachmentWith(attachment, slotBone);\n\n\t\tlet constrained = constraint.bones;\n\t\tlet boneCount = constrained.length;\n\t\tfor (let i = 0; i < boneCount; i++)\n\t\t\tthis.sortBone(constrained[i]);\n\n\t\tthis._updateCache.push(constraint);\n\n\t\tfor (let i = 0; i < boneCount; i++)\n\t\t\tthis.sortReset(constrained[i].children);\n\t\tfor (let i = 0; i < boneCount; i++)\n\t\t\tconstrained[i].sorted = true;\n\t}\n\n\tsortTransformConstraint(constraint: TransformConstraint) {\n\t\tconstraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n\t\tif (!constraint.active) return;\n\n\t\tthis.sortBone(constraint.target);\n\n\t\tlet constrained = constraint.bones;\n\t\tlet boneCount = constrained.length;\n\t\tif (constraint.data.local) {\n\t\t\tfor (let i = 0; i < boneCount; i++) {\n\t\t\t\tlet child = constrained[i];\n\t\t\t\tthis.sortBone(child.parent);\n\t\t\t\tthis.sortBone(child);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < boneCount; i++) {\n\t\t\t\tthis.sortBone(constrained[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis._updateCache.push(constraint);\n\n\t\tfor (let i = 0; i < boneCount; i++)\n\t\t\tthis.sortReset(constrained[i].children);\n\t\tfor (let i = 0; i < boneCount; i++)\n\t\t\tconstrained[i].sorted = true;\n\t}\n\n\tsortPathConstraintAttachment(skin: Skin, slotIndex: number, slotBone: Bone) {\n\t\tlet attachments = skin.attachments[slotIndex];\n\t\tif (!attachments) return;\n\t\tfor (let key in attachments) {\n\t\t\tthis.sortPathConstraintAttachmentWith(attachments[key], slotBone);\n\t\t}\n\t}\n\n\tsortPathConstraintAttachmentWith(attachment: Attachment, slotBone: Bone) {\n\t\tif (!(attachment instanceof PathAttachment)) return;\n\t\tlet pathBones = (<PathAttachment>attachment).bones;\n\t\tif (!pathBones)\n\t\t\tthis.sortBone(slotBone);\n\t\telse {\n\t\t\tlet bones = this.bones;\n\t\t\tfor (let i = 0, n = pathBones.length; i < n;) {\n\t\t\t\tlet nn = pathBones[i++];\n\t\t\t\tnn += i;\n\t\t\t\twhile (i < nn)\n\t\t\t\t\tthis.sortBone(bones[pathBones[i++]]);\n\t\t\t}\n\t\t}\n\t}\n\n\tsortBone(bone: Bone) {\n\t\tif (bone.sorted) return;\n\t\tlet parent = bone.parent;\n\t\tif (parent) this.sortBone(parent);\n\t\tbone.sorted = true;\n\t\tthis._updateCache.push(bone);\n\t}\n\n\tsortReset(bones: Array<Bone>) {\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\t\t\tif (!bone.active) continue;\n\t\t\tif (bone.sorted) this.sortReset(bone.children);\n\t\t\tbone.sorted = false;\n\t\t}\n\t}\n\n\t/** Updates the world transform for each bone and applies all constraints.\n\t *\n\t * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n\t * Runtimes Guide. */\n\tupdateWorldTransform() {\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\t\t\tbone.ax = bone.x;\n\t\t\tbone.ay = bone.y;\n\t\t\tbone.arotation = bone.rotation;\n\t\t\tbone.ascaleX = bone.scaleX;\n\t\t\tbone.ascaleY = bone.scaleY;\n\t\t\tbone.ashearX = bone.shearX;\n\t\t\tbone.ashearY = bone.shearY;\n\t\t}\n\n\t\tlet updateCache = this._updateCache;\n\t\tfor (let i = 0, n = updateCache.length; i < n; i++)\n\t\t\tupdateCache[i].update();\n\t}\n\n\tupdateWorldTransformWith(parent: Bone) {\n\t\t// Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.\n\t\tlet rootBone = this.getRootBone();\n\t\tlet pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n\t\trootBone.worldX = pa * this.x + pb * this.y + parent.worldX;\n\t\trootBone.worldY = pc * this.x + pd * this.y + parent.worldY;\n\n\t\tlet rotationY = rootBone.rotation + 90 + rootBone.shearY;\n\t\tlet la = MathUtils.cosDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\n\t\tlet lb = MathUtils.cosDeg(rotationY) * rootBone.scaleY;\n\t\tlet lc = MathUtils.sinDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\n\t\tlet ld = MathUtils.sinDeg(rotationY) * rootBone.scaleY;\n\t\trootBone.a = (pa * la + pb * lc) * this.scaleX;\n\t\trootBone.b = (pa * lb + pb * ld) * this.scaleX;\n\t\trootBone.c = (pc * la + pd * lc) * this.scaleY;\n\t\trootBone.d = (pc * lb + pd * ld) * this.scaleY;\n\n\t\t// Update everything except root bone.\n\t\tlet updateCache = this._updateCache;\n\t\tfor (let i = 0, n = updateCache.length; i < n; i++) {\n\t\t\tlet updatable = updateCache[i];\n\t\t\tif (updatable != rootBone) updatable.update();\n\t\t}\n\t}\n\n\t/** Sets the bones, constraints, and slots to their setup pose values. */\n\tsetToSetupPose() {\n\t\tthis.setBonesToSetupPose();\n\t\tthis.setSlotsToSetupPose();\n\t}\n\n\t/** Sets the bones and constraints to their setup pose values. */\n\tsetBonesToSetupPose() {\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++)\n\t\t\tbones[i].setToSetupPose();\n\n\t\tlet ikConstraints = this.ikConstraints;\n\t\tfor (let i = 0, n = ikConstraints.length; i < n; i++) {\n\t\t\tlet constraint = ikConstraints[i];\n\t\t\tconstraint.mix = constraint.data.mix;\n\t\t\tconstraint.softness = constraint.data.softness;\n\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\n\t\t\tconstraint.compress = constraint.data.compress;\n\t\t\tconstraint.stretch = constraint.data.stretch;\n\t\t}\n\n\t\tlet transformConstraints = this.transformConstraints;\n\t\tfor (let i = 0, n = transformConstraints.length; i < n; i++) {\n\t\t\tlet constraint = transformConstraints[i];\n\t\t\tlet data = constraint.data;\n\t\t\tconstraint.mixRotate = data.mixRotate;\n\t\t\tconstraint.mixX = data.mixX;\n\t\t\tconstraint.mixY = data.mixY;\n\t\t\tconstraint.mixScaleX = data.mixScaleX;\n\t\t\tconstraint.mixScaleY = data.mixScaleY;\n\t\t\tconstraint.mixShearY = data.mixShearY;\n\t\t}\n\n\t\tlet pathConstraints = this.pathConstraints;\n\t\tfor (let i = 0, n = pathConstraints.length; i < n; i++) {\n\t\t\tlet constraint = pathConstraints[i];\n\t\t\tlet data = constraint.data;\n\t\t\tconstraint.position = data.position;\n\t\t\tconstraint.spacing = data.spacing;\n\t\t\tconstraint.mixRotate = data.mixRotate;\n\t\t\tconstraint.mixX = data.mixX;\n\t\t\tconstraint.mixY = data.mixY;\n\t\t}\n\t}\n\n\t/** Sets the slots and draw order to their setup pose values. */\n\tsetSlotsToSetupPose() {\n\t\tlet slots = this.slots;\n\t\tUtils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\n\t\tfor (let i = 0, n = slots.length; i < n; i++)\n\t\t\tslots[i].setToSetupPose();\n\t}\n\n\t/** @returns May return null. */\n\tgetRootBone() {\n\t\tif (this.bones.length == 0) return null;\n\t\treturn this.bones[0];\n\t}\n\n\t/** @returns May be null. */\n\tfindBone(boneName: string) {\n\t\tif (!boneName) throw new Error(\"boneName cannot be null.\");\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\t\t\tif (bone.data.name == boneName) return bone;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** @returns -1 if the bone was not found. */\n\tfindBoneIndex(boneName: string) {\n\t\tif (!boneName) throw new Error(\"boneName cannot be null.\");\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++)\n\t\t\tif (bones[i].data.name == boneName) return i;\n\t\treturn -1;\n\t}\n\n\t/** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n\t * repeatedly.\n\t * @returns May be null. */\n\tfindSlot(slotName: string) {\n\t\tif (!slotName) throw new Error(\"slotName cannot be null.\");\n\t\tlet slots = this.slots;\n\t\tfor (let i = 0, n = slots.length; i < n; i++) {\n\t\t\tlet slot = slots[i];\n\t\t\tif (slot.data.name == slotName) return slot;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** @returns -1 if the bone was not found. */\n\tfindSlotIndex(slotName: string) {\n\t\tif (!slotName) throw new Error(\"slotName cannot be null.\");\n\t\tlet slots = this.slots;\n\t\tfor (let i = 0, n = slots.length; i < n; i++)\n\t\t\tif (slots[i].data.name == slotName) return i;\n\t\treturn -1;\n\t}\n\n\t/** Sets a skin by name.\n\t *\n\t * See {@link #setSkin()}. */\n\tsetSkinByName(skinName: string) {\n\t\tlet skin = this.data.findSkin(skinName);\n\t\tif (!skin) throw new Error(\"Skin not found: \" + skinName);\n\t\tthis.setSkin(skin);\n\t}\n\n\t/** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\n\t * skin is changed, {@link #updateCache()} is called.\n\t *\n\t * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n\t * old skin, each slot's setup mode attachment is attached from the new skin.\n\t *\n\t * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n\t * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\n\t * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\n\t * @param newSkin May be null. */\n\tsetSkin(newSkin: Skin) {\n\t\tif (newSkin == this.skin) return;\n\t\tif (newSkin) {\n\t\t\tif (this.skin)\n\t\t\t\tnewSkin.attachAll(this, this.skin);\n\t\t\telse {\n\t\t\t\tlet slots = this.slots;\n\t\t\t\tfor (let i = 0, n = slots.length; i < n; i++) {\n\t\t\t\t\tlet slot = slots[i];\n\t\t\t\t\tlet name = slot.data.attachmentName;\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tlet attachment: Attachment = newSkin.getAttachment(i, name);\n\t\t\t\t\t\tif (attachment) slot.setAttachment(attachment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.skin = newSkin;\n\t\tthis.updateCache();\n\t}\n\n\n\t/** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\n\t * name.\n\t *\n\t * See {@link #getAttachment()}.\n\t * @returns May be null. */\n\tgetAttachmentByName(slotName: string, attachmentName: string): Attachment {\n\t\treturn this.getAttachment(this.data.findSlotIndex(slotName), attachmentName);\n\t}\n\n\t/** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\n\t * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\n\t *\n\t * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\n\t * @returns May be null. */\n\tgetAttachment(slotIndex: number, attachmentName: string): Attachment {\n\t\tif (!attachmentName) throw new Error(\"attachmentName cannot be null.\");\n\t\tif (this.skin) {\n\t\t\tlet attachment: Attachment = this.skin.getAttachment(slotIndex, attachmentName);\n\t\t\tif (attachment) return attachment;\n\t\t}\n\t\tif (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n\t\treturn null;\n\t}\n\n\t/** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\n\t * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.\n\t * @param attachmentName May be null to clear the slot's attachment. */\n\tsetAttachment(slotName: string, attachmentName: string) {\n\t\tif (!slotName) throw new Error(\"slotName cannot be null.\");\n\t\tlet slots = this.slots;\n\t\tfor (let i = 0, n = slots.length; i < n; i++) {\n\t\t\tlet slot = slots[i];\n\t\t\tif (slot.data.name == slotName) {\n\t\t\t\tlet attachment: Attachment = null;\n\t\t\t\tif (attachmentName) {\n\t\t\t\t\tattachment = this.getAttachment(i, attachmentName);\n\t\t\t\t\tif (!attachment) throw new Error(\"Attachment not found: \" + attachmentName + \", for slot: \" + slotName);\n\t\t\t\t}\n\t\t\t\tslot.setAttachment(attachment);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthrow new Error(\"Slot not found: \" + slotName);\n\t}\n\n\n\t/** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n\t * than to call it repeatedly.\n\t * @return May be null. */\n\tfindIkConstraint(constraintName: string) {\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\n\t\tlet ikConstraints = this.ikConstraints;\n\t\tfor (let i = 0, n = ikConstraints.length; i < n; i++) {\n\t\t\tlet ikConstraint = ikConstraints[i];\n\t\t\tif (ikConstraint.data.name == constraintName) return ikConstraint;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n\t * this method than to call it repeatedly.\n\t * @return May be null. */\n\tfindTransformConstraint(constraintName: string) {\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\n\t\tlet transformConstraints = this.transformConstraints;\n\t\tfor (let i = 0, n = transformConstraints.length; i < n; i++) {\n\t\t\tlet constraint = transformConstraints[i];\n\t\t\tif (constraint.data.name == constraintName) return constraint;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n\t * than to call it repeatedly.\n\t * @return May be null. */\n\tfindPathConstraint(constraintName: string) {\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\n\t\tlet pathConstraints = this.pathConstraints;\n\t\tfor (let i = 0, n = pathConstraints.length; i < n; i++) {\n\t\t\tlet constraint = pathConstraints[i];\n\t\t\tif (constraint.data.name == constraintName) return constraint;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n\t * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n\t * @param size An output value, the width and height of the AABB.\n\t * @param temp Working memory to temporarily store attachments' computed world vertices. */\n\tgetBounds(offset: Vector2, size: Vector2, temp: Array<number> = new Array<number>(2)) {\n\t\tif (!offset) throw new Error(\"offset cannot be null.\");\n\t\tif (!size) throw new Error(\"size cannot be null.\");\n\t\tlet drawOrder = this.drawOrder;\n\t\tlet minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\n\t\t\tlet slot = drawOrder[i];\n\t\t\tif (!slot.bone.active) continue;\n\t\t\tlet verticesLength = 0;\n\t\t\tlet vertices: NumberArrayLike = null;\n\t\t\tlet attachment = slot.getAttachment();\n\t\t\tif (attachment instanceof RegionAttachment) {\n\t\t\t\tverticesLength = 8;\n\t\t\t\tvertices = Utils.setArraySize(temp, verticesLength, 0);\n\t\t\t\t(<RegionAttachment>attachment).computeWorldVertices(slot.bone, vertices, 0, 2);\n\t\t\t} else if (attachment instanceof MeshAttachment) {\n\t\t\t\tlet mesh = (<MeshAttachment>attachment);\n\t\t\t\tverticesLength = mesh.worldVerticesLength;\n\t\t\t\tvertices = Utils.setArraySize(temp, verticesLength, 0);\n\t\t\t\tmesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\n\t\t\t}\n\t\t\tif (vertices) {\n\t\t\t\tfor (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\n\t\t\t\t\tlet x = vertices[ii], y = vertices[ii + 1];\n\t\t\t\t\tminX = Math.min(minX, x);\n\t\t\t\t\tminY = Math.min(minY, y);\n\t\t\t\t\tmaxX = Math.max(maxX, x);\n\t\t\t\t\tmaxY = Math.max(maxY, y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toffset.set(minX, minY);\n\t\tsize.set(maxX - minX, maxY - minY);\n\t}\n\n\t/** Increments the skeleton's {@link #time}. */\n\tupdate(delta: number) {\n\t\tthis.time += delta;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Animation } from \"./Animation\"\nimport { BoneData } from \"./BoneData\";\nimport { EventData } from \"./EventData\";\nimport { IkConstraintData } from \"./IkConstraintData\";\nimport { PathConstraintData } from \"./PathConstraintData\";\nimport { Skin } from \"./Skin\";\nimport { SlotData } from \"./SlotData\";\nimport { TransformConstraintData } from \"./TransformConstraintData\";\n\n/** Stores the setup pose and all of the stateless data for a skeleton.\n *\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\n * Guide. */\nexport class SkeletonData {\n\n\t/** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */\n\tname: string;\n\n\t/** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\n\tbones = new Array<BoneData>(); // Ordered parents first.\n\n\t/** The skeleton's slots. */\n\tslots = new Array<SlotData>(); // Setup pose draw order.\n\tskins = new Array<Skin>();\n\n\t/** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\n\t *\n\t * See {@link Skeleton#getAttachmentByName()}.\n\t * May be null. */\n\tdefaultSkin: Skin;\n\n\t/** The skeleton's events. */\n\tevents = new Array<EventData>();\n\n\t/** The skeleton's animations. */\n\tanimations = new Array<Animation>();\n\n\t/** The skeleton's IK constraints. */\n\tikConstraints = new Array<IkConstraintData>();\n\n\t/** The skeleton's transform constraints. */\n\ttransformConstraints = new Array<TransformConstraintData>();\n\n\t/** The skeleton's path constraints. */\n\tpathConstraints = new Array<PathConstraintData>();\n\n\t/** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */\n\tx: number;\n\n\t/** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */\n\ty: number;\n\n\t/** The width of the skeleton's axis aligned bounding box in the setup pose. */\n\twidth: number;\n\n\t/** The height of the skeleton's axis aligned bounding box in the setup pose. */\n\theight: number;\n\n\t/** The Spine version used to export the skeleton data, or null. */\n\tversion: string;\n\n\t/** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */\n\thash: string;\n\n\t// Nonessential\n\t/** The dopesheet FPS in Spine. Available only when nonessential data was exported. */\n\tfps = 0;\n\n\t/** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */\n\timagesPath: string;\n\n\t/** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */\n\taudioPath: string;\n\n\t/** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n\t * multiple times.\n\t * @returns May be null. */\n\tfindBone(boneName: string) {\n\t\tif (!boneName) throw new Error(\"boneName cannot be null.\");\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\n\t\t\tlet bone = bones[i];\n\t\t\tif (bone.name == boneName) return bone;\n\t\t}\n\t\treturn null;\n\t}\n\n\tfindBoneIndex(boneName: string) {\n\t\tif (!boneName) throw new Error(\"boneName cannot be null.\");\n\t\tlet bones = this.bones;\n\t\tfor (let i = 0, n = bones.length; i < n; i++)\n\t\t\tif (bones[i].name == boneName) return i;\n\t\treturn -1;\n\t}\n\n\t/** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n\t * multiple times.\n\t * @returns May be null. */\n\tfindSlot(slotName: string) {\n\t\tif (!slotName) throw new Error(\"slotName cannot be null.\");\n\t\tlet slots = this.slots;\n\t\tfor (let i = 0, n = slots.length; i < n; i++) {\n\t\t\tlet slot = slots[i];\n\t\t\tif (slot.name == slotName) return slot;\n\t\t}\n\t\treturn null;\n\t}\n\n\tfindSlotIndex(slotName: string) {\n\t\tif (!slotName) throw new Error(\"slotName cannot be null.\");\n\t\tlet slots = this.slots;\n\t\tfor (let i = 0, n = slots.length; i < n; i++)\n\t\t\tif (slots[i].name == slotName) return i;\n\t\treturn -1;\n\t}\n\n\t/** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\n\t * multiple times.\n\t * @returns May be null. */\n\tfindSkin(skinName: string) {\n\t\tif (!skinName) throw new Error(\"skinName cannot be null.\");\n\t\tlet skins = this.skins;\n\t\tfor (let i = 0, n = skins.length; i < n; i++) {\n\t\t\tlet skin = skins[i];\n\t\t\tif (skin.name == skinName) return skin;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\n\t * multiple times.\n\t * @returns May be null. */\n\tfindEvent(eventDataName: string) {\n\t\tif (!eventDataName) throw new Error(\"eventDataName cannot be null.\");\n\t\tlet events = this.events;\n\t\tfor (let i = 0, n = events.length; i < n; i++) {\n\t\t\tlet event = events[i];\n\t\t\tif (event.name == eventDataName) return event;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\n\t * call it multiple times.\n\t * @returns May be null. */\n\tfindAnimation(animationName: string) {\n\t\tif (!animationName) throw new Error(\"animationName cannot be null.\");\n\t\tlet animations = this.animations;\n\t\tfor (let i = 0, n = animations.length; i < n; i++) {\n\t\t\tlet animation = animations[i];\n\t\t\tif (animation.name == animationName) return animation;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n\t * than to call it multiple times.\n\t * @return May be null. */\n\tfindIkConstraint(constraintName: string) {\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\n\t\tlet ikConstraints = this.ikConstraints;\n\t\tfor (let i = 0, n = ikConstraints.length; i < n; i++) {\n\t\t\tlet constraint = ikConstraints[i];\n\t\t\tif (constraint.name == constraintName) return constraint;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n\t * this method than to call it multiple times.\n\t * @return May be null. */\n\tfindTransformConstraint(constraintName: string) {\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\n\t\tlet transformConstraints = this.transformConstraints;\n\t\tfor (let i = 0, n = transformConstraints.length; i < n; i++) {\n\t\t\tlet constraint = transformConstraints[i];\n\t\t\tif (constraint.name == constraintName) return constraint;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n\t * than to call it multiple times.\n\t * @return May be null. */\n\tfindPathConstraint(constraintName: string) {\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\n\t\tlet pathConstraints = this.pathConstraints;\n\t\tfor (let i = 0, n = pathConstraints.length; i < n; i++) {\n\t\t\tlet constraint = pathConstraints[i];\n\t\t\tif (constraint.name == constraintName) return constraint;\n\t\t}\n\t\treturn null;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Attachment } from \"./attachments/Attachment\";\nimport { MeshAttachment } from \"./attachments/MeshAttachment\";\nimport { BoneData } from \"./BoneData\";\nimport { ConstraintData } from \"./ConstraintData\";\nimport { Skeleton } from \"./Skeleton\";\nimport { StringMap } from \"./Utils\";\n\n/** Stores an entry in the skin consisting of the slot index, name, and attachment **/\nexport class SkinEntry {\n\tconstructor(public slotIndex: number, public name: string, public attachment: Attachment) { }\n}\n\n/** Stores attachments by slot index and attachment name.\n *\n * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide. */\nexport class Skin {\n\t/** The skin's name, which is unique across all skins in the skeleton. */\n\tname: string;\n\n\tattachments = new Array<StringMap<Attachment>>();\n\tbones = Array<BoneData>();\n\tconstraints = new Array<ConstraintData>();\n\n\tconstructor(name: string) {\n\t\tif (!name) throw new Error(\"name cannot be null.\");\n\t\tthis.name = name;\n\t}\n\n\t/** Adds an attachment to the skin for the specified slot index and name. */\n\tsetAttachment(slotIndex: number, name: string, attachment: Attachment) {\n\t\tif (!attachment) throw new Error(\"attachment cannot be null.\");\n\t\tlet attachments = this.attachments;\n\t\tif (slotIndex >= attachments.length) attachments.length = slotIndex + 1;\n\t\tif (!attachments[slotIndex]) attachments[slotIndex] = {};\n\t\tattachments[slotIndex][name] = attachment;\n\t}\n\n\t/** Adds all attachments, bones, and constraints from the specified skin to this skin. */\n\taddSkin(skin: Skin) {\n\t\tfor (let i = 0; i < skin.bones.length; i++) {\n\t\t\tlet bone = skin.bones[i];\n\t\t\tlet contained = false;\n\t\t\tfor (let ii = 0; ii < this.bones.length; ii++) {\n\t\t\t\tif (this.bones[ii] == bone) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!contained) this.bones.push(bone);\n\t\t}\n\n\t\tfor (let i = 0; i < skin.constraints.length; i++) {\n\t\t\tlet constraint = skin.constraints[i];\n\t\t\tlet contained = false;\n\t\t\tfor (let ii = 0; ii < this.constraints.length; ii++) {\n\t\t\t\tif (this.constraints[ii] == constraint) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!contained) this.constraints.push(constraint);\n\t\t}\n\n\t\tlet attachments = skin.getAttachments();\n\t\tfor (let i = 0; i < attachments.length; i++) {\n\t\t\tvar attachment = attachments[i];\n\t\t\tthis.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n\t\t}\n\t}\n\n\t/** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\n\t * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */\n\tcopySkin(skin: Skin) {\n\t\tfor (let i = 0; i < skin.bones.length; i++) {\n\t\t\tlet bone = skin.bones[i];\n\t\t\tlet contained = false;\n\t\t\tfor (let ii = 0; ii < this.bones.length; ii++) {\n\t\t\t\tif (this.bones[ii] == bone) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!contained) this.bones.push(bone);\n\t\t}\n\n\t\tfor (let i = 0; i < skin.constraints.length; i++) {\n\t\t\tlet constraint = skin.constraints[i];\n\t\t\tlet contained = false;\n\t\t\tfor (let ii = 0; ii < this.constraints.length; ii++) {\n\t\t\t\tif (this.constraints[ii] == constraint) {\n\t\t\t\t\tcontained = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!contained) this.constraints.push(constraint);\n\t\t}\n\n\t\tlet attachments = skin.getAttachments();\n\t\tfor (let i = 0; i < attachments.length; i++) {\n\t\t\tvar attachment = attachments[i];\n\t\t\tif (!attachment.attachment) continue;\n\t\t\tif (attachment.attachment instanceof MeshAttachment) {\n\t\t\t\tattachment.attachment = attachment.attachment.newLinkedMesh();\n\t\t\t\tthis.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n\t\t\t} else {\n\t\t\t\tattachment.attachment = attachment.attachment.copy();\n\t\t\t\tthis.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Returns the attachment for the specified slot index and name, or null. */\n\tgetAttachment(slotIndex: number, name: string): Attachment {\n\t\tlet dictionary = this.attachments[slotIndex];\n\t\treturn dictionary ? dictionary[name] : null;\n\t}\n\n\t/** Removes the attachment in the skin for the specified slot index and name, if any. */\n\tremoveAttachment(slotIndex: number, name: string) {\n\t\tlet dictionary = this.attachments[slotIndex];\n\t\tif (dictionary) dictionary[name] = null;\n\t}\n\n\t/** Returns all attachments in this skin. */\n\tgetAttachments(): Array<SkinEntry> {\n\t\tlet entries = new Array<SkinEntry>();\n\t\tfor (var i = 0; i < this.attachments.length; i++) {\n\t\t\tlet slotAttachments = this.attachments[i];\n\t\t\tif (slotAttachments) {\n\t\t\t\tfor (let name in slotAttachments) {\n\t\t\t\t\tlet attachment = slotAttachments[name];\n\t\t\t\t\tif (attachment) entries.push(new SkinEntry(i, name, attachment));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn entries;\n\t}\n\n\t/** Returns all attachments in this skin for the specified slot index. */\n\tgetAttachmentsForSlot(slotIndex: number, attachments: Array<SkinEntry>) {\n\t\tlet slotAttachments = this.attachments[slotIndex];\n\t\tif (slotAttachments) {\n\t\t\tfor (let name in slotAttachments) {\n\t\t\t\tlet attachment = slotAttachments[name];\n\t\t\t\tif (attachment) attachments.push(new SkinEntry(slotIndex, name, attachment));\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Clears all attachments, bones, and constraints. */\n\tclear() {\n\t\tthis.attachments.length = 0;\n\t\tthis.bones.length = 0;\n\t\tthis.constraints.length = 0;\n\t}\n\n\t/** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\n\tattachAll(skeleton: Skeleton, oldSkin: Skin) {\n\t\tlet slotIndex = 0;\n\t\tfor (let i = 0; i < skeleton.slots.length; i++) {\n\t\t\tlet slot = skeleton.slots[i];\n\t\t\tlet slotAttachment = slot.getAttachment();\n\t\t\tif (slotAttachment && slotIndex < oldSkin.attachments.length) {\n\t\t\t\tlet dictionary = oldSkin.attachments[slotIndex];\n\t\t\t\tfor (let key in dictionary) {\n\t\t\t\t\tlet skinAttachment: Attachment = dictionary[key];\n\t\t\t\t\tif (slotAttachment == skinAttachment) {\n\t\t\t\t\t\tlet attachment = this.getAttachment(slotIndex, key);\n\t\t\t\t\t\tif (attachment) slot.setAttachment(attachment);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tslotIndex++;\n\t\t}\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { BoneData } from \"./BoneData\";\nimport { Color } from \"./Utils\";\n\n/** Stores the setup pose for a {@link Slot}. */\nexport class SlotData {\n\t/** The index of the slot in {@link Skeleton#getSlots()}. */\n\tindex: number;\n\n\t/** The name of the slot, which is unique across all slots in the skeleton. */\n\tname: string;\n\n\t/** The bone this slot belongs to. */\n\tboneData: BoneData;\n\n\t/** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n\t * color tinting. */\n\tcolor = new Color(1, 1, 1, 1);\n\n\t/** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n\t * color's alpha is not used. */\n\tdarkColor: Color;\n\n\t/** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */\n\tattachmentName: string;\n\n\t/** The blend mode for drawing the slot's attachment. */\n\tblendMode: BlendMode;\n\n\tconstructor(index: number, name: string, boneData: BoneData) {\n\t\tif (index < 0) throw new Error(\"index must be >= 0.\");\n\t\tif (!name) throw new Error(\"name cannot be null.\");\n\t\tif (!boneData) throw new Error(\"boneData cannot be null.\");\n\t\tthis.index = index;\n\t\tthis.name = name;\n\t\tthis.boneData = boneData;\n\t}\n}\n\n/** Determines how images are blended with existing pixels when drawn. */\nexport enum BlendMode { Normal, Additive, Multiply, Screen }\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { ConstraintData } from \"./ConstraintData\";\nimport { BoneData } from \"./BoneData\";\n\n/** Stores the setup pose for a {@link TransformConstraint}.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */\nexport class TransformConstraintData extends ConstraintData {\n\n\t/** The bones that will be modified by this transform constraint. */\n\tbones = new Array<BoneData>();\n\n\t/** The target bone whose world transform will be copied to the constrained bones. */\n\ttarget: BoneData;\n\n\tmixRotate = 0;\n\tmixX = 0;\n\tmixY = 0;\n\tmixScaleX = 0;\n\tmixScaleY = 0;\n\tmixShearY = 0;\n\n\t/** An offset added to the constrained bone rotation. */\n\toffsetRotation = 0;\n\n\t/** An offset added to the constrained bone X translation. */\n\toffsetX = 0;\n\n\t/** An offset added to the constrained bone Y translation. */\n\toffsetY = 0;\n\n\t/** An offset added to the constrained bone scaleX. */\n\toffsetScaleX = 0;\n\n\t/** An offset added to the constrained bone scaleY. */\n\toffsetScaleY = 0;\n\n\t/** An offset added to the constrained bone shearY. */\n\toffsetShearY = 0;\n\n\trelative = false;\n\tlocal = false;\n\n\tconstructor(name: string) {\n\t\tsuper(name, 0, false);\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Animation, Timeline, AttachmentTimeline, RGBATimeline, RGBTimeline, RGBA2Timeline, RGB2Timeline, AlphaTimeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, CurveTimeline1, CurveTimeline2, CurveTimeline } from \"./Animation\";\nimport { VertexAttachment, Attachment } from \"./attachments/Attachment\";\nimport { AttachmentLoader } from \"./attachments/AttachmentLoader\";\nimport { MeshAttachment } from \"./attachments/MeshAttachment\";\nimport { BoneData } from \"./BoneData\";\nimport { Event } from \"./Event\";\nimport { EventData } from \"./EventData\";\nimport { IkConstraintData } from \"./IkConstraintData\";\nimport { PathConstraintData, PositionMode, SpacingMode } from \"./PathConstraintData\";\nimport { SkeletonData } from \"./SkeletonData\";\nimport { Skin } from \"./Skin\";\nimport { SlotData } from \"./SlotData\";\nimport { TransformConstraintData } from \"./TransformConstraintData\";\nimport { Color, Utils } from \"./Utils\";\n\n/** Loads skeleton data in the Spine binary format.\n *\n * See [Spine binary format](http://esotericsoftware.com/spine-binary-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */\nexport class SkeletonBinary {\n\t/** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n\t * runtime than were used in Spine.\n\t *\n\t * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\n\tscale = 1;\n\n\tattachmentLoader: AttachmentLoader;\n\tprivate linkedMeshes = new Array<LinkedMesh>();\n\n\tconstructor(attachmentLoader: AttachmentLoader) {\n\t\tthis.attachmentLoader = attachmentLoader;\n\t}\n\n\treadSkeletonData(binary: Uint8Array): SkeletonData {\n\t\tlet scale = this.scale;\n\n\t\tlet skeletonData = new SkeletonData();\n\t\tskeletonData.name = \"\"; // BOZO\n\n\t\tlet input = new BinaryInput(binary);\n\n\t\tlet lowHash = input.readInt32();\n\t\tlet highHash = input.readInt32();\n\t\tskeletonData.hash = highHash == 0 && lowHash == 0 ? null : highHash.toString(16) + lowHash.toString(16);\n\t\tskeletonData.version = input.readString();\n\t\tskeletonData.x = input.readFloat();\n\t\tskeletonData.y = input.readFloat();\n\t\tskeletonData.width = input.readFloat();\n\t\tskeletonData.height = input.readFloat();\n\n\t\tlet nonessential = input.readBoolean();\n\t\tif (nonessential) {\n\t\t\tskeletonData.fps = input.readFloat();\n\n\t\t\tskeletonData.imagesPath = input.readString();\n\t\t\tskeletonData.audioPath = input.readString();\n\t\t}\n\n\t\tlet n = 0;\n\t\t// Strings.\n\t\tn = input.readInt(true)\n\t\tfor (let i = 0; i < n; i++)\n\t\t\tinput.strings.push(input.readString());\n\n\t\t// Bones.\n\t\tn = input.readInt(true)\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tlet name = input.readString();\n\t\t\tlet parent = i == 0 ? null : skeletonData.bones[input.readInt(true)];\n\t\t\tlet data = new BoneData(i, name, parent);\n\t\t\tdata.rotation = input.readFloat();\n\t\t\tdata.x = input.readFloat() * scale;\n\t\t\tdata.y = input.readFloat() * scale;\n\t\t\tdata.scaleX = input.readFloat();\n\t\t\tdata.scaleY = input.readFloat();\n\t\t\tdata.shearX = input.readFloat();\n\t\t\tdata.shearY = input.readFloat();\n\t\t\tdata.length = input.readFloat() * scale;\n\t\t\tdata.transformMode = input.readInt(true);\n\t\t\tdata.skinRequired = input.readBoolean();\n\t\t\tif (nonessential) Color.rgba8888ToColor(data.color, input.readInt32());\n\t\t\tskeletonData.bones.push(data);\n\t\t}\n\n\t\t// Slots.\n\t\tn = input.readInt(true);\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tlet slotName = input.readString();\n\t\t\tlet boneData = skeletonData.bones[input.readInt(true)];\n\t\t\tlet data = new SlotData(i, slotName, boneData);\n\t\t\tColor.rgba8888ToColor(data.color, input.readInt32());\n\n\t\t\tlet darkColor = input.readInt32();\n\t\t\tif (darkColor != -1) Color.rgb888ToColor(data.darkColor = new Color(), darkColor);\n\n\t\t\tdata.attachmentName = input.readStringRef();\n\t\t\tdata.blendMode = input.readInt(true);\n\t\t\tskeletonData.slots.push(data);\n\t\t}\n\n\t\t// IK constraints.\n\t\tn = input.readInt(true);\n\t\tfor (let i = 0, nn; i < n; i++) {\n\t\t\tlet data = new IkConstraintData(input.readString());\n\t\t\tdata.order = input.readInt(true);\n\t\t\tdata.skinRequired = input.readBoolean();\n\t\t\tnn = input.readInt(true);\n\t\t\tfor (let ii = 0; ii < nn; ii++)\n\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\n\t\t\tdata.target = skeletonData.bones[input.readInt(true)];\n\t\t\tdata.mix = input.readFloat();\n\t\t\tdata.softness = input.readFloat() * scale;\n\t\t\tdata.bendDirection = input.readByte();\n\t\t\tdata.compress = input.readBoolean();\n\t\t\tdata.stretch = input.readBoolean();\n\t\t\tdata.uniform = input.readBoolean();\n\t\t\tskeletonData.ikConstraints.push(data);\n\t\t}\n\n\t\t// Transform constraints.\n\t\tn = input.readInt(true);\n\t\tfor (let i = 0, nn; i < n; i++) {\n\t\t\tlet data = new TransformConstraintData(input.readString());\n\t\t\tdata.order = input.readInt(true);\n\t\t\tdata.skinRequired = input.readBoolean();\n\t\t\tnn = input.readInt(true);\n\t\t\tfor (let ii = 0; ii < nn; ii++)\n\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\n\t\t\tdata.target = skeletonData.bones[input.readInt(true)];\n\t\t\tdata.local = input.readBoolean();\n\t\t\tdata.relative = input.readBoolean();\n\t\t\tdata.offsetRotation = input.readFloat();\n\t\t\tdata.offsetX = input.readFloat() * scale;\n\t\t\tdata.offsetY = input.readFloat() * scale;\n\t\t\tdata.offsetScaleX = input.readFloat();\n\t\t\tdata.offsetScaleY = input.readFloat();\n\t\t\tdata.offsetShearY = input.readFloat();\n\t\t\tdata.mixRotate = input.readFloat();\n\t\t\tdata.mixX = input.readFloat();\n\t\t\tdata.mixY = input.readFloat();\n\t\t\tdata.mixScaleX = input.readFloat();\n\t\t\tdata.mixScaleY = input.readFloat();\n\t\t\tdata.mixShearY = input.readFloat();\n\t\t\tskeletonData.transformConstraints.push(data);\n\t\t}\n\n\t\t// Path constraints.\n\t\tn = input.readInt(true);\n\t\tfor (let i = 0, nn; i < n; i++) {\n\t\t\tlet data = new PathConstraintData(input.readString());\n\t\t\tdata.order = input.readInt(true);\n\t\t\tdata.skinRequired = input.readBoolean();\n\t\t\tnn = input.readInt(true);\n\t\t\tfor (let ii = 0; ii < nn; ii++)\n\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\n\t\t\tdata.target = skeletonData.slots[input.readInt(true)];\n\t\t\tdata.positionMode = input.readInt(true);\n\t\t\tdata.spacingMode = input.readInt(true);\n\t\t\tdata.rotateMode = input.readInt(true);\n\t\t\tdata.offsetRotation = input.readFloat();\n\t\t\tdata.position = input.readFloat();\n\t\t\tif (data.positionMode == PositionMode.Fixed) data.position *= scale;\n\t\t\tdata.spacing = input.readFloat();\n\t\t\tif (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\n\t\t\tdata.mixRotate = input.readFloat();\n\t\t\tdata.mixX = input.readFloat();\n\t\t\tdata.mixY = input.readFloat();\n\t\t\tskeletonData.pathConstraints.push(data);\n\t\t}\n\n\t\t// Default skin.\n\t\tlet defaultSkin = this.readSkin(input, skeletonData, true, nonessential);\n\t\tif (defaultSkin) {\n\t\t\tskeletonData.defaultSkin = defaultSkin;\n\t\t\tskeletonData.skins.push(defaultSkin);\n\t\t}\n\n\t\t// Skins.\n\t\t{\n\t\t\tlet i = skeletonData.skins.length;\n\t\t\tUtils.setArraySize(skeletonData.skins, n = i + input.readInt(true));\n\t\t\tfor (; i < n; i++)\n\t\t\t\tskeletonData.skins[i] = this.readSkin(input, skeletonData, false, nonessential);\n\t\t}\n\n\t\t// Linked meshes.\n\t\tn = this.linkedMeshes.length;\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tlet linkedMesh = this.linkedMeshes[i];\n\t\t\tlet skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n\t\t\tlet parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n\t\t\tlinkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent as VertexAttachment : linkedMesh.mesh;\n\t\t\tlinkedMesh.mesh.setParentMesh(parent as MeshAttachment);\n\t\t\tlinkedMesh.mesh.updateUVs();\n\t\t}\n\t\tthis.linkedMeshes.length = 0;\n\n\t\t// Events.\n\t\tn = input.readInt(true);\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tlet data = new EventData(input.readStringRef());\n\t\t\tdata.intValue = input.readInt(false);\n\t\t\tdata.floatValue = input.readFloat();\n\t\t\tdata.stringValue = input.readString();\n\t\t\tdata.audioPath = input.readString();\n\t\t\tif (data.audioPath) {\n\t\t\t\tdata.volume = input.readFloat();\n\t\t\t\tdata.balance = input.readFloat();\n\t\t\t}\n\t\t\tskeletonData.events.push(data);\n\t\t}\n\n\t\t// Animations.\n\t\tn = input.readInt(true);\n\t\tfor (let i = 0; i < n; i++)\n\t\t\tskeletonData.animations.push(this.readAnimation(input, input.readString(), skeletonData));\n\t\treturn skeletonData;\n\t}\n\n\tprivate readSkin(input: BinaryInput, skeletonData: SkeletonData, defaultSkin: boolean, nonessential: boolean): Skin {\n\t\tlet skin = null;\n\t\tlet slotCount = 0;\n\n\t\tif (defaultSkin) {\n\t\t\tslotCount = input.readInt(true)\n\t\t\tif (slotCount == 0) return null;\n\t\t\tskin = new Skin(\"default\");\n\t\t} else {\n\t\t\tskin = new Skin(input.readStringRef());\n\t\t\tskin.bones.length = input.readInt(true);\n\t\t\tfor (let i = 0, n = skin.bones.length; i < n; i++)\n\t\t\t\tskin.bones[i] = skeletonData.bones[input.readInt(true)];\n\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++)\n\t\t\t\tskin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++)\n\t\t\t\tskin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++)\n\t\t\t\tskin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);\n\n\t\t\tslotCount = input.readInt(true);\n\t\t}\n\n\t\tfor (let i = 0; i < slotCount; i++) {\n\t\t\tlet slotIndex = input.readInt(true);\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\tlet name = input.readStringRef();\n\t\t\t\tlet attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name, nonessential);\n\t\t\t\tif (attachment) skin.setAttachment(slotIndex, name, attachment);\n\t\t\t}\n\t\t}\n\t\treturn skin;\n\t}\n\n\tprivate readAttachment(input: BinaryInput, skeletonData: SkeletonData, skin: Skin, slotIndex: number, attachmentName: string, nonessential: boolean): Attachment {\n\t\tlet scale = this.scale;\n\n\t\tlet name = input.readStringRef();\n\t\tif (!name) name = attachmentName;\n\n\t\tswitch (input.readByte()) {\n\t\t\tcase AttachmentType.Region: {\n\t\t\t\tlet path = input.readStringRef();\n\t\t\t\tlet rotation = input.readFloat();\n\t\t\t\tlet x = input.readFloat();\n\t\t\t\tlet y = input.readFloat();\n\t\t\t\tlet scaleX = input.readFloat();\n\t\t\t\tlet scaleY = input.readFloat();\n\t\t\t\tlet width = input.readFloat();\n\t\t\t\tlet height = input.readFloat();\n\t\t\t\tlet color = input.readInt32();\n\n\t\t\t\tif (!path) path = name;\n\t\t\t\tlet region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n\t\t\t\tif (!region) return null;\n\t\t\t\tregion.path = path;\n\t\t\t\tregion.x = x * scale;\n\t\t\t\tregion.y = y * scale;\n\t\t\t\tregion.scaleX = scaleX;\n\t\t\t\tregion.scaleY = scaleY;\n\t\t\t\tregion.rotation = rotation;\n\t\t\t\tregion.width = width * scale;\n\t\t\t\tregion.height = height * scale;\n\t\t\t\tColor.rgba8888ToColor(region.color, color);\n\t\t\t\tregion.updateOffset();\n\t\t\t\treturn region;\n\t\t\t}\n\t\t\tcase AttachmentType.BoundingBox: {\n\t\t\t\tlet vertexCount = input.readInt(true);\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\n\n\t\t\t\tlet box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n\t\t\t\tif (!box) return null;\n\t\t\t\tbox.worldVerticesLength = vertexCount << 1;\n\t\t\t\tbox.vertices = vertices.vertices;\n\t\t\t\tbox.bones = vertices.bones;\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(box.color, color);\n\t\t\t\treturn box;\n\t\t\t}\n\t\t\tcase AttachmentType.Mesh: {\n\t\t\t\tlet path = input.readStringRef();\n\t\t\t\tlet color = input.readInt32();\n\t\t\t\tlet vertexCount = input.readInt(true);\n\t\t\t\tlet uvs = this.readFloatArray(input, vertexCount << 1, 1);\n\t\t\t\tlet triangles = this.readShortArray(input);\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\n\t\t\t\tlet hullLength = input.readInt(true);\n\t\t\t\tlet edges = null;\n\t\t\t\tlet width = 0, height = 0;\n\t\t\t\tif (nonessential) {\n\t\t\t\t\tedges = this.readShortArray(input);\n\t\t\t\t\twidth = input.readFloat();\n\t\t\t\t\theight = input.readFloat();\n\t\t\t\t}\n\n\t\t\t\tif (!path) path = name;\n\t\t\t\tlet mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n\t\t\t\tif (!mesh) return null;\n\t\t\t\tmesh.path = path;\n\t\t\t\tColor.rgba8888ToColor(mesh.color, color);\n\t\t\t\tmesh.bones = vertices.bones;\n\t\t\t\tmesh.vertices = vertices.vertices;\n\t\t\t\tmesh.worldVerticesLength = vertexCount << 1;\n\t\t\t\tmesh.triangles = triangles;\n\t\t\t\tmesh.regionUVs = uvs;\n\t\t\t\tmesh.updateUVs();\n\t\t\t\tmesh.hullLength = hullLength << 1;\n\t\t\t\tif (nonessential) {\n\t\t\t\t\tmesh.edges = edges;\n\t\t\t\t\tmesh.width = width * scale;\n\t\t\t\t\tmesh.height = height * scale;\n\t\t\t\t}\n\t\t\t\treturn mesh;\n\t\t\t}\n\t\t\tcase AttachmentType.LinkedMesh: {\n\t\t\t\tlet path = input.readStringRef();\n\t\t\t\tlet color = input.readInt32();\n\t\t\t\tlet skinName = input.readStringRef();\n\t\t\t\tlet parent = input.readStringRef();\n\t\t\t\tlet inheritDeform = input.readBoolean();\n\t\t\t\tlet width = 0, height = 0;\n\t\t\t\tif (nonessential) {\n\t\t\t\t\twidth = input.readFloat();\n\t\t\t\t\theight = input.readFloat();\n\t\t\t\t}\n\n\t\t\t\tif (!path) path = name;\n\t\t\t\tlet mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n\t\t\t\tif (!mesh) return null;\n\t\t\t\tmesh.path = path;\n\t\t\t\tColor.rgba8888ToColor(mesh.color, color);\n\t\t\t\tif (nonessential) {\n\t\t\t\t\tmesh.width = width * scale;\n\t\t\t\t\tmesh.height = height * scale;\n\t\t\t\t}\n\t\t\t\tthis.linkedMeshes.push(new LinkedMesh(mesh, skinName, slotIndex, parent, inheritDeform));\n\t\t\t\treturn mesh;\n\t\t\t}\n\t\t\tcase AttachmentType.Path: {\n\t\t\t\tlet closed = input.readBoolean();\n\t\t\t\tlet constantSpeed = input.readBoolean();\n\t\t\t\tlet vertexCount = input.readInt(true);\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\n\t\t\t\tlet lengths = Utils.newArray(vertexCount / 3, 0);\n\t\t\t\tfor (let i = 0, n = lengths.length; i < n; i++)\n\t\t\t\t\tlengths[i] = input.readFloat() * scale;\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\n\n\t\t\t\tlet path = this.attachmentLoader.newPathAttachment(skin, name);\n\t\t\t\tif (!path) return null;\n\t\t\t\tpath.closed = closed;\n\t\t\t\tpath.constantSpeed = constantSpeed;\n\t\t\t\tpath.worldVerticesLength = vertexCount << 1;\n\t\t\t\tpath.vertices = vertices.vertices;\n\t\t\t\tpath.bones = vertices.bones;\n\t\t\t\tpath.lengths = lengths;\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(path.color, color);\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\tcase AttachmentType.Point: {\n\t\t\t\tlet rotation = input.readFloat();\n\t\t\t\tlet x = input.readFloat();\n\t\t\t\tlet y = input.readFloat();\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\n\n\t\t\t\tlet point = this.attachmentLoader.newPointAttachment(skin, name);\n\t\t\t\tif (!point) return null;\n\t\t\t\tpoint.x = x * scale;\n\t\t\t\tpoint.y = y * scale;\n\t\t\t\tpoint.rotation = rotation;\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(point.color, color);\n\t\t\t\treturn point;\n\t\t\t}\n\t\t\tcase AttachmentType.Clipping: {\n\t\t\t\tlet endSlotIndex = input.readInt(true);\n\t\t\t\tlet vertexCount = input.readInt(true);\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\n\n\t\t\t\tlet clip = this.attachmentLoader.newClippingAttachment(skin, name);\n\t\t\t\tif (!clip) return null;\n\t\t\t\tclip.endSlot = skeletonData.slots[endSlotIndex];\n\t\t\t\tclip.worldVerticesLength = vertexCount << 1;\n\t\t\t\tclip.vertices = vertices.vertices;\n\t\t\t\tclip.bones = vertices.bones;\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(clip.color, color);\n\t\t\t\treturn clip;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate readVertices(input: BinaryInput, vertexCount: number): Vertices {\n\t\tlet scale = this.scale;\n\t\tlet verticesLength = vertexCount << 1;\n\t\tlet vertices = new Vertices();\n\t\tif (!input.readBoolean()) {\n\t\t\tvertices.vertices = this.readFloatArray(input, verticesLength, scale);\n\t\t\treturn vertices;\n\t\t}\n\t\tlet weights = new Array<number>();\n\t\tlet bonesArray = new Array<number>();\n\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\tlet boneCount = input.readInt(true);\n\t\t\tbonesArray.push(boneCount);\n\t\t\tfor (let ii = 0; ii < boneCount; ii++) {\n\t\t\t\tbonesArray.push(input.readInt(true));\n\t\t\t\tweights.push(input.readFloat() * scale);\n\t\t\t\tweights.push(input.readFloat() * scale);\n\t\t\t\tweights.push(input.readFloat());\n\t\t\t}\n\t\t}\n\t\tvertices.vertices = Utils.toFloatArray(weights);\n\t\tvertices.bones = bonesArray;\n\t\treturn vertices;\n\t}\n\n\tprivate readFloatArray(input: BinaryInput, n: number, scale: number): number[] {\n\t\tlet array = new Array<number>(n);\n\t\tif (scale == 1) {\n\t\t\tfor (let i = 0; i < n; i++)\n\t\t\t\tarray[i] = input.readFloat();\n\t\t} else {\n\t\t\tfor (let i = 0; i < n; i++)\n\t\t\t\tarray[i] = input.readFloat() * scale;\n\t\t}\n\t\treturn array;\n\t}\n\n\tprivate readShortArray(input: BinaryInput): number[] {\n\t\tlet n = input.readInt(true);\n\t\tlet array = new Array<number>(n);\n\t\tfor (let i = 0; i < n; i++)\n\t\t\tarray[i] = input.readShort();\n\t\treturn array;\n\t}\n\n\tprivate readAnimation(input: BinaryInput, name: string, skeletonData: SkeletonData): Animation {\n\t\tinput.readInt(true); // Number of timelines.\n\t\tlet timelines = new Array<Timeline>();\n\t\tlet scale = this.scale;\n\t\tlet tempColor1 = new Color();\n\t\tlet tempColor2 = new Color();\n\n\t\t// Slot timelines.\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\tlet slotIndex = input.readInt(true);\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\tlet timelineType = input.readByte();\n\t\t\t\tlet frameCount = input.readInt(true);\n\t\t\t\tlet frameLast = frameCount - 1;\n\t\t\t\tswitch (timelineType) {\n\t\t\t\t\tcase SLOT_ATTACHMENT: {\n\t\t\t\t\t\tlet timeline = new AttachmentTimeline(frameCount, slotIndex);\n\t\t\t\t\t\tfor (let frame = 0; frame < frameCount; frame++)\n\t\t\t\t\t\t\ttimeline.setFrame(frame, input.readFloat(), input.readStringRef());\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SLOT_RGBA: {\n\t\t\t\t\t\tlet bezierCount = input.readInt(true);\n\t\t\t\t\t\tlet timeline = new RGBATimeline(frameCount, bezierCount, slotIndex);\n\n\t\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\t\tlet r = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet g = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet b = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet a = input.readUnsignedByte() / 255.0;\n\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, r, g, b, a);\n\t\t\t\t\t\t\tif (frame == frameLast) break;\n\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\n\t\t\t\t\t\t\tlet r2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet g2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet b2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet a2 = input.readUnsignedByte() / 255.0;\n\n\t\t\t\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 3, time, time2, a, a2, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tr = r2;\n\t\t\t\t\t\t\tg = g2;\n\t\t\t\t\t\t\tb = b2;\n\t\t\t\t\t\t\ta = a2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SLOT_RGB: {\n\t\t\t\t\t\tlet bezierCount = input.readInt(true);\n\t\t\t\t\t\tlet timeline = new RGBTimeline(frameCount, bezierCount, slotIndex);\n\n\t\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\t\tlet r = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet g = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet b = input.readUnsignedByte() / 255.0;\n\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, r, g, b);\n\t\t\t\t\t\t\tif (frame == frameLast) break;\n\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\n\t\t\t\t\t\t\tlet r2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet g2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet b2 = input.readUnsignedByte() / 255.0;\n\n\t\t\t\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tr = r2;\n\t\t\t\t\t\t\tg = g2;\n\t\t\t\t\t\t\tb = b2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SLOT_RGBA2: {\n\t\t\t\t\t\tlet bezierCount = input.readInt(true);\n\t\t\t\t\t\tlet timeline = new RGBA2Timeline(frameCount, bezierCount, slotIndex);\n\n\t\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\t\tlet r = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet g = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet b = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet a = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet r2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet g2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet b2 = input.readUnsignedByte() / 255.0;\n\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, r, g, b, a, r2, g2, b2);\n\t\t\t\t\t\t\tif (frame == frameLast) break;\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\n\t\t\t\t\t\t\tlet nr = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet ng = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet nb = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet na = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet nr2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet ng2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet nb2 = input.readUnsignedByte() / 255.0;\n\n\t\t\t\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 3, time, time2, a, na, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 4, time, time2, r2, nr2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 5, time, time2, g2, ng2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 6, time, time2, b2, nb2, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tr = nr;\n\t\t\t\t\t\t\tg = ng;\n\t\t\t\t\t\t\tb = nb;\n\t\t\t\t\t\t\ta = na;\n\t\t\t\t\t\t\tr2 = nr2;\n\t\t\t\t\t\t\tg2 = ng2;\n\t\t\t\t\t\t\tb2 = nb2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SLOT_RGB2: {\n\t\t\t\t\t\tlet bezierCount = input.readInt(true);\n\t\t\t\t\t\tlet timeline = new RGB2Timeline(frameCount, bezierCount, slotIndex);\n\n\t\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\t\tlet r = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet g = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet b = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet r2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet g2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\tlet b2 = input.readUnsignedByte() / 255.0;\n\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, r, g, b, r2, g2, b2);\n\t\t\t\t\t\t\tif (frame == frameLast) break;\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\n\t\t\t\t\t\t\tlet nr = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet ng = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet nb = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet nr2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet ng2 = input.readUnsignedByte() / 255.0;\n\t\t\t\t\t\t\tlet nb2 = input.readUnsignedByte() / 255.0;\n\n\t\t\t\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 3, time, time2, r2, nr2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 4, time, time2, g2, ng2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 5, time, time2, b2, nb2, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tr = nr;\n\t\t\t\t\t\t\tg = ng;\n\t\t\t\t\t\t\tb = nb;\n\t\t\t\t\t\t\tr2 = nr2;\n\t\t\t\t\t\t\tg2 = ng2;\n\t\t\t\t\t\t\tb2 = nb2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SLOT_ALPHA: {\n\t\t\t\t\t\tlet timeline = new AlphaTimeline(frameCount, input.readInt(true), slotIndex);\n\t\t\t\t\t\tlet time = input.readFloat(), a = input.readUnsignedByte() / 255;\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, a);\n\t\t\t\t\t\t\tif (frame == frameLast) break;\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\n\t\t\t\t\t\t\tlet a2 = input.readUnsignedByte() / 255;\n\t\t\t\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, a, a2, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\ta = a2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Bone timelines.\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\tlet boneIndex = input.readInt(true);\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\tlet type = input.readByte(), frameCount = input.readInt(true), bezierCount = input.readInt(true);\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase BONE_ROTATE:\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new RotateTimeline(frameCount, bezierCount, boneIndex), 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_TRANSLATE:\n\t\t\t\t\t\ttimelines.push(readTimeline2(input, new TranslateTimeline(frameCount, bezierCount, boneIndex), scale));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_TRANSLATEX:\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new TranslateXTimeline(frameCount, bezierCount, boneIndex), scale));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_TRANSLATEY:\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new TranslateYTimeline(frameCount, bezierCount, boneIndex), scale));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_SCALE:\n\t\t\t\t\t\ttimelines.push(readTimeline2(input, new ScaleTimeline(frameCount, bezierCount, boneIndex), 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_SCALEX:\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new ScaleXTimeline(frameCount, bezierCount, boneIndex), 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_SCALEY:\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new ScaleYTimeline(frameCount, bezierCount, boneIndex), 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_SHEAR:\n\t\t\t\t\t\ttimelines.push(readTimeline2(input, new ShearTimeline(frameCount, bezierCount, boneIndex), 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_SHEARX:\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new ShearXTimeline(frameCount, bezierCount, boneIndex), 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BONE_SHEARY:\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new ShearYTimeline(frameCount, bezierCount, boneIndex), 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// IK constraint timelines.\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\tlet index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\n\t\t\tlet timeline = new IkConstraintTimeline(frameCount, input.readInt(true), index);\n\t\t\tlet time = input.readFloat(), mix = input.readFloat(), softness = input.readFloat() * scale;\n\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\ttimeline.setFrame(frame, time, mix, softness, input.readByte(), input.readBoolean(), input.readBoolean());\n\t\t\t\tif (frame == frameLast) break;\n\t\t\t\tlet time2 = input.readFloat(), mix2 = input.readFloat(), softness2 = input.readFloat() * scale;\n\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, mix, mix2, 1);\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, softness, softness2, scale);\n\t\t\t\t}\n\t\t\t\ttime = time2;\n\t\t\t\tmix = mix2;\n\t\t\t\tsoftness = softness2;\n\t\t\t}\n\t\t\ttimelines.push(timeline);\n\t\t}\n\n\t\t// Transform constraint timelines.\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\tlet index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\n\t\t\tlet timeline = new TransformConstraintTimeline(frameCount, input.readInt(true), index);\n\t\t\tlet time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat(),\n\t\t\t\tmixScaleX = input.readFloat(), mixScaleY = input.readFloat(), mixShearY = input.readFloat();\n\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\ttimeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\n\t\t\t\tif (frame == frameLast) break;\n\t\t\t\tlet time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(), mixY2 = input.readFloat(),\n\t\t\t\t\tmixScaleX2 = input.readFloat(), mixScaleY2 = input.readFloat(), mixShearY2 = input.readFloat();\n\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 5, time, time2, mixShearY, mixShearY2, 1);\n\t\t\t\t}\n\t\t\t\ttime = time2;\n\t\t\t\tmixRotate = mixRotate2;\n\t\t\t\tmixX = mixX2;\n\t\t\t\tmixY = mixY2;\n\t\t\t\tmixScaleX = mixScaleX2;\n\t\t\t\tmixScaleY = mixScaleY2;\n\t\t\t\tmixShearY = mixShearY2;\n\t\t\t}\n\t\t\ttimelines.push(timeline);\n\t\t}\n\n\t\t// Path constraint timelines.\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\tlet index = input.readInt(true);\n\t\t\tlet data = skeletonData.pathConstraints[index];\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\tcase PATH_POSITION:\n\t\t\t\t\t\ttimelines\n\t\t\t\t\t\t\t.push(readTimeline1(input, new PathConstraintPositionTimeline(input.readInt(true), input.readInt(true), index),\n\t\t\t\t\t\t\t\tdata.positionMode == PositionMode.Fixed ? scale : 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PATH_SPACING:\n\t\t\t\t\t\ttimelines\n\t\t\t\t\t\t\t.push(readTimeline1(input, new PathConstraintSpacingTimeline(input.readInt(true), input.readInt(true), index),\n\t\t\t\t\t\t\t\tdata.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed ? scale : 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PATH_MIX:\n\t\t\t\t\t\tlet timeline = new PathConstraintMixTimeline(input.readInt(true), input.readInt(true), index);\n\t\t\t\t\t\tlet time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat();\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, mixRotate, mixX, mixY);\n\t\t\t\t\t\t\tif (frame == frameLast) break;\n\t\t\t\t\t\t\tlet time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(),\n\t\t\t\t\t\t\t\tmixY2 = input.readFloat();\n\t\t\t\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tmixRotate = mixRotate2;\n\t\t\t\t\t\t\tmixX = mixX2;\n\t\t\t\t\t\t\tmixY = mixY2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Deform timelines.\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\tlet skin = skeletonData.skins[input.readInt(true)];\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\tlet slotIndex = input.readInt(true);\n\t\t\t\tfor (let iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {\n\t\t\t\t\tlet attachmentName = input.readStringRef();\n\t\t\t\t\tlet attachment = skin.getAttachment(slotIndex, attachmentName) as VertexAttachment;\n\t\t\t\t\tlet weighted = attachment.bones;\n\t\t\t\t\tlet vertices = attachment.vertices;\n\t\t\t\t\tlet deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n\n\t\t\t\t\tlet frameCount = input.readInt(true);\n\t\t\t\t\tlet frameLast = frameCount - 1;\n\t\t\t\t\tlet bezierCount = input.readInt(true);\n\t\t\t\t\tlet timeline = new DeformTimeline(frameCount, bezierCount, slotIndex, attachment);\n\n\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\tlet deform;\n\t\t\t\t\t\tlet end = input.readInt(true);\n\t\t\t\t\t\tif (end == 0)\n\t\t\t\t\t\t\tdeform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdeform = Utils.newFloatArray(deformLength);\n\t\t\t\t\t\t\tlet start = input.readInt(true);\n\t\t\t\t\t\t\tend += start;\n\t\t\t\t\t\t\tif (scale == 1) {\n\t\t\t\t\t\t\t\tfor (let v = start; v < end; v++)\n\t\t\t\t\t\t\t\t\tdeform[v] = input.readFloat();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (let v = start; v < end; v++)\n\t\t\t\t\t\t\t\t\tdeform[v] = input.readFloat() * scale;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!weighted) {\n\t\t\t\t\t\t\t\tfor (let v = 0, vn = deform.length; v < vn; v++)\n\t\t\t\t\t\t\t\t\tdeform[v] += vertices[v];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttimeline.setFrame(frame, time, deform);\n\t\t\t\t\t\tif (frame == frameLast) break;\n\t\t\t\t\t\tlet time2 = input.readFloat();\n\t\t\t\t\t\tswitch (input.readByte()) {\n\t\t\t\t\t\t\tcase CURVE_STEPPED:\n\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase CURVE_BEZIER:\n\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, 0, 1, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t}\n\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Draw order timeline.\n\t\tlet drawOrderCount = input.readInt(true);\n\t\tif (drawOrderCount > 0) {\n\t\t\tlet timeline = new DrawOrderTimeline(drawOrderCount);\n\t\t\tlet slotCount = skeletonData.slots.length;\n\t\t\tfor (let i = 0; i < drawOrderCount; i++) {\n\t\t\t\tlet time = input.readFloat();\n\t\t\t\tlet offsetCount = input.readInt(true);\n\t\t\t\tlet drawOrder = Utils.newArray(slotCount, 0);\n\t\t\t\tfor (let ii = slotCount - 1; ii >= 0; ii--)\n\t\t\t\t\tdrawOrder[ii] = -1;\n\t\t\t\tlet unchanged = Utils.newArray(slotCount - offsetCount, 0);\n\t\t\t\tlet originalIndex = 0, unchangedIndex = 0;\n\t\t\t\tfor (let ii = 0; ii < offsetCount; ii++) {\n\t\t\t\t\tlet slotIndex = input.readInt(true);\n\t\t\t\t\t// Collect unchanged items.\n\t\t\t\t\twhile (originalIndex != slotIndex)\n\t\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\n\t\t\t\t\t// Set changed items.\n\t\t\t\t\tdrawOrder[originalIndex + input.readInt(true)] = originalIndex++;\n\t\t\t\t}\n\t\t\t\t// Collect remaining unchanged items.\n\t\t\t\twhile (originalIndex < slotCount)\n\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\n\t\t\t\t// Fill in unchanged items.\n\t\t\t\tfor (let ii = slotCount - 1; ii >= 0; ii--)\n\t\t\t\t\tif (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n\t\t\t\ttimeline.setFrame(i, time, drawOrder);\n\t\t\t}\n\t\t\ttimelines.push(timeline);\n\t\t}\n\n\t\t// Event timeline.\n\t\tlet eventCount = input.readInt(true);\n\t\tif (eventCount > 0) {\n\t\t\tlet timeline = new EventTimeline(eventCount);\n\t\t\tfor (let i = 0; i < eventCount; i++) {\n\t\t\t\tlet time = input.readFloat();\n\t\t\t\tlet eventData = skeletonData.events[input.readInt(true)];\n\t\t\t\tlet event = new Event(time, eventData);\n\t\t\t\tevent.intValue = input.readInt(false);\n\t\t\t\tevent.floatValue = input.readFloat();\n\t\t\t\tevent.stringValue = input.readBoolean() ? input.readString() : eventData.stringValue;\n\t\t\t\tif (event.data.audioPath) {\n\t\t\t\t\tevent.volume = input.readFloat();\n\t\t\t\t\tevent.balance = input.readFloat();\n\t\t\t\t}\n\t\t\t\ttimeline.setFrame(i, event);\n\t\t\t}\n\t\t\ttimelines.push(timeline);\n\t\t}\n\n\t\tlet duration = 0;\n\t\tfor (let i = 0, n = timelines.length; i < n; i++)\n\t\t\tduration = Math.max(duration, timelines[i].getDuration());\n\t\treturn new Animation(name, timelines, duration);\n\t}\n}\n\nexport class BinaryInput {\n\tconstructor(data: Uint8Array, public strings = new Array<string>(), private index: number = 0, private buffer = new DataView(data.buffer)) {\n\t}\n\n\treadByte(): number {\n\t\treturn this.buffer.getInt8(this.index++);\n\t}\n\n\treadUnsignedByte(): number {\n\t\treturn this.buffer.getUint8(this.index++);\n\t}\n\n\treadShort(): number {\n\t\tlet value = this.buffer.getInt16(this.index);\n\t\tthis.index += 2;\n\t\treturn value;\n\t}\n\n\treadInt32(): number {\n\t\tlet value = this.buffer.getInt32(this.index)\n\t\tthis.index += 4;\n\t\treturn value;\n\t}\n\n\treadInt(optimizePositive: boolean) {\n\t\tlet b = this.readByte();\n\t\tlet result = b & 0x7F;\n\t\tif ((b & 0x80) != 0) {\n\t\t\tb = this.readByte();\n\t\t\tresult |= (b & 0x7F) << 7;\n\t\t\tif ((b & 0x80) != 0) {\n\t\t\t\tb = this.readByte();\n\t\t\t\tresult |= (b & 0x7F) << 14;\n\t\t\t\tif ((b & 0x80) != 0) {\n\t\t\t\t\tb = this.readByte();\n\t\t\t\t\tresult |= (b & 0x7F) << 21;\n\t\t\t\t\tif ((b & 0x80) != 0) {\n\t\t\t\t\t\tb = this.readByte();\n\t\t\t\t\t\tresult |= (b & 0x7F) << 28;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn optimizePositive ? result : ((result >>> 1) ^ -(result & 1));\n\t}\n\n\treadStringRef(): string {\n\t\tlet index = this.readInt(true);\n\t\treturn index == 0 ? null : this.strings[index - 1];\n\t}\n\n\treadString(): string {\n\t\tlet byteCount = this.readInt(true);\n\t\tswitch (byteCount) {\n\t\t\tcase 0:\n\t\t\t\treturn null;\n\t\t\tcase 1:\n\t\t\t\treturn \"\";\n\t\t}\n\t\tbyteCount--;\n\t\tlet chars = \"\";\n\t\tlet charCount = 0;\n\t\tfor (let i = 0; i < byteCount;) {\n\t\t\tlet b = this.readByte();\n\t\t\tswitch (b >> 4) {\n\t\t\t\tcase 12:\n\t\t\t\tcase 13:\n\t\t\t\t\tchars += String.fromCharCode(((b & 0x1F) << 6 | this.readByte() & 0x3F));\n\t\t\t\t\ti += 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 14:\n\t\t\t\t\tchars += String.fromCharCode(((b & 0x0F) << 12 | (this.readByte() & 0x3F) << 6 | this.readByte() & 0x3F));\n\t\t\t\t\ti += 3;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tchars += String.fromCharCode(b);\n\t\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn chars;\n\t}\n\n\treadFloat(): number {\n\t\tlet value = this.buffer.getFloat32(this.index);\n\t\tthis.index += 4;\n\t\treturn value;\n\t}\n\n\treadBoolean(): boolean {\n\t\treturn this.readByte() != 0;\n\t}\n}\n\nclass LinkedMesh {\n\tparent: string; skin: string;\n\tslotIndex: number;\n\tmesh: MeshAttachment;\n\tinheritDeform: boolean;\n\n\tconstructor(mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\n\t\tthis.mesh = mesh;\n\t\tthis.skin = skin;\n\t\tthis.slotIndex = slotIndex;\n\t\tthis.parent = parent;\n\t\tthis.inheritDeform = inheritDeform;\n\t}\n}\n\nclass Vertices {\n\tconstructor(public bones: Array<number> = null, public vertices: Array<number> | Float32Array = null) { }\n}\n\nenum AttachmentType { Region, BoundingBox, Mesh, LinkedMesh, Path, Point, Clipping }\n\nfunction readTimeline1(input: BinaryInput, timeline: CurveTimeline1, scale: number): CurveTimeline1 {\n\tlet time = input.readFloat(), value = input.readFloat() * scale;\n\tfor (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\n\t\ttimeline.setFrame(frame, time, value);\n\t\tif (frame == frameLast) break;\n\t\tlet time2 = input.readFloat(), value2 = input.readFloat() * scale;\n\t\tswitch (input.readByte()) {\n\t\t\tcase CURVE_STEPPED:\n\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\tbreak;\n\t\t\tcase CURVE_BEZIER:\n\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, value, value2, scale);\n\t\t}\n\t\ttime = time2;\n\t\tvalue = value2;\n\t}\n\treturn timeline;\n}\n\nfunction readTimeline2(input: BinaryInput, timeline: CurveTimeline2, scale: number): CurveTimeline2 {\n\tlet time = input.readFloat(), value1 = input.readFloat() * scale, value2 = input.readFloat() * scale;\n\tfor (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\n\t\ttimeline.setFrame(frame, time, value1, value2);\n\t\tif (frame == frameLast) break;\n\t\tlet time2 = input.readFloat(), nvalue1 = input.readFloat() * scale, nvalue2 = input.readFloat() * scale;\n\t\tswitch (input.readByte()) {\n\t\t\tcase CURVE_STEPPED:\n\t\t\t\ttimeline.setStepped(frame);\n\t\t\t\tbreak;\n\t\t\tcase CURVE_BEZIER:\n\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, value1, nvalue1, scale);\n\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, value2, nvalue2, scale);\n\t\t}\n\t\ttime = time2;\n\t\tvalue1 = nvalue1;\n\t\tvalue2 = nvalue2;\n\t}\n\treturn timeline;\n}\n\nfunction setBezier(input: BinaryInput, timeline: CurveTimeline, bezier: number, frame: number, value: number,\n\ttime1: number, time2: number, value1: number, value2: number, scale: number) {\n\ttimeline.setBezier(bezier, frame, value, time1, value1, input.readFloat(), input.readFloat() * scale, input.readFloat(), input.readFloat() * scale, time2, value2);\n}\n\nconst BONE_ROTATE = 0;\nconst BONE_TRANSLATE = 1;\nconst BONE_TRANSLATEX = 2;\nconst BONE_TRANSLATEY = 3;\nconst BONE_SCALE = 4;\nconst BONE_SCALEX = 5;\nconst BONE_SCALEY = 6;\nconst BONE_SHEAR = 7;\nconst BONE_SHEARX = 8;\nconst BONE_SHEARY = 9;\n\nconst SLOT_ATTACHMENT = 0;\nconst SLOT_RGBA = 1;\nconst SLOT_RGB = 2;\nconst SLOT_RGBA2 = 3;\nconst SLOT_RGB2 = 4;\nconst SLOT_ALPHA = 5;\n\nconst PATH_POSITION = 0;\nconst PATH_SPACING = 1;\nconst PATH_MIX = 2;\n\nconst CURVE_LINEAR = 0;\nconst CURVE_STEPPED = 1;\nconst CURVE_BEZIER = 2;\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { BoundingBoxAttachment } from \"./attachments/BoundingBoxAttachment\";\nimport { Skeleton } from \"./Skeleton\";\nimport { NumberArrayLike, Pool, Utils } from \"./Utils\";\n\n/** Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\n * provided along with convenience methods for doing hit detection. */\nexport class SkeletonBounds {\n\n\t/** The left edge of the axis aligned bounding box. */\n\tminX = 0;\n\n\t/** The bottom edge of the axis aligned bounding box. */\n\tminY = 0;\n\n\t/** The right edge of the axis aligned bounding box. */\n\tmaxX = 0;\n\n\t/** The top edge of the axis aligned bounding box. */\n\tmaxY = 0;\n\n\t/** The visible bounding boxes. */\n\tboundingBoxes = new Array<BoundingBoxAttachment>();\n\n\t/** The world vertices for the bounding box polygons. */\n\tpolygons = new Array<NumberArrayLike>();\n\n\tprivate polygonPool = new Pool<NumberArrayLike>(() => {\n\t\treturn Utils.newFloatArray(16);\n\t});\n\n\t/** Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding\n\t * box's polygon.\n\t * @param updateAabb If true, the axis aligned bounding box containing all the polygons is computed. If false, the\n\t *           SkeletonBounds AABB methods will always return true. */\n\tupdate(skeleton: Skeleton, updateAabb: boolean) {\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\n\t\tlet boundingBoxes = this.boundingBoxes;\n\t\tlet polygons = this.polygons;\n\t\tlet polygonPool = this.polygonPool;\n\t\tlet slots = skeleton.slots;\n\t\tlet slotCount = slots.length;\n\n\t\tboundingBoxes.length = 0;\n\t\tpolygonPool.freeAll(polygons);\n\t\tpolygons.length = 0;\n\n\t\tfor (let i = 0; i < slotCount; i++) {\n\t\t\tlet slot = slots[i];\n\t\t\tif (!slot.bone.active) continue;\n\t\t\tlet attachment = slot.getAttachment();\n\t\t\tif (attachment instanceof BoundingBoxAttachment) {\n\t\t\t\tlet boundingBox = attachment as BoundingBoxAttachment;\n\t\t\t\tboundingBoxes.push(boundingBox);\n\n\t\t\t\tlet polygon = polygonPool.obtain();\n\t\t\t\tif (polygon.length != boundingBox.worldVerticesLength) {\n\t\t\t\t\tpolygon = Utils.newFloatArray(boundingBox.worldVerticesLength);\n\t\t\t\t}\n\t\t\t\tpolygons.push(polygon);\n\t\t\t\tboundingBox.computeWorldVertices(slot, 0, boundingBox.worldVerticesLength, polygon, 0, 2);\n\t\t\t}\n\t\t}\n\n\t\tif (updateAabb) {\n\t\t\tthis.aabbCompute();\n\t\t} else {\n\t\t\tthis.minX = Number.POSITIVE_INFINITY;\n\t\t\tthis.minY = Number.POSITIVE_INFINITY;\n\t\t\tthis.maxX = Number.NEGATIVE_INFINITY;\n\t\t\tthis.maxY = Number.NEGATIVE_INFINITY;\n\t\t}\n\t}\n\n\taabbCompute() {\n\t\tlet minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n\t\tlet polygons = this.polygons;\n\t\tfor (let i = 0, n = polygons.length; i < n; i++) {\n\t\t\tlet polygon = polygons[i];\n\t\t\tlet vertices = polygon;\n\t\t\tfor (let ii = 0, nn = polygon.length; ii < nn; ii += 2) {\n\t\t\t\tlet x = vertices[ii];\n\t\t\t\tlet y = vertices[ii + 1];\n\t\t\t\tminX = Math.min(minX, x);\n\t\t\t\tminY = Math.min(minY, y);\n\t\t\t\tmaxX = Math.max(maxX, x);\n\t\t\t\tmaxY = Math.max(maxY, y);\n\t\t\t}\n\t\t}\n\t\tthis.minX = minX;\n\t\tthis.minY = minY;\n\t\tthis.maxX = maxX;\n\t\tthis.maxY = maxY;\n\t}\n\n\t/** Returns true if the axis aligned bounding box contains the point. */\n\taabbContainsPoint(x: number, y: number) {\n\t\treturn x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\n\t}\n\n\t/** Returns true if the axis aligned bounding box intersects the line segment. */\n\taabbIntersectsSegment(x1: number, y1: number, x2: number, y2: number) {\n\t\tlet minX = this.minX;\n\t\tlet minY = this.minY;\n\t\tlet maxX = this.maxX;\n\t\tlet maxY = this.maxY;\n\t\tif ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\n\t\t\treturn false;\n\t\tlet m = (y2 - y1) / (x2 - x1);\n\t\tlet y = m * (minX - x1) + y1;\n\t\tif (y > minY && y < maxY) return true;\n\t\ty = m * (maxX - x1) + y1;\n\t\tif (y > minY && y < maxY) return true;\n\t\tlet x = (minY - y1) / m + x1;\n\t\tif (x > minX && x < maxX) return true;\n\t\tx = (maxY - y1) / m + x1;\n\t\tif (x > minX && x < maxX) return true;\n\t\treturn false;\n\t}\n\n\t/** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\n\taabbIntersectsSkeleton(bounds: SkeletonBounds) {\n\t\treturn this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\n\t}\n\n\t/** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\n\t * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\n\tcontainsPoint(x: number, y: number): BoundingBoxAttachment {\n\t\tlet polygons = this.polygons;\n\t\tfor (let i = 0, n = polygons.length; i < n; i++)\n\t\t\tif (this.containsPointPolygon(polygons[i], x, y)) return this.boundingBoxes[i];\n\t\treturn null;\n\t}\n\n\t/** Returns true if the polygon contains the point. */\n\tcontainsPointPolygon(polygon: NumberArrayLike, x: number, y: number) {\n\t\tlet vertices = polygon;\n\t\tlet nn = polygon.length;\n\n\t\tlet prevIndex = nn - 2;\n\t\tlet inside = false;\n\t\tfor (let ii = 0; ii < nn; ii += 2) {\n\t\t\tlet vertexY = vertices[ii + 1];\n\t\t\tlet prevY = vertices[prevIndex + 1];\n\t\t\tif ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {\n\t\t\t\tlet vertexX = vertices[ii];\n\t\t\t\tif (vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) inside = !inside;\n\t\t\t}\n\t\t\tprevIndex = ii;\n\t\t}\n\t\treturn inside;\n\t}\n\n\t/** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\n\t * is usually more efficient to only call this method if {@link #aabbIntersectsSegment()} returns\n\t * true. */\n\tintersectsSegment(x1: number, y1: number, x2: number, y2: number) {\n\t\tlet polygons = this.polygons;\n\t\tfor (let i = 0, n = polygons.length; i < n; i++)\n\t\t\tif (this.intersectsSegmentPolygon(polygons[i], x1, y1, x2, y2)) return this.boundingBoxes[i];\n\t\treturn null;\n\t}\n\n\t/** Returns true if the polygon contains any part of the line segment. */\n\tintersectsSegmentPolygon(polygon: NumberArrayLike, x1: number, y1: number, x2: number, y2: number) {\n\t\tlet vertices = polygon;\n\t\tlet nn = polygon.length;\n\n\t\tlet width12 = x1 - x2, height12 = y1 - y2;\n\t\tlet det1 = x1 * y2 - y1 * x2;\n\t\tlet x3 = vertices[nn - 2], y3 = vertices[nn - 1];\n\t\tfor (let ii = 0; ii < nn; ii += 2) {\n\t\t\tlet x4 = vertices[ii], y4 = vertices[ii + 1];\n\t\t\tlet det2 = x3 * y4 - y3 * x4;\n\t\t\tlet width34 = x3 - x4, height34 = y3 - y4;\n\t\t\tlet det3 = width12 * height34 - height12 * width34;\n\t\t\tlet x = (det1 * width34 - width12 * det2) / det3;\n\t\t\tif (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {\n\t\t\t\tlet y = (det1 * height34 - height12 * det2) / det3;\n\t\t\t\tif (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\n\t\t\t}\n\t\t\tx3 = x4;\n\t\t\ty3 = y4;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/** Returns the polygon for the specified bounding box, or null. */\n\tgetPolygon(boundingBox: BoundingBoxAttachment) {\n\t\tif (!boundingBox) throw new Error(\"boundingBox cannot be null.\");\n\t\tlet index = this.boundingBoxes.indexOf(boundingBox);\n\t\treturn index == -1 ? null : this.polygons[index];\n\t}\n\n\t/** The width of the axis aligned bounding box. */\n\tgetWidth() {\n\t\treturn this.maxX - this.minX;\n\t}\n\n\t/** The height of the axis aligned bounding box. */\n\tgetHeight() {\n\t\treturn this.maxY - this.minY;\n\t}\n}", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { NumberArrayLike, Pool } from \"./Utils\";\n\nexport class Triangulator {\n\tprivate convexPolygons = new Array<Array<number>>();\n\tprivate convexPolygonsIndices = new Array<Array<number>>();\n\n\tprivate indicesArray = new Array<number>();\n\tprivate isConcaveArray = new Array<boolean>();\n\tprivate triangles = new Array<number>();\n\n\tprivate polygonPool = new Pool<Array<number>>(() => {\n\t\treturn new Array<number>();\n\t});\n\n\tprivate polygonIndicesPool = new Pool<Array<number>>(() => {\n\t\treturn new Array<number>();\n\t});\n\n\tpublic triangulate(verticesArray: NumberArrayLike): Array<number> {\n\t\tlet vertices = verticesArray;\n\t\tlet vertexCount = verticesArray.length >> 1;\n\n\t\tlet indices = this.indicesArray;\n\t\tindices.length = 0;\n\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\tindices[i] = i;\n\n\t\tlet isConcave = this.isConcaveArray;\n\t\tisConcave.length = 0;\n\t\tfor (let i = 0, n = vertexCount; i < n; ++i)\n\t\t\tisConcave[i] = Triangulator.isConcave(i, vertexCount, vertices, indices);\n\n\t\tlet triangles = this.triangles;\n\t\ttriangles.length = 0;\n\n\t\twhile (vertexCount > 3) {\n\t\t\t// Find ear tip.\n\t\t\tlet previous = vertexCount - 1, i = 0, next = 1;\n\t\t\twhile (true) {\n\t\t\t\touter:\n\t\t\t\tif (!isConcave[i]) {\n\t\t\t\t\tlet p1 = indices[previous] << 1, p2 = indices[i] << 1, p3 = indices[next] << 1;\n\t\t\t\t\tlet p1x = vertices[p1], p1y = vertices[p1 + 1];\n\t\t\t\t\tlet p2x = vertices[p2], p2y = vertices[p2 + 1];\n\t\t\t\t\tlet p3x = vertices[p3], p3y = vertices[p3 + 1];\n\t\t\t\t\tfor (let ii = (next + 1) % vertexCount; ii != previous; ii = (ii + 1) % vertexCount) {\n\t\t\t\t\t\tif (!isConcave[ii]) continue;\n\t\t\t\t\t\tlet v = indices[ii] << 1;\n\t\t\t\t\t\tlet vx = vertices[v], vy = vertices[v + 1];\n\t\t\t\t\t\tif (Triangulator.positiveArea(p3x, p3y, p1x, p1y, vx, vy)) {\n\t\t\t\t\t\t\tif (Triangulator.positiveArea(p1x, p1y, p2x, p2y, vx, vy)) {\n\t\t\t\t\t\t\t\tif (Triangulator.positiveArea(p2x, p2y, p3x, p3y, vx, vy)) break outer;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (next == 0) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (!isConcave[i]) break;\n\t\t\t\t\t\ti--;\n\t\t\t\t\t} while (i > 0);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevious = i;\n\t\t\t\ti = next;\n\t\t\t\tnext = (next + 1) % vertexCount;\n\t\t\t}\n\n\t\t\t// Cut ear tip.\n\t\t\ttriangles.push(indices[(vertexCount + i - 1) % vertexCount]);\n\t\t\ttriangles.push(indices[i]);\n\t\t\ttriangles.push(indices[(i + 1) % vertexCount]);\n\t\t\tindices.splice(i, 1);\n\t\t\tisConcave.splice(i, 1);\n\t\t\tvertexCount--;\n\n\t\t\tlet previousIndex = (vertexCount + i - 1) % vertexCount;\n\t\t\tlet nextIndex = i == vertexCount ? 0 : i;\n\t\t\tisConcave[previousIndex] = Triangulator.isConcave(previousIndex, vertexCount, vertices, indices);\n\t\t\tisConcave[nextIndex] = Triangulator.isConcave(nextIndex, vertexCount, vertices, indices);\n\t\t}\n\n\t\tif (vertexCount == 3) {\n\t\t\ttriangles.push(indices[2]);\n\t\t\ttriangles.push(indices[0]);\n\t\t\ttriangles.push(indices[1]);\n\t\t}\n\n\t\treturn triangles;\n\t}\n\n\tdecompose(verticesArray: Array<number>, triangles: Array<number>): Array<Array<number>> {\n\t\tlet vertices = verticesArray;\n\t\tlet convexPolygons = this.convexPolygons;\n\t\tthis.polygonPool.freeAll(convexPolygons);\n\t\tconvexPolygons.length = 0;\n\n\t\tlet convexPolygonsIndices = this.convexPolygonsIndices;\n\t\tthis.polygonIndicesPool.freeAll(convexPolygonsIndices);\n\t\tconvexPolygonsIndices.length = 0;\n\n\t\tlet polygonIndices = this.polygonIndicesPool.obtain();\n\t\tpolygonIndices.length = 0;\n\n\t\tlet polygon = this.polygonPool.obtain();\n\t\tpolygon.length = 0;\n\n\t\t// Merge subsequent triangles if they form a triangle fan.\n\t\tlet fanBaseIndex = -1, lastWinding = 0;\n\t\tfor (let i = 0, n = triangles.length; i < n; i += 3) {\n\t\t\tlet t1 = triangles[i] << 1, t2 = triangles[i + 1] << 1, t3 = triangles[i + 2] << 1;\n\t\t\tlet x1 = vertices[t1], y1 = vertices[t1 + 1];\n\t\t\tlet x2 = vertices[t2], y2 = vertices[t2 + 1];\n\t\t\tlet x3 = vertices[t3], y3 = vertices[t3 + 1];\n\n\t\t\t// If the base of the last triangle is the same as this triangle, check if they form a convex polygon (triangle fan).\n\t\t\tlet merged = false;\n\t\t\tif (fanBaseIndex == t1) {\n\t\t\t\tlet o = polygon.length - 4;\n\t\t\t\tlet winding1 = Triangulator.winding(polygon[o], polygon[o + 1], polygon[o + 2], polygon[o + 3], x3, y3);\n\t\t\t\tlet winding2 = Triangulator.winding(x3, y3, polygon[0], polygon[1], polygon[2], polygon[3]);\n\t\t\t\tif (winding1 == lastWinding && winding2 == lastWinding) {\n\t\t\t\t\tpolygon.push(x3);\n\t\t\t\t\tpolygon.push(y3);\n\t\t\t\t\tpolygonIndices.push(t3);\n\t\t\t\t\tmerged = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise make this triangle the new base.\n\t\t\tif (!merged) {\n\t\t\t\tif (polygon.length > 0) {\n\t\t\t\t\tconvexPolygons.push(polygon);\n\t\t\t\t\tconvexPolygonsIndices.push(polygonIndices);\n\t\t\t\t} else {\n\t\t\t\t\tthis.polygonPool.free(polygon)\n\t\t\t\t\tthis.polygonIndicesPool.free(polygonIndices);\n\t\t\t\t}\n\t\t\t\tpolygon = this.polygonPool.obtain();\n\t\t\t\tpolygon.length = 0;\n\t\t\t\tpolygon.push(x1);\n\t\t\t\tpolygon.push(y1);\n\t\t\t\tpolygon.push(x2);\n\t\t\t\tpolygon.push(y2);\n\t\t\t\tpolygon.push(x3);\n\t\t\t\tpolygon.push(y3);\n\t\t\t\tpolygonIndices = this.polygonIndicesPool.obtain();\n\t\t\t\tpolygonIndices.length = 0;\n\t\t\t\tpolygonIndices.push(t1);\n\t\t\t\tpolygonIndices.push(t2);\n\t\t\t\tpolygonIndices.push(t3);\n\t\t\t\tlastWinding = Triangulator.winding(x1, y1, x2, y2, x3, y3);\n\t\t\t\tfanBaseIndex = t1;\n\t\t\t}\n\t\t}\n\n\t\tif (polygon.length > 0) {\n\t\t\tconvexPolygons.push(polygon);\n\t\t\tconvexPolygonsIndices.push(polygonIndices);\n\t\t}\n\n\t\t// Go through the list of polygons and try to merge the remaining triangles with the found triangle fans.\n\t\tfor (let i = 0, n = convexPolygons.length; i < n; i++) {\n\t\t\tpolygonIndices = convexPolygonsIndices[i];\n\t\t\tif (polygonIndices.length == 0) continue;\n\t\t\tlet firstIndex = polygonIndices[0];\n\t\t\tlet lastIndex = polygonIndices[polygonIndices.length - 1];\n\n\t\t\tpolygon = convexPolygons[i];\n\t\t\tlet o = polygon.length - 4;\n\t\t\tlet prevPrevX = polygon[o], prevPrevY = polygon[o + 1];\n\t\t\tlet prevX = polygon[o + 2], prevY = polygon[o + 3];\n\t\t\tlet firstX = polygon[0], firstY = polygon[1];\n\t\t\tlet secondX = polygon[2], secondY = polygon[3];\n\t\t\tlet winding = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, firstX, firstY);\n\n\t\t\tfor (let ii = 0; ii < n; ii++) {\n\t\t\t\tif (ii == i) continue;\n\t\t\t\tlet otherIndices = convexPolygonsIndices[ii];\n\t\t\t\tif (otherIndices.length != 3) continue;\n\t\t\t\tlet otherFirstIndex = otherIndices[0];\n\t\t\t\tlet otherSecondIndex = otherIndices[1];\n\t\t\t\tlet otherLastIndex = otherIndices[2];\n\n\t\t\t\tlet otherPoly = convexPolygons[ii];\n\t\t\t\tlet x3 = otherPoly[otherPoly.length - 2], y3 = otherPoly[otherPoly.length - 1];\n\n\t\t\t\tif (otherFirstIndex != firstIndex || otherSecondIndex != lastIndex) continue;\n\t\t\t\tlet winding1 = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, x3, y3);\n\t\t\t\tlet winding2 = Triangulator.winding(x3, y3, firstX, firstY, secondX, secondY);\n\t\t\t\tif (winding1 == winding && winding2 == winding) {\n\t\t\t\t\totherPoly.length = 0;\n\t\t\t\t\totherIndices.length = 0;\n\t\t\t\t\tpolygon.push(x3);\n\t\t\t\t\tpolygon.push(y3);\n\t\t\t\t\tpolygonIndices.push(otherLastIndex);\n\t\t\t\t\tprevPrevX = prevX;\n\t\t\t\t\tprevPrevY = prevY;\n\t\t\t\t\tprevX = x3;\n\t\t\t\t\tprevY = y3;\n\t\t\t\t\tii = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove empty polygons that resulted from the merge step above.\n\t\tfor (let i = convexPolygons.length - 1; i >= 0; i--) {\n\t\t\tpolygon = convexPolygons[i];\n\t\t\tif (polygon.length == 0) {\n\t\t\t\tconvexPolygons.splice(i, 1);\n\t\t\t\tthis.polygonPool.free(polygon);\n\t\t\t\tpolygonIndices = convexPolygonsIndices[i]\n\t\t\t\tconvexPolygonsIndices.splice(i, 1)\n\t\t\t\tthis.polygonIndicesPool.free(polygonIndices);\n\t\t\t}\n\t\t}\n\n\t\treturn convexPolygons;\n\t}\n\n\tprivate static isConcave(index: number, vertexCount: number, vertices: NumberArrayLike, indices: NumberArrayLike): boolean {\n\t\tlet previous = indices[(vertexCount + index - 1) % vertexCount] << 1;\n\t\tlet current = indices[index] << 1;\n\t\tlet next = indices[(index + 1) % vertexCount] << 1;\n\t\treturn !this.positiveArea(vertices[previous], vertices[previous + 1], vertices[current], vertices[current + 1], vertices[next],\n\t\t\tvertices[next + 1]);\n\t}\n\n\tprivate static positiveArea(p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number): boolean {\n\t\treturn p1x * (p3y - p2y) + p2x * (p1y - p3y) + p3x * (p2y - p1y) >= 0;\n\t}\n\n\tprivate static winding(p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number): number {\n\t\tlet px = p2x - p1x, py = p2y - p1y;\n\t\treturn p3x * py - p3y * px + px * p1y - p1x * py >= 0 ? 1 : -1;\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { ClippingAttachment } from \"./attachments/ClippingAttachment\";\nimport { Slot } from \"./Slot\";\nimport { Triangulator } from \"./Triangulator\";\nimport { Utils, Color, NumberArrayLike } from \"./Utils\";\n\nexport class SkeletonClipping {\n\tprivate triangulator = new Triangulator();\n\tprivate clippingPolygon = new Array<number>();\n\tprivate clipOutput = new Array<number>();\n\tclippedVertices = new Array<number>();\n\tclippedTriangles = new Array<number>();\n\tprivate scratch = new Array<number>();\n\n\tprivate clipAttachment: ClippingAttachment;\n\tprivate clippingPolygons: Array<Array<number>>;\n\n\tclipStart(slot: Slot, clip: ClippingAttachment): number {\n\t\tif (this.clipAttachment) return 0;\n\t\tthis.clipAttachment = clip;\n\n\t\tlet n = clip.worldVerticesLength;\n\t\tlet vertices = Utils.setArraySize(this.clippingPolygon, n);\n\t\tclip.computeWorldVertices(slot, 0, n, vertices, 0, 2);\n\t\tlet clippingPolygon = this.clippingPolygon;\n\t\tSkeletonClipping.makeClockwise(clippingPolygon);\n\t\tlet clippingPolygons = this.clippingPolygons = this.triangulator.decompose(clippingPolygon, this.triangulator.triangulate(clippingPolygon));\n\t\tfor (let i = 0, n = clippingPolygons.length; i < n; i++) {\n\t\t\tlet polygon = clippingPolygons[i];\n\t\t\tSkeletonClipping.makeClockwise(polygon);\n\t\t\tpolygon.push(polygon[0]);\n\t\t\tpolygon.push(polygon[1]);\n\t\t}\n\n\t\treturn clippingPolygons.length;\n\t}\n\n\tclipEndWithSlot(slot: Slot) {\n\t\tif (this.clipAttachment && this.clipAttachment.endSlot == slot.data) this.clipEnd();\n\t}\n\n\tclipEnd() {\n\t\tif (!this.clipAttachment) return;\n\t\tthis.clipAttachment = null;\n\t\tthis.clippingPolygons = null;\n\t\tthis.clippedVertices.length = 0;\n\t\tthis.clippedTriangles.length = 0;\n\t\tthis.clippingPolygon.length = 0;\n\t}\n\n\tisClipping(): boolean {\n\t\treturn this.clipAttachment != null;\n\t}\n\n\tclipTriangles(vertices: NumberArrayLike, verticesLength: number, triangles: NumberArrayLike, trianglesLength: number, uvs: NumberArrayLike,\n\t\tlight: Color, dark: Color, twoColor: boolean) {\n\n\t\tlet clipOutput = this.clipOutput, clippedVertices = this.clippedVertices;\n\t\tlet clippedTriangles = this.clippedTriangles;\n\t\tlet polygons = this.clippingPolygons;\n\t\tlet polygonsCount = this.clippingPolygons.length;\n\t\tlet vertexSize = twoColor ? 12 : 8;\n\n\t\tlet index = 0;\n\t\tclippedVertices.length = 0;\n\t\tclippedTriangles.length = 0;\n\t\touter:\n\t\tfor (let i = 0; i < trianglesLength; i += 3) {\n\t\t\tlet vertexOffset = triangles[i] << 1;\n\t\t\tlet x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];\n\t\t\tlet u1 = uvs[vertexOffset], v1 = uvs[vertexOffset + 1];\n\n\t\t\tvertexOffset = triangles[i + 1] << 1;\n\t\t\tlet x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];\n\t\t\tlet u2 = uvs[vertexOffset], v2 = uvs[vertexOffset + 1];\n\n\t\t\tvertexOffset = triangles[i + 2] << 1;\n\t\t\tlet x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];\n\t\t\tlet u3 = uvs[vertexOffset], v3 = uvs[vertexOffset + 1];\n\n\t\t\tfor (let p = 0; p < polygonsCount; p++) {\n\t\t\t\tlet s = clippedVertices.length;\n\t\t\t\tif (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {\n\t\t\t\t\tlet clipOutputLength = clipOutput.length;\n\t\t\t\t\tif (clipOutputLength == 0) continue;\n\t\t\t\t\tlet d0 = y2 - y3, d1 = x3 - x2, d2 = x1 - x3, d4 = y3 - y1;\n\t\t\t\t\tlet d = 1 / (d0 * d2 + d1 * (y1 - y3));\n\n\t\t\t\t\tlet clipOutputCount = clipOutputLength >> 1;\n\t\t\t\t\tlet clipOutputItems = this.clipOutput;\n\t\t\t\t\tlet clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * vertexSize);\n\t\t\t\t\tfor (let ii = 0; ii < clipOutputLength; ii += 2) {\n\t\t\t\t\t\tlet x = clipOutputItems[ii], y = clipOutputItems[ii + 1];\n\t\t\t\t\t\tclippedVerticesItems[s] = x;\n\t\t\t\t\t\tclippedVerticesItems[s + 1] = y;\n\t\t\t\t\t\tclippedVerticesItems[s + 2] = light.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 3] = light.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 4] = light.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 5] = light.a;\n\t\t\t\t\t\tlet c0 = x - x3, c1 = y - y3;\n\t\t\t\t\t\tlet a = (d0 * c0 + d1 * c1) * d;\n\t\t\t\t\t\tlet b = (d4 * c0 + d2 * c1) * d;\n\t\t\t\t\t\tlet c = 1 - a - b;\n\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1 * a + u2 * b + u3 * c;\n\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1 * a + v2 * b + v3 * c;\n\t\t\t\t\t\tif (twoColor) {\n\t\t\t\t\t\t\tclippedVerticesItems[s + 8] = dark.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 9] = dark.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 10] = dark.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 11] = dark.a;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts += vertexSize;\n\t\t\t\t\t}\n\n\t\t\t\t\ts = clippedTriangles.length;\n\t\t\t\t\tlet clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));\n\t\t\t\t\tclipOutputCount--;\n\t\t\t\t\tfor (let ii = 1; ii < clipOutputCount; ii++) {\n\t\t\t\t\t\tclippedTrianglesItems[s] = index;\n\t\t\t\t\t\tclippedTrianglesItems[s + 1] = (index + ii);\n\t\t\t\t\t\tclippedTrianglesItems[s + 2] = (index + ii + 1);\n\t\t\t\t\t\ts += 3;\n\t\t\t\t\t}\n\t\t\t\t\tindex += clipOutputCount + 1;\n\n\t\t\t\t} else {\n\t\t\t\t\tlet clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * vertexSize);\n\t\t\t\t\tclippedVerticesItems[s] = x1;\n\t\t\t\t\tclippedVerticesItems[s + 1] = y1;\n\t\t\t\t\tclippedVerticesItems[s + 2] = light.r;\n\t\t\t\t\tclippedVerticesItems[s + 3] = light.g;\n\t\t\t\t\tclippedVerticesItems[s + 4] = light.b;\n\t\t\t\t\tclippedVerticesItems[s + 5] = light.a;\n\t\t\t\t\tif (!twoColor) {\n\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1;\n\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1;\n\n\t\t\t\t\t\tclippedVerticesItems[s + 8] = x2;\n\t\t\t\t\t\tclippedVerticesItems[s + 9] = y2;\n\t\t\t\t\t\tclippedVerticesItems[s + 10] = light.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 11] = light.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 12] = light.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 13] = light.a;\n\t\t\t\t\t\tclippedVerticesItems[s + 14] = u2;\n\t\t\t\t\t\tclippedVerticesItems[s + 15] = v2;\n\n\t\t\t\t\t\tclippedVerticesItems[s + 16] = x3;\n\t\t\t\t\t\tclippedVerticesItems[s + 17] = y3;\n\t\t\t\t\t\tclippedVerticesItems[s + 18] = light.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 19] = light.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 20] = light.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 21] = light.a;\n\t\t\t\t\t\tclippedVerticesItems[s + 22] = u3;\n\t\t\t\t\t\tclippedVerticesItems[s + 23] = v3;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1;\n\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1;\n\t\t\t\t\t\tclippedVerticesItems[s + 8] = dark.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 9] = dark.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 10] = dark.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 11] = dark.a;\n\n\t\t\t\t\t\tclippedVerticesItems[s + 12] = x2;\n\t\t\t\t\t\tclippedVerticesItems[s + 13] = y2;\n\t\t\t\t\t\tclippedVerticesItems[s + 14] = light.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 15] = light.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 16] = light.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 17] = light.a;\n\t\t\t\t\t\tclippedVerticesItems[s + 18] = u2;\n\t\t\t\t\t\tclippedVerticesItems[s + 19] = v2;\n\t\t\t\t\t\tclippedVerticesItems[s + 20] = dark.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 21] = dark.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 22] = dark.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 23] = dark.a;\n\n\t\t\t\t\t\tclippedVerticesItems[s + 24] = x3;\n\t\t\t\t\t\tclippedVerticesItems[s + 25] = y3;\n\t\t\t\t\t\tclippedVerticesItems[s + 26] = light.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 27] = light.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 28] = light.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 29] = light.a;\n\t\t\t\t\t\tclippedVerticesItems[s + 30] = u3;\n\t\t\t\t\t\tclippedVerticesItems[s + 31] = v3;\n\t\t\t\t\t\tclippedVerticesItems[s + 32] = dark.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 33] = dark.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 34] = dark.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 35] = dark.a;\n\t\t\t\t\t}\n\n\t\t\t\t\ts = clippedTriangles.length;\n\t\t\t\t\tlet clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);\n\t\t\t\t\tclippedTrianglesItems[s] = index;\n\t\t\t\t\tclippedTrianglesItems[s + 1] = (index + 1);\n\t\t\t\t\tclippedTrianglesItems[s + 2] = (index + 2);\n\t\t\t\t\tindex += 3;\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\n\t * area, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list. */\n\tclip(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, clippingArea: Array<number>, output: Array<number>) {\n\t\tlet originalOutput = output;\n\t\tlet clipped = false;\n\n\t\t// Avoid copy at the end.\n\t\tlet input: Array<number> = null;\n\t\tif (clippingArea.length % 4 >= 2) {\n\t\t\tinput = output;\n\t\t\toutput = this.scratch;\n\t\t} else\n\t\t\tinput = this.scratch;\n\n\t\tinput.length = 0;\n\t\tinput.push(x1);\n\t\tinput.push(y1);\n\t\tinput.push(x2);\n\t\tinput.push(y2);\n\t\tinput.push(x3);\n\t\tinput.push(y3);\n\t\tinput.push(x1);\n\t\tinput.push(y1);\n\t\toutput.length = 0;\n\n\t\tlet clippingVertices = clippingArea;\n\t\tlet clippingVerticesLast = clippingArea.length - 4;\n\t\tfor (let i = 0; ; i += 2) {\n\t\t\tlet edgeX = clippingVertices[i], edgeY = clippingVertices[i + 1];\n\t\t\tlet edgeX2 = clippingVertices[i + 2], edgeY2 = clippingVertices[i + 3];\n\t\t\tlet deltaX = edgeX - edgeX2, deltaY = edgeY - edgeY2;\n\n\t\t\tlet inputVertices = input;\n\t\t\tlet inputVerticesLength = input.length - 2, outputStart = output.length;\n\t\t\tfor (let ii = 0; ii < inputVerticesLength; ii += 2) {\n\t\t\t\tlet inputX = inputVertices[ii], inputY = inputVertices[ii + 1];\n\t\t\t\tlet inputX2 = inputVertices[ii + 2], inputY2 = inputVertices[ii + 3];\n\t\t\t\tlet side2 = deltaX * (inputY2 - edgeY2) - deltaY * (inputX2 - edgeX2) > 0;\n\t\t\t\tif (deltaX * (inputY - edgeY2) - deltaY * (inputX - edgeX2) > 0) {\n\t\t\t\t\tif (side2) { // v1 inside, v2 inside\n\t\t\t\t\t\toutput.push(inputX2);\n\t\t\t\t\t\toutput.push(inputY2);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// v1 inside, v2 outside\n\t\t\t\t\tlet c0 = inputY2 - inputY, c2 = inputX2 - inputX;\n\t\t\t\t\tlet s = c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY);\n\t\t\t\t\tif (Math.abs(s) > 0.000001) {\n\t\t\t\t\t\tlet ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / s;\n\t\t\t\t\t\toutput.push(edgeX + (edgeX2 - edgeX) * ua);\n\t\t\t\t\t\toutput.push(edgeY + (edgeY2 - edgeY) * ua);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.push(edgeX);\n\t\t\t\t\t\toutput.push(edgeY);\n\t\t\t\t\t}\n\t\t\t\t} else if (side2) { // v1 outside, v2 inside\n\t\t\t\t\tlet c0 = inputY2 - inputY, c2 = inputX2 - inputX;\n\t\t\t\t\tlet s = c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY);\n\t\t\t\t\tif (Math.abs(s) > 0.000001) {\n\t\t\t\t\t\tlet ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / s;\n\t\t\t\t\t\toutput.push(edgeX + (edgeX2 - edgeX) * ua);\n\t\t\t\t\t\toutput.push(edgeY + (edgeY2 - edgeY) * ua);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.push(edgeX);\n\t\t\t\t\t\toutput.push(edgeY);\n\t\t\t\t\t}\n\t\t\t\t\toutput.push(inputX2);\n\t\t\t\t\toutput.push(inputY2);\n\t\t\t\t}\n\t\t\t\tclipped = true;\n\t\t\t}\n\n\t\t\tif (outputStart == output.length) { // All edges outside.\n\t\t\t\toriginalOutput.length = 0;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\toutput.push(output[0]);\n\t\t\toutput.push(output[1]);\n\n\t\t\tif (i == clippingVerticesLast) break;\n\t\t\tlet temp = output;\n\t\t\toutput = input;\n\t\t\toutput.length = 0;\n\t\t\tinput = temp;\n\t\t}\n\n\t\tif (originalOutput != output) {\n\t\t\toriginalOutput.length = 0;\n\t\t\tfor (let i = 0, n = output.length - 2; i < n; i++)\n\t\t\t\toriginalOutput[i] = output[i];\n\t\t} else\n\t\t\toriginalOutput.length = originalOutput.length - 2;\n\n\t\treturn clipped;\n\t}\n\n\tpublic static makeClockwise(polygon: NumberArrayLike) {\n\t\tlet vertices = polygon;\n\t\tlet verticeslength = polygon.length;\n\n\t\tlet area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1], p1x = 0, p1y = 0, p2x = 0, p2y = 0;\n\t\tfor (let i = 0, n = verticeslength - 3; i < n; i += 2) {\n\t\t\tp1x = vertices[i];\n\t\t\tp1y = vertices[i + 1];\n\t\t\tp2x = vertices[i + 2];\n\t\t\tp2y = vertices[i + 3];\n\t\t\tarea += p1x * p2y - p2x * p1y;\n\t\t}\n\t\tif (area < 0) return;\n\n\t\tfor (let i = 0, lastX = verticeslength - 2, n = verticeslength >> 1; i < n; i += 2) {\n\t\t\tlet x = vertices[i], y = vertices[i + 1];\n\t\t\tlet other = lastX - i;\n\t\t\tvertices[i] = vertices[other];\n\t\t\tvertices[i + 1] = vertices[other + 1];\n\t\t\tvertices[other] = x;\n\t\t\tvertices[other + 1] = y;\n\t\t}\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Animation, Timeline, AttachmentTimeline, RGBATimeline, RGBTimeline, AlphaTimeline, RGBA2Timeline, RGB2Timeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, CurveTimeline1, CurveTimeline2, CurveTimeline } from \"./Animation\";\nimport { VertexAttachment, Attachment } from \"./attachments/Attachment\";\nimport { AttachmentLoader } from \"./attachments/AttachmentLoader\";\nimport { MeshAttachment } from \"./attachments/MeshAttachment\";\nimport { BoneData, TransformMode } from \"./BoneData\";\nimport { EventData } from \"./EventData\";\nimport { Event } from \"./Event\";\nimport { IkConstraintData } from \"./IkConstraintData\";\nimport { PathConstraintData, PositionMode, SpacingMode, RotateMode } from \"./PathConstraintData\";\nimport { SkeletonData } from \"./SkeletonData\";\nimport { Skin } from \"./Skin\";\nimport { SlotData, BlendMode } from \"./SlotData\";\nimport { TransformConstraintData } from \"./TransformConstraintData\";\nimport { Utils, Color, NumberArrayLike } from \"./Utils\";\n\n/** Loads skeleton data in the Spine JSON format.\n *\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */\nexport class SkeletonJson {\n\tattachmentLoader: AttachmentLoader;\n\n\t/** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n\t * runtime than were used in Spine.\n\t *\n\t * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\n\tscale = 1;\n\tprivate linkedMeshes = new Array<LinkedMesh>();\n\n\tconstructor(attachmentLoader: AttachmentLoader) {\n\t\tthis.attachmentLoader = attachmentLoader;\n\t}\n\n\treadSkeletonData(json: string | any): SkeletonData {\n\t\tlet scale = this.scale;\n\t\tlet skeletonData = new SkeletonData();\n\t\tlet root = typeof (json) === \"string\" ? JSON.parse(json) : json;\n\n\t\t// Skeleton\n\t\tlet skeletonMap = root.skeleton;\n\t\tif (skeletonMap) {\n\t\t\tskeletonData.hash = skeletonMap.hash;\n\t\t\tskeletonData.version = skeletonMap.spine;\n\t\t\tskeletonData.x = skeletonMap.x;\n\t\t\tskeletonData.y = skeletonMap.y;\n\t\t\tskeletonData.width = skeletonMap.width;\n\t\t\tskeletonData.height = skeletonMap.height;\n\t\t\tskeletonData.fps = skeletonMap.fps;\n\t\t\tskeletonData.imagesPath = skeletonMap.images;\n\t\t}\n\n\t\t// Bones\n\t\tif (root.bones) {\n\t\t\tfor (let i = 0; i < root.bones.length; i++) {\n\t\t\t\tlet boneMap = root.bones[i];\n\n\t\t\t\tlet parent: BoneData = null;\n\t\t\t\tlet parentName: string = getValue(boneMap, \"parent\", null);\n\t\t\t\tif (parentName) parent = skeletonData.findBone(parentName);\n\t\t\t\tlet data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\n\t\t\t\tdata.length = getValue(boneMap, \"length\", 0) * scale;\n\t\t\t\tdata.x = getValue(boneMap, \"x\", 0) * scale;\n\t\t\t\tdata.y = getValue(boneMap, \"y\", 0) * scale;\n\t\t\t\tdata.rotation = getValue(boneMap, \"rotation\", 0);\n\t\t\t\tdata.scaleX = getValue(boneMap, \"scaleX\", 1);\n\t\t\t\tdata.scaleY = getValue(boneMap, \"scaleY\", 1);\n\t\t\t\tdata.shearX = getValue(boneMap, \"shearX\", 0);\n\t\t\t\tdata.shearY = getValue(boneMap, \"shearY\", 0);\n\t\t\t\tdata.transformMode = Utils.enumValue(TransformMode, getValue(boneMap, \"transform\", \"Normal\"));\n\t\t\t\tdata.skinRequired = getValue(boneMap, \"skin\", false);\n\n\t\t\t\tlet color = getValue(boneMap, \"color\", null);\n\t\t\t\tif (color) data.color.setFromString(color);\n\n\t\t\t\tskeletonData.bones.push(data);\n\t\t\t}\n\t\t}\n\n\t\t// Slots.\n\t\tif (root.slots) {\n\t\t\tfor (let i = 0; i < root.slots.length; i++) {\n\t\t\t\tlet slotMap = root.slots[i];\n\t\t\t\tlet boneData = skeletonData.findBone(slotMap.bone);\n\t\t\t\tlet data = new SlotData(skeletonData.slots.length, slotMap.name, boneData);\n\n\t\t\t\tlet color: string = getValue(slotMap, \"color\", null);\n\t\t\t\tif (color) data.color.setFromString(color);\n\n\t\t\t\tlet dark: string = getValue(slotMap, \"dark\", null);\n\t\t\t\tif (dark) data.darkColor = Color.fromString(dark);\n\n\t\t\t\tdata.attachmentName = getValue(slotMap, \"attachment\", null);\n\t\t\t\tdata.blendMode = Utils.enumValue(BlendMode, getValue(slotMap, \"blend\", \"normal\"));\n\t\t\t\tskeletonData.slots.push(data);\n\t\t\t}\n\t\t}\n\n\t\t// IK constraints\n\t\tif (root.ik) {\n\t\t\tfor (let i = 0; i < root.ik.length; i++) {\n\t\t\t\tlet constraintMap = root.ik[i];\n\t\t\t\tlet data = new IkConstraintData(constraintMap.name);\n\t\t\t\tdata.order = getValue(constraintMap, \"order\", 0);\n\t\t\t\tdata.skinRequired = getValue(constraintMap, \"skin\", false);\n\n\t\t\t\tfor (let ii = 0; ii < constraintMap.bones.length; ii++)\n\t\t\t\t\tdata.bones.push(skeletonData.findBone(constraintMap.bones[ii]));\n\n\t\t\t\tdata.target = skeletonData.findBone(constraintMap.target);\n\n\t\t\t\tdata.mix = getValue(constraintMap, \"mix\", 1);\n\t\t\t\tdata.softness = getValue(constraintMap, \"softness\", 0) * scale;\n\t\t\t\tdata.bendDirection = getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\n\t\t\t\tdata.compress = getValue(constraintMap, \"compress\", false);\n\t\t\t\tdata.stretch = getValue(constraintMap, \"stretch\", false);\n\t\t\t\tdata.uniform = getValue(constraintMap, \"uniform\", false);\n\n\t\t\t\tskeletonData.ikConstraints.push(data);\n\t\t\t}\n\t\t}\n\n\t\t// Transform constraints.\n\t\tif (root.transform) {\n\t\t\tfor (let i = 0; i < root.transform.length; i++) {\n\t\t\t\tlet constraintMap = root.transform[i];\n\t\t\t\tlet data = new TransformConstraintData(constraintMap.name);\n\t\t\t\tdata.order = getValue(constraintMap, \"order\", 0);\n\t\t\t\tdata.skinRequired = getValue(constraintMap, \"skin\", false);\n\n\t\t\t\tfor (let ii = 0; ii < constraintMap.bones.length; ii++)\n\t\t\t\t\tdata.bones.push(skeletonData.findBone(constraintMap.bones[ii]));\n\n\t\t\t\tlet targetName: string = constraintMap.target;\n\t\t\t\tdata.target = skeletonData.findBone(targetName);\n\n\t\t\t\tdata.local = getValue(constraintMap, \"local\", false);\n\t\t\t\tdata.relative = getValue(constraintMap, \"relative\", false);\n\t\t\t\tdata.offsetRotation = getValue(constraintMap, \"rotation\", 0);\n\t\t\t\tdata.offsetX = getValue(constraintMap, \"x\", 0) * scale;\n\t\t\t\tdata.offsetY = getValue(constraintMap, \"y\", 0) * scale;\n\t\t\t\tdata.offsetScaleX = getValue(constraintMap, \"scaleX\", 0);\n\t\t\t\tdata.offsetScaleY = getValue(constraintMap, \"scaleY\", 0);\n\t\t\t\tdata.offsetShearY = getValue(constraintMap, \"shearY\", 0);\n\n\t\t\t\tdata.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\n\t\t\t\tdata.mixX = getValue(constraintMap, \"mixX\", 1);\n\t\t\t\tdata.mixY = getValue(constraintMap, \"mixY\", data.mixX);\n\t\t\t\tdata.mixScaleX = getValue(constraintMap, \"mixScaleX\", 1);\n\t\t\t\tdata.mixScaleY = getValue(constraintMap, \"mixScaleY\", data.mixScaleX);\n\t\t\t\tdata.mixShearY = getValue(constraintMap, \"mixShearY\", 1);\n\n\t\t\t\tskeletonData.transformConstraints.push(data);\n\t\t\t}\n\t\t}\n\n\t\t// Path constraints.\n\t\tif (root.path) {\n\t\t\tfor (let i = 0; i < root.path.length; i++) {\n\t\t\t\tlet constraintMap = root.path[i];\n\t\t\t\tlet data = new PathConstraintData(constraintMap.name);\n\t\t\t\tdata.order = getValue(constraintMap, \"order\", 0);\n\t\t\t\tdata.skinRequired = getValue(constraintMap, \"skin\", false);\n\n\t\t\t\tfor (let ii = 0; ii < constraintMap.bones.length; ii++)\n\t\t\t\t\tdata.bones.push(skeletonData.findBone(constraintMap.bones[ii]));\n\n\t\t\t\tlet targetName: string = constraintMap.target;\n\t\t\t\tdata.target = skeletonData.findSlot(targetName);\n\n\t\t\t\tdata.positionMode = Utils.enumValue(PositionMode, getValue(constraintMap, \"positionMode\", \"Percent\"));\n\t\t\t\tdata.spacingMode = Utils.enumValue(SpacingMode, getValue(constraintMap, \"spacingMode\", \"Length\"));\n\t\t\t\tdata.rotateMode = Utils.enumValue(RotateMode, getValue(constraintMap, \"rotateMode\", \"Tangent\"));\n\t\t\t\tdata.offsetRotation = getValue(constraintMap, \"rotation\", 0);\n\t\t\t\tdata.position = getValue(constraintMap, \"position\", 0);\n\t\t\t\tif (data.positionMode == PositionMode.Fixed) data.position *= scale;\n\t\t\t\tdata.spacing = getValue(constraintMap, \"spacing\", 0);\n\t\t\t\tif (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\n\t\t\t\tdata.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\n\t\t\t\tdata.mixX = getValue(constraintMap, \"mixX\", 1);\n\t\t\t\tdata.mixY = getValue(constraintMap, \"mixY\", data.mixX);\n\n\t\t\t\tskeletonData.pathConstraints.push(data);\n\t\t\t}\n\t\t}\n\n\t\t// Skins.\n\t\tif (root.skins) {\n\t\t\tfor (let i = 0; i < root.skins.length; i++) {\n\t\t\t\tlet skinMap = root.skins[i]\n\t\t\t\tlet skin = new Skin(skinMap.name);\n\n\t\t\t\tif (skinMap.bones) {\n\t\t\t\t\tfor (let ii = 0; ii < skinMap.bones.length; ii++)\n\t\t\t\t\t\tskin.bones.push(skeletonData.findBone(skinMap.bones[ii]));\n\t\t\t\t}\n\n\t\t\t\tif (skinMap.ik) {\n\t\t\t\t\tfor (let ii = 0; ii < skinMap.ik.length; ii++)\n\t\t\t\t\t\tskin.constraints.push(skeletonData.findIkConstraint(skinMap.ik[ii]));\n\t\t\t\t}\n\n\t\t\t\tif (skinMap.transform) {\n\t\t\t\t\tfor (let ii = 0; ii < skinMap.transform.length; ii++)\n\t\t\t\t\t\tskin.constraints.push(skeletonData.findTransformConstraint(skinMap.transform[ii]));\n\t\t\t\t}\n\n\t\t\t\tif (skinMap.path) {\n\t\t\t\t\tfor (let ii = 0; ii < skinMap.path.length; ii++)\n\t\t\t\t\t\tskin.constraints.push(skeletonData.findPathConstraint(skinMap.path[ii]));\n\t\t\t\t}\n\n\t\t\t\tfor (let slotName in skinMap.attachments) {\n\t\t\t\t\tlet slot = skeletonData.findSlot(slotName);\n\t\t\t\t\tlet slotMap = skinMap.attachments[slotName];\n\t\t\t\t\tfor (let entryName in slotMap) {\n\t\t\t\t\t\tlet attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\n\t\t\t\t\t\tif (attachment) skin.setAttachment(slot.index, entryName, attachment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tskeletonData.skins.push(skin);\n\t\t\t\tif (skin.name == \"default\") skeletonData.defaultSkin = skin;\n\t\t\t}\n\t\t}\n\n\t\t// Linked meshes.\n\t\tfor (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\n\t\t\tlet linkedMesh = this.linkedMeshes[i];\n\t\t\tlet skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n\t\t\tlet parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n\t\t\tlinkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? <VertexAttachment>parent : <VertexAttachment>linkedMesh.mesh;\n\t\t\tlinkedMesh.mesh.setParentMesh(<MeshAttachment>parent);\n\t\t\tlinkedMesh.mesh.updateUVs();\n\t\t}\n\t\tthis.linkedMeshes.length = 0;\n\n\t\t// Events.\n\t\tif (root.events) {\n\t\t\tfor (let eventName in root.events) {\n\t\t\t\tlet eventMap = root.events[eventName];\n\t\t\t\tlet data = new EventData(eventName);\n\t\t\t\tdata.intValue = getValue(eventMap, \"int\", 0);\n\t\t\t\tdata.floatValue = getValue(eventMap, \"float\", 0);\n\t\t\t\tdata.stringValue = getValue(eventMap, \"string\", \"\");\n\t\t\t\tdata.audioPath = getValue(eventMap, \"audio\", null);\n\t\t\t\tif (data.audioPath) {\n\t\t\t\t\tdata.volume = getValue(eventMap, \"volume\", 1);\n\t\t\t\t\tdata.balance = getValue(eventMap, \"balance\", 0);\n\t\t\t\t}\n\t\t\t\tskeletonData.events.push(data);\n\t\t\t}\n\t\t}\n\n\t\t// Animations.\n\t\tif (root.animations) {\n\t\t\tfor (let animationName in root.animations) {\n\t\t\t\tlet animationMap = root.animations[animationName];\n\t\t\t\tthis.readAnimation(animationMap, animationName, skeletonData);\n\t\t\t}\n\t\t}\n\n\t\treturn skeletonData;\n\t}\n\n\treadAttachment(map: any, skin: Skin, slotIndex: number, name: string, skeletonData: SkeletonData): Attachment {\n\t\tlet scale = this.scale;\n\t\tname = getValue(map, \"name\", name);\n\n\t\tswitch (getValue(map, \"type\", \"region\")) {\n\t\t\tcase \"region\": {\n\t\t\t\tlet path = getValue(map, \"path\", name);\n\t\t\t\tlet region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n\t\t\t\tif (!region) return null;\n\t\t\t\tregion.path = path;\n\t\t\t\tregion.x = getValue(map, \"x\", 0) * scale;\n\t\t\t\tregion.y = getValue(map, \"y\", 0) * scale;\n\t\t\t\tregion.scaleX = getValue(map, \"scaleX\", 1);\n\t\t\t\tregion.scaleY = getValue(map, \"scaleY\", 1);\n\t\t\t\tregion.rotation = getValue(map, \"rotation\", 0);\n\t\t\t\tregion.width = map.width * scale;\n\t\t\t\tregion.height = map.height * scale;\n\n\t\t\t\tlet color: string = getValue(map, \"color\", null);\n\t\t\t\tif (color) region.color.setFromString(color);\n\n\t\t\t\tregion.updateOffset();\n\t\t\t\treturn region;\n\t\t\t}\n\t\t\tcase \"boundingbox\": {\n\t\t\t\tlet box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n\t\t\t\tif (!box) return null;\n\t\t\t\tthis.readVertices(map, box, map.vertexCount << 1);\n\t\t\t\tlet color: string = getValue(map, \"color\", null);\n\t\t\t\tif (color) box.color.setFromString(color);\n\t\t\t\treturn box;\n\t\t\t}\n\t\t\tcase \"mesh\":\n\t\t\tcase \"linkedmesh\": {\n\t\t\t\tlet path = getValue(map, \"path\", name);\n\t\t\t\tlet mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n\t\t\t\tif (!mesh) return null;\n\t\t\t\tmesh.path = path;\n\n\t\t\t\tlet color = getValue(map, \"color\", null);\n\t\t\t\tif (color) mesh.color.setFromString(color);\n\n\t\t\t\tmesh.width = getValue(map, \"width\", 0) * scale;\n\t\t\t\tmesh.height = getValue(map, \"height\", 0) * scale;\n\n\t\t\t\tlet parent: string = getValue(map, \"parent\", null);\n\t\t\t\tif (parent) {\n\t\t\t\t\tthis.linkedMeshes.push(new LinkedMesh(mesh, <string>getValue(map, \"skin\", null), slotIndex, parent, getValue(map, \"deform\", true)));\n\t\t\t\t\treturn mesh;\n\t\t\t\t}\n\n\t\t\t\tlet uvs: Array<number> = map.uvs;\n\t\t\t\tthis.readVertices(map, mesh, uvs.length);\n\t\t\t\tmesh.triangles = map.triangles;\n\t\t\t\tmesh.regionUVs = uvs;\n\t\t\t\tmesh.updateUVs();\n\n\t\t\t\tmesh.edges = getValue(map, \"edges\", null);\n\t\t\t\tmesh.hullLength = getValue(map, \"hull\", 0) * 2;\n\t\t\t\treturn mesh;\n\t\t\t}\n\t\t\tcase \"path\": {\n\t\t\t\tlet path = this.attachmentLoader.newPathAttachment(skin, name);\n\t\t\t\tif (!path) return null;\n\t\t\t\tpath.closed = getValue(map, \"closed\", false);\n\t\t\t\tpath.constantSpeed = getValue(map, \"constantSpeed\", true);\n\n\t\t\t\tlet vertexCount = map.vertexCount;\n\t\t\t\tthis.readVertices(map, path, vertexCount << 1);\n\n\t\t\t\tlet lengths: Array<number> = Utils.newArray(vertexCount / 3, 0);\n\t\t\t\tfor (let i = 0; i < map.lengths.length; i++)\n\t\t\t\t\tlengths[i] = map.lengths[i] * scale;\n\t\t\t\tpath.lengths = lengths;\n\n\t\t\t\tlet color: string = getValue(map, \"color\", null);\n\t\t\t\tif (color) path.color.setFromString(color);\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\tcase \"point\": {\n\t\t\t\tlet point = this.attachmentLoader.newPointAttachment(skin, name);\n\t\t\t\tif (!point) return null;\n\t\t\t\tpoint.x = getValue(map, \"x\", 0) * scale;\n\t\t\t\tpoint.y = getValue(map, \"y\", 0) * scale;\n\t\t\t\tpoint.rotation = getValue(map, \"rotation\", 0);\n\n\t\t\t\tlet color = getValue(map, \"color\", null);\n\t\t\t\tif (color) point.color.setFromString(color);\n\t\t\t\treturn point;\n\t\t\t}\n\t\t\tcase \"clipping\": {\n\t\t\t\tlet clip = this.attachmentLoader.newClippingAttachment(skin, name);\n\t\t\t\tif (!clip) return null;\n\n\t\t\t\tlet end = getValue(map, \"end\", null);\n\t\t\t\tif (end) clip.endSlot = skeletonData.findSlot(end);\n\n\t\t\t\tlet vertexCount = map.vertexCount;\n\t\t\t\tthis.readVertices(map, clip, vertexCount << 1);\n\n\t\t\t\tlet color: string = getValue(map, \"color\", null);\n\t\t\t\tif (color) clip.color.setFromString(color);\n\t\t\t\treturn clip;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treadVertices(map: any, attachment: VertexAttachment, verticesLength: number) {\n\t\tlet scale = this.scale;\n\t\tattachment.worldVerticesLength = verticesLength;\n\t\tlet vertices: Array<number> = map.vertices;\n\t\tif (verticesLength == vertices.length) {\n\t\t\tlet scaledVertices = Utils.toFloatArray(vertices);\n\t\t\tif (scale != 1) {\n\t\t\t\tfor (let i = 0, n = vertices.length; i < n; i++)\n\t\t\t\t\tscaledVertices[i] *= scale;\n\t\t\t}\n\t\t\tattachment.vertices = scaledVertices;\n\t\t\treturn;\n\t\t}\n\t\tlet weights = new Array<number>();\n\t\tlet bones = new Array<number>();\n\t\tfor (let i = 0, n = vertices.length; i < n;) {\n\t\t\tlet boneCount = vertices[i++];\n\t\t\tbones.push(boneCount);\n\t\t\tfor (let nn = i + boneCount * 4; i < nn; i += 4) {\n\t\t\t\tbones.push(vertices[i]);\n\t\t\t\tweights.push(vertices[i + 1] * scale);\n\t\t\t\tweights.push(vertices[i + 2] * scale);\n\t\t\t\tweights.push(vertices[i + 3]);\n\t\t\t}\n\t\t}\n\t\tattachment.bones = bones;\n\t\tattachment.vertices = Utils.toFloatArray(weights);\n\t}\n\n\treadAnimation(map: any, name: string, skeletonData: SkeletonData) {\n\t\tlet scale = this.scale;\n\t\tlet timelines = new Array<Timeline>();\n\n\t\t// Slot timelines.\n\t\tif (map.slots) {\n\t\t\tfor (let slotName in map.slots) {\n\t\t\t\tlet slotMap = map.slots[slotName];\n\t\t\t\tlet slotIndex = skeletonData.findSlotIndex(slotName);\n\t\t\t\tfor (let timelineName in slotMap) {\n\t\t\t\t\tlet timelineMap = slotMap[timelineName];\n\t\t\t\t\tif (!timelineMap) continue;\n\t\t\t\t\tif (timelineName == \"attachment\") {\n\t\t\t\t\t\tlet timeline = new AttachmentTimeline(timelineMap.length, slotIndex);\n\t\t\t\t\t\tfor (let frame = 0; frame < timelineMap.length; frame++) {\n\t\t\t\t\t\t\tlet keyMap = timelineMap[frame];\n\t\t\t\t\t\t\ttimeline.setFrame(frame, getValue(keyMap, \"time\", 0), keyMap.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\n\t\t\t\t\t} else if (timelineName == \"rgba\") {\n\t\t\t\t\t\tlet timeline = new RGBATimeline(timelineMap.length, timelineMap.length << 2, slotIndex);\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\n\t\t\t\t\t\tlet color = Color.fromString(keyMap.color);\n\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, color.r, color.g, color.b, color.a);\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\n\t\t\t\t\t\t\tif (!nextMap) {\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\t\t\t\t\t\tlet newColor = Color.fromString(nextMap.color);\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\n\t\t\t\t\t\t\tif (curve) {\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tcolor = newColor;\n\t\t\t\t\t\t\tkeyMap = nextMap;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttimelines.push(timeline);\n\n\t\t\t\t\t} else if (timelineName == \"rgb\") {\n\t\t\t\t\t\tlet timeline = new RGBTimeline(timelineMap.length, timelineMap.length * 3, slotIndex);\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\n\t\t\t\t\t\tlet color = Color.fromString(keyMap.color);\n\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, color.r, color.g, color.b);\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\n\t\t\t\t\t\t\tif (!nextMap) {\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\t\t\t\t\t\tlet newColor = Color.fromString(nextMap.color);\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\n\t\t\t\t\t\t\tif (curve) {\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tcolor = newColor;\n\t\t\t\t\t\t\tkeyMap = nextMap;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttimelines.push(timeline);\n\n\t\t\t\t\t} else if (timelineName == \"alpha\") {\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, new AlphaTimeline(timelineMap.length, timelineMap.length, slotIndex), 0, 1));\n\t\t\t\t\t} else if (timelineName == \"rgba2\") {\n\t\t\t\t\t\tlet timeline = new RGBA2Timeline(timelineMap.length, timelineMap.length * 7, slotIndex);\n\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\n\t\t\t\t\t\tlet color = Color.fromString(keyMap.light);\n\t\t\t\t\t\tlet color2 = Color.fromString(keyMap.dark);\n\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, color.r, color.g, color.b, color.a, color2.r, color2.g, color2.b);\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\n\t\t\t\t\t\t\tif (!nextMap) {\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\t\t\t\t\t\tlet newColor = Color.fromString(nextMap.light);\n\t\t\t\t\t\t\tlet newColor2 = Color.fromString(nextMap.dark);\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\n\t\t\t\t\t\t\tif (curve) {\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.r, newColor2.r, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.g, newColor2.g, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 6, time, time2, color2.b, newColor2.b, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tcolor = newColor;\n\t\t\t\t\t\t\tcolor2 = newColor2;\n\t\t\t\t\t\t\tkeyMap = nextMap;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttimelines.push(timeline);\n\n\t\t\t\t\t} else if (timelineName == \"rgb2\") {\n\t\t\t\t\t\tlet timeline = new RGB2Timeline(timelineMap.length, timelineMap.length * 6, slotIndex);\n\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\n\t\t\t\t\t\tlet color = Color.fromString(keyMap.light);\n\t\t\t\t\t\tlet color2 = Color.fromString(keyMap.dark);\n\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, color.r, color.g, color.b, color2.r, color2.g, color2.b);\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\n\t\t\t\t\t\t\tif (!nextMap) {\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\t\t\t\t\t\tlet newColor = Color.fromString(nextMap.light);\n\t\t\t\t\t\t\tlet newColor2 = Color.fromString(nextMap.dark);\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\n\t\t\t\t\t\t\tif (curve) {\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color2.r, newColor2.r, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.g, newColor2.g, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.b, newColor2.b, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tcolor = newColor;\n\t\t\t\t\t\t\tcolor2 = newColor2;\n\t\t\t\t\t\t\tkeyMap = nextMap;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Bone timelines.\n\t\tif (map.bones) {\n\t\t\tfor (let boneName in map.bones) {\n\t\t\t\tlet boneMap = map.bones[boneName];\n\t\t\t\tlet boneIndex = skeletonData.findBoneIndex(boneName);\n\t\t\t\tfor (let timelineName in boneMap) {\n\t\t\t\t\tlet timelineMap = boneMap[timelineName];\n\t\t\t\t\tif (timelineMap.length == 0) continue;\n\n\t\t\t\t\tif (timelineName === \"rotate\") {\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, new RotateTimeline(timelineMap.length, timelineMap.length, boneIndex), 0, 1));\n\t\t\t\t\t} else if (timelineName === \"translate\") {\n\t\t\t\t\t\tlet timeline = new TranslateTimeline(timelineMap.length, timelineMap.length << 1, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, scale));\n\t\t\t\t\t} else if (timelineName === \"translatex\") {\n\t\t\t\t\t\tlet timeline = new TranslateXTimeline(timelineMap.length, timelineMap.length, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, scale));\n\t\t\t\t\t} else if (timelineName === \"translatey\") {\n\t\t\t\t\t\tlet timeline = new TranslateYTimeline(timelineMap.length, timelineMap.length, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, scale));\n\t\t\t\t\t} else if (timelineName === \"scale\") {\n\t\t\t\t\t\tlet timeline = new ScaleTimeline(timelineMap.length, timelineMap.length << 1, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 1, 1));\n\t\t\t\t\t} else if (timelineName === \"scalex\") {\n\t\t\t\t\t\tlet timeline = new ScaleXTimeline(timelineMap.length, timelineMap.length, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 1, 1));\n\t\t\t\t\t} else if (timelineName === \"scaley\") {\n\t\t\t\t\t\tlet timeline = new ScaleYTimeline(timelineMap.length, timelineMap.length, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 1, 1));\n\t\t\t\t\t} else if (timelineName === \"shear\") {\n\t\t\t\t\t\tlet timeline = new ShearTimeline(timelineMap.length, timelineMap.length << 1, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, 1));\n\t\t\t\t\t} else if (timelineName === \"shearx\") {\n\t\t\t\t\t\tlet timeline = new ShearXTimeline(timelineMap.length, timelineMap.length, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n\t\t\t\t\t} else if (timelineName === \"sheary\") {\n\t\t\t\t\t\tlet timeline = new ShearYTimeline(timelineMap.length, timelineMap.length, boneIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// IK constraint timelines.\n\t\tif (map.ik) {\n\t\t\tfor (let constraintName in map.ik) {\n\t\t\t\tlet constraintMap = map.ik[constraintName];\n\t\t\t\tlet keyMap = constraintMap[0];\n\t\t\t\tif (!keyMap) continue;\n\n\t\t\t\tlet constraint = skeletonData.findIkConstraint(constraintName);\n\t\t\t\tlet constraintIndex = skeletonData.ikConstraints.indexOf(constraint);\n\t\t\t\tlet timeline = new IkConstraintTimeline(constraintMap.length, constraintMap.length << 1, constraintIndex);\n\n\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\n\t\t\t\tlet mix = getValue(keyMap, \"mix\", 1);\n\t\t\t\tlet softness = getValue(keyMap, \"softness\", 0) * scale;\n\n\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\ttimeline.setFrame(frame, time, mix, softness, getValue(keyMap, \"bendPositive\", true) ? 1 : -1, getValue(keyMap, \"compress\", false), getValue(keyMap, \"stretch\", false));\n\t\t\t\t\tlet nextMap = constraintMap[frame + 1];\n\t\t\t\t\tif (!nextMap) {\n\t\t\t\t\t\ttimeline.shrink(bezier);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\t\t\t\tlet mix2 = getValue(nextMap, \"mix\", 1);\n\t\t\t\t\tlet softness2 = getValue(nextMap, \"softness\", 0) * scale;\n\t\t\t\t\tlet curve = keyMap.curve;\n\t\t\t\t\tif (curve) {\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mix, mix2, 1);\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, softness, softness2, scale);\n\t\t\t\t\t}\n\n\t\t\t\t\ttime = time2;\n\t\t\t\t\tmix = mix2;\n\t\t\t\t\tsoftness = softness2;\n\t\t\t\t\tkeyMap = nextMap;\n\t\t\t\t}\n\t\t\t\ttimelines.push(timeline);\n\t\t\t}\n\t\t}\n\n\t\t// Transform constraint timelines.\n\t\tif (map.transform) {\n\t\t\tfor (let constraintName in map.transform) {\n\t\t\t\tlet timelineMap = map.transform[constraintName];\n\t\t\t\tlet keyMap = timelineMap[0];\n\t\t\t\tif (!keyMap) continue;\n\n\t\t\t\tlet constraint = skeletonData.findTransformConstraint(constraintName);\n\t\t\t\tlet constraintIndex = skeletonData.transformConstraints.indexOf(constraint);\n\t\t\t\tlet timeline = new TransformConstraintTimeline(timelineMap.length, timelineMap.length << 2, constraintIndex);\n\n\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\n\t\t\t\tlet mixRotate = getValue(keyMap, \"mixRotate\", 1);\n\t\t\t\tlet mixX = getValue(keyMap, \"mixX\", 1);\n\t\t\t\tlet mixY = getValue(keyMap, \"mixY\", mixX);\n\t\t\t\tlet mixScaleX = getValue(keyMap, \"mixScaleX\", 1);\n\t\t\t\tlet mixScaleY = getValue(keyMap, \"mixScaleY\", mixScaleX);\n\t\t\t\tlet mixShearY = getValue(keyMap, \"mixShearY\", 1);\n\n\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\ttimeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\n\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\n\t\t\t\t\tif (!nextMap) {\n\t\t\t\t\t\ttimeline.shrink(bezier);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\t\t\t\tlet mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\n\t\t\t\t\tlet mixX2 = getValue(nextMap, \"mixX\", 1);\n\t\t\t\t\tlet mixY2 = getValue(nextMap, \"mixY\", mixX2);\n\t\t\t\t\tlet mixScaleX2 = getValue(nextMap, \"mixScaleX\", 1);\n\t\t\t\t\tlet mixScaleY2 = getValue(nextMap, \"mixScaleY\", mixScaleX2);\n\t\t\t\t\tlet mixShearY2 = getValue(nextMap, \"mixShearY\", 1);\n\t\t\t\t\tlet curve = keyMap.curve;\n\t\t\t\t\tif (curve) {\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, mixShearY, mixShearY2, 1);\n\t\t\t\t\t}\n\n\t\t\t\t\ttime = time2;\n\t\t\t\t\tmixRotate = mixRotate2;\n\t\t\t\t\tmixX = mixX2;\n\t\t\t\t\tmixY = mixY2;\n\t\t\t\t\tmixScaleX = mixScaleX2;\n\t\t\t\t\tmixScaleY = mixScaleY2;\n\t\t\t\t\tmixScaleX = mixScaleX2;\n\t\t\t\t\tkeyMap = nextMap;\n\t\t\t\t}\n\t\t\t\ttimelines.push(timeline);\n\t\t\t}\n\t\t}\n\n\t\t// Path constraint timelines.\n\t\tif (map.path) {\n\t\t\tfor (let constraintName in map.path) {\n\t\t\t\tlet constraintMap = map.path[constraintName];\n\t\t\t\tlet constraint = skeletonData.findPathConstraint(constraintName);\n\t\t\t\tlet constraintIndex = skeletonData.pathConstraints.indexOf(constraint);\n\t\t\t\tfor (let timelineName in constraintMap) {\n\t\t\t\t\tlet timelineMap = constraintMap[timelineName];\n\t\t\t\t\tlet keyMap = timelineMap[0];\n\t\t\t\t\tif (!keyMap) continue;\n\n\t\t\t\t\tif (timelineName === \"position\") {\n\t\t\t\t\t\tlet timeline = new PathConstraintPositionTimeline(timelineMap.length, timelineMap.length, constraintIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, constraint.positionMode == PositionMode.Fixed ? scale : 1));\n\t\t\t\t\t} else if (timelineName === \"spacing\") {\n\t\t\t\t\t\tlet timeline = new PathConstraintSpacingTimeline(timelineMap.length, timelineMap.length, constraintIndex);\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, constraint.spacingMode == SpacingMode.Length || constraint.spacingMode == SpacingMode.Fixed ? scale : 1));\n\t\t\t\t\t} else if (timelineName === \"mix\") {\n\t\t\t\t\t\tlet timeline = new PathConstraintMixTimeline(timelineMap.size, timelineMap.size * 3, constraintIndex);\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\n\t\t\t\t\t\tlet mixRotate = getValue(keyMap, \"mixRotate\", 1);\n\t\t\t\t\t\tlet mixX = getValue(keyMap, \"mixX\", 1);\n\t\t\t\t\t\tlet mixY = getValue(keyMap, \"mixY\", mixX);\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, mixRotate, mixX, mixY);\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\n\t\t\t\t\t\t\tif (!nextMap) {\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\t\t\t\t\t\tlet mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\n\t\t\t\t\t\t\tlet mixX2 = getValue(nextMap, \"mixX\", 1);\n\t\t\t\t\t\t\tlet mixY2 = getValue(nextMap, \"mixY\", mixX2);\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\n\t\t\t\t\t\t\tif (curve) {\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tmixRotate = mixRotate2;\n\t\t\t\t\t\t\tmixX = mixX2;\n\t\t\t\t\t\t\tmixY = mixY2;\n\t\t\t\t\t\t\tkeyMap = nextMap;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Deform timelines.\n\t\tif (map.deform) {\n\t\t\tfor (let deformName in map.deform) {\n\t\t\t\tlet deformMap = map.deform[deformName];\n\t\t\t\tlet skin = skeletonData.findSkin(deformName);\n\t\t\t\tfor (let slotName in deformMap) {\n\t\t\t\t\tlet slotMap = deformMap[slotName];\n\t\t\t\t\tlet slotIndex = skeletonData.findSlotIndex(slotName);\n\t\t\t\t\tfor (let timelineName in slotMap) {\n\t\t\t\t\t\tlet timelineMap = slotMap[timelineName];\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\n\t\t\t\t\t\tif (!keyMap) continue;\n\n\t\t\t\t\t\tlet attachment = <VertexAttachment>skin.getAttachment(slotIndex, timelineName);\n\t\t\t\t\t\tlet weighted = attachment.bones;\n\t\t\t\t\t\tlet vertices = attachment.vertices;\n\t\t\t\t\t\tlet deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n\n\t\t\t\t\t\tlet timeline = new DeformTimeline(timelineMap.length, timelineMap.length, slotIndex, attachment);\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\n\t\t\t\t\t\t\tlet deform: NumberArrayLike;\n\t\t\t\t\t\t\tlet verticesValue: Array<Number> = getValue(keyMap, \"vertices\", null);\n\t\t\t\t\t\t\tif (!verticesValue)\n\t\t\t\t\t\t\t\tdeform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdeform = Utils.newFloatArray(deformLength);\n\t\t\t\t\t\t\t\tlet start = <number>getValue(keyMap, \"offset\", 0);\n\t\t\t\t\t\t\t\tUtils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\n\t\t\t\t\t\t\t\tif (scale != 1) {\n\t\t\t\t\t\t\t\t\tfor (let i = start, n = i + verticesValue.length; i < n; i++)\n\t\t\t\t\t\t\t\t\t\tdeform[i] *= scale;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!weighted) {\n\t\t\t\t\t\t\t\t\tfor (let i = 0; i < deformLength; i++)\n\t\t\t\t\t\t\t\t\t\tdeform[i] += vertices[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, deform);\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\n\t\t\t\t\t\t\tif (!nextMap) {\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\n\t\t\t\t\t\t\tif (curve) bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, 0, 1, 1);\n\t\t\t\t\t\t\ttime = time2;\n\t\t\t\t\t\t\tkeyMap = nextMap;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Draw order timelines.\n\t\tif (map.drawOrder) {\n\t\t\tlet timeline = new DrawOrderTimeline(map.drawOrder.length);\n\t\t\tlet slotCount = skeletonData.slots.length;\n\t\t\tlet frame = 0;\n\t\t\tfor (let i = 0; i < map.drawOrder.length; i++, frame++) {\n\t\t\t\tlet drawOrderMap = map.drawOrder[i];\n\t\t\t\tlet drawOrder: Array<number> = null;\n\t\t\t\tlet offsets = getValue(drawOrderMap, \"offsets\", null);\n\t\t\t\tif (offsets) {\n\t\t\t\t\tdrawOrder = Utils.newArray<number>(slotCount, -1);\n\t\t\t\t\tlet unchanged = Utils.newArray<number>(slotCount - offsets.length, 0);\n\t\t\t\t\tlet originalIndex = 0, unchangedIndex = 0;\n\t\t\t\t\tfor (let ii = 0; ii < offsets.length; ii++) {\n\t\t\t\t\t\tlet offsetMap = offsets[ii];\n\t\t\t\t\t\tlet slotIndex = skeletonData.findSlotIndex(offsetMap.slot);\n\t\t\t\t\t\t// Collect unchanged items.\n\t\t\t\t\t\twhile (originalIndex != slotIndex)\n\t\t\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\n\t\t\t\t\t\t// Set changed items.\n\t\t\t\t\t\tdrawOrder[originalIndex + offsetMap.offset] = originalIndex++;\n\t\t\t\t\t}\n\t\t\t\t\t// Collect remaining unchanged items.\n\t\t\t\t\twhile (originalIndex < slotCount)\n\t\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\n\t\t\t\t\t// Fill in unchanged items.\n\t\t\t\t\tfor (let ii = slotCount - 1; ii >= 0; ii--)\n\t\t\t\t\t\tif (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n\t\t\t\t}\n\t\t\t\ttimeline.setFrame(frame, getValue(drawOrderMap, \"time\", 0), drawOrder);\n\t\t\t}\n\t\t\ttimelines.push(timeline);\n\t\t}\n\n\t\t// Event timelines.\n\t\tif (map.events) {\n\t\t\tlet timeline = new EventTimeline(map.events.length);\n\t\t\tlet frame = 0;\n\t\t\tfor (let i = 0; i < map.events.length; i++, frame++) {\n\t\t\t\tlet eventMap = map.events[i];\n\t\t\t\tlet eventData = skeletonData.findEvent(eventMap.name);\n\t\t\t\tlet event = new Event(Utils.toSinglePrecision(getValue(eventMap, \"time\", 0)), eventData);\n\t\t\t\tevent.intValue = getValue(eventMap, \"int\", eventData.intValue);\n\t\t\t\tevent.floatValue = getValue(eventMap, \"float\", eventData.floatValue);\n\t\t\t\tevent.stringValue = getValue(eventMap, \"string\", eventData.stringValue);\n\t\t\t\tif (event.data.audioPath) {\n\t\t\t\t\tevent.volume = getValue(eventMap, \"volume\", 1);\n\t\t\t\t\tevent.balance = getValue(eventMap, \"balance\", 0);\n\t\t\t\t}\n\t\t\t\ttimeline.setFrame(frame, event);\n\t\t\t}\n\t\t\ttimelines.push(timeline);\n\t\t}\n\n\t\tlet duration = 0;\n\t\tfor (let i = 0, n = timelines.length; i < n; i++)\n\t\t\tduration = Math.max(duration, timelines[i].getDuration());\n\t\tskeletonData.animations.push(new Animation(name, timelines, duration));\n\t}\n}\n\nclass LinkedMesh {\n\tparent: string; skin: string;\n\tslotIndex: number;\n\tmesh: MeshAttachment;\n\tinheritDeform: boolean;\n\n\tconstructor(mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\n\t\tthis.mesh = mesh;\n\t\tthis.skin = skin;\n\t\tthis.slotIndex = slotIndex;\n\t\tthis.parent = parent;\n\t\tthis.inheritDeform = inheritDeform;\n\t}\n}\n\nfunction readTimeline1(keys: any[], timeline: CurveTimeline1, defaultValue: number, scale: number) {\n\tlet keyMap = keys[0];\n\tlet time = getValue(keyMap, \"time\", 0);\n\tlet value = getValue(keyMap, \"value\", defaultValue) * scale;\n\tlet bezier = 0;\n\tfor (let frame = 0; ; frame++) {\n\t\ttimeline.setFrame(frame, time, value);\n\t\tlet nextMap = keys[frame + 1];\n\t\tif (!nextMap) {\n\t\t\ttimeline.shrink(bezier);\n\t\t\treturn timeline;\n\t\t}\n\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\tlet value2 = getValue(nextMap, \"value\", defaultValue) * scale;\n\t\tif (keyMap.curve) bezier = readCurve(keyMap.curve, timeline, bezier, frame, 0, time, time2, value, value2, scale);\n\t\ttime = time2;\n\t\tvalue = value2;\n\t\tkeyMap = nextMap;\n\t}\n}\n\nfunction readTimeline2(keys: any[], timeline: CurveTimeline2, name1: string, name2: string, defaultValue: number, scale: number) {\n\tlet keyMap = keys[0];\n\tlet time = getValue(keyMap, \"time\", 0);\n\tlet value1 = getValue(keyMap, name1, defaultValue) * scale;\n\tlet value2 = getValue(keyMap, name2, defaultValue) * scale;\n\tlet bezier = 0;\n\tfor (let frame = 0; ; frame++) {\n\t\ttimeline.setFrame(frame, time, value1, value2);\n\t\tlet nextMap = keys[frame + 1];\n\t\tif (!nextMap) {\n\t\t\ttimeline.shrink(bezier);\n\t\t\treturn timeline;\n\t\t}\n\t\tlet time2 = getValue(nextMap, \"time\", 0);\n\t\tlet nvalue1 = getValue(nextMap, name1, defaultValue) * scale;\n\t\tlet nvalue2 = getValue(nextMap, name2, defaultValue) * scale;\n\t\tlet curve = keyMap.curve;\n\t\tif (curve) {\n\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, value1, nvalue1, scale);\n\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, value2, nvalue2, scale);\n\t\t}\n\t\ttime = time2;\n\t\tvalue1 = nvalue1;\n\t\tvalue2 = nvalue2;\n\t\tkeyMap = nextMap;\n\t}\n}\n\nfunction readCurve(curve: any, timeline: CurveTimeline, bezier: number, frame: number, value: number, time1: number, time2: number,\n\tvalue1: number, value2: number, scale: number) {\n\tif (curve == \"stepped\") {\n\t\ttimeline.setStepped(frame);\n\t\treturn bezier;\n\t}\n\tlet i = value << 2;\n\tlet cx1 = curve[i];\n\tlet cy1 = curve[i + 1] * scale;\n\tlet cx2 = curve[i + 2];\n\tlet cy2 = curve[i + 3] * scale;\n\ttimeline.setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2);\n\treturn bezier + 1;\n}\n\nfunction getValue(map: any, property: string, defaultValue: any) {\n\treturn map[property] !== undefined ? map[property] : defaultValue;\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\n(() => {\n\tif (typeof Math.fround === \"undefined\") {\n\t\tMath.fround = (function (array) {\n\t\t\treturn function (x: number) {\n\t\t\t\treturn array[0] = x, array[0];\n\t\t\t};\n\t\t})(new Float32Array(1));\n\t}\n})();\n\nexport { }", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Skeleton } from \"../Skeleton\";\nimport { Vector2, Color, MathUtils } from \"../Utils\";\nimport { VertexEffect } from \"../VertexEffect\";\n\nexport class JitterEffect implements VertexEffect {\n\tjitterX = 0;\n\tjitterY = 0;\n\n\tconstructor(jitterX: number, jitterY: number) {\n\t\tthis.jitterX = jitterX;\n\t\tthis.jitterY = jitterY;\n\t}\n\n\tbegin(skeleton: Skeleton): void {\n\t}\n\n\ttransform(position: Vector2, uv: Vector2, light: Color, dark: Color): void {\n\t\tposition.x += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\n\t\tposition.y += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\n\t}\n\n\tend(): void {\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Skeleton } from \"../Skeleton\";\nimport { PowOut, Vector2, Color, MathUtils } from \"../Utils\";\nimport { VertexEffect } from \"../VertexEffect\";\n\nexport class SwirlEffect implements VertexEffect {\n\tstatic interpolation = new PowOut(2);\n\tcenterX = 0;\n\tcenterY = 0;\n\tradius = 0;\n\tangle = 0;\n\tprivate worldX = 0;\n\tprivate worldY = 0;\n\n\tconstructor(radius: number) {\n\t\tthis.radius = radius;\n\t}\n\n\tbegin(skeleton: Skeleton): void {\n\t\tthis.worldX = skeleton.x + this.centerX;\n\t\tthis.worldY = skeleton.y + this.centerY;\n\t}\n\n\ttransform(position: Vector2, uv: Vector2, light: Color, dark: Color): void {\n\t\tlet radAngle = this.angle * MathUtils.degreesToRadians;\n\t\tlet x = position.x - this.worldX;\n\t\tlet y = position.y - this.worldY;\n\t\tlet dist = Math.sqrt(x * x + y * y);\n\t\tif (dist < this.radius) {\n\t\t\tlet theta = SwirlEffect.interpolation.apply(0, radAngle, (this.radius - dist) / this.radius);\n\t\t\tlet cos = Math.cos(theta);\n\t\t\tlet sin = Math.sin(theta);\n\t\t\tposition.x = cos * x - sin * y + this.worldX;\n\t\t\tposition.y = sin * x + cos * y + this.worldY;\n\t\t}\n\t}\n\n\tend(): void {\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Texture, TextureFilter, TextureWrap } from \"@esotericsoftware/spine-core\";\n\nexport class CanvasTexture extends Texture {\n\tconstructor(image: HTMLImageElement) {\n\t\tsuper(image);\n\t}\n\n\tsetFilters(minFilter: TextureFilter, magFilter: TextureFilter) { }\n\tsetWraps(uWrap: TextureWrap, vWrap: TextureWrap) { }\n\tdispose() { }\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { AssetManagerBase, Downloader } from \"@esotericsoftware/spine-core\"\nimport { CanvasTexture } from \"./CanvasTexture\";\n\nexport class AssetManager extends AssetManagerBase {\n\tconstructor(pathPrefix: string = \"\", downloader: Downloader = null) {\n\t\tsuper((image: HTMLImageElement) => { return new CanvasTexture(image); }, pathPrefix, downloader);\n\t}\n}\n", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Utils, Color, Skeleton, RegionAttachment, TextureAtlasRegion, BlendMode, MeshAttachment, Slot } from \"@esotericsoftware/spine-core\";\nimport { CanvasTexture } from \"./CanvasTexture\";\n\nexport class SkeletonRenderer {\n\tstatic QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];\n\tstatic VERTEX_SIZE = 2 + 2 + 4;\n\n\tprivate ctx: CanvasRenderingContext2D;\n\n\tpublic triangleRendering = false;\n\tpublic debugRendering = false;\n\tprivate vertices = Utils.newFloatArray(8 * 1024);\n\tprivate tempColor = new Color();\n\n\tconstructor(context: CanvasRenderingContext2D) {\n\t\tthis.ctx = context;\n\t}\n\n\tdraw(skeleton: Skeleton) {\n\t\tif (this.triangleRendering) this.drawTriangles(skeleton);\n\t\telse this.drawImages(skeleton);\n\t}\n\n\tprivate drawImages(skeleton: Skeleton) {\n\t\tlet ctx = this.ctx;\n\t\tlet color = this.tempColor;\n\t\tlet skeletonColor = skeleton.color;\n\t\tlet drawOrder = skeleton.drawOrder;\n\n\t\tif (this.debugRendering) ctx.strokeStyle = \"green\";\n\n\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\n\t\t\tlet slot = drawOrder[i];\n\t\t\tlet bone = slot.bone;\n\t\t\tif (!bone.active) continue;\n\n\t\t\tlet attachment = slot.getAttachment();\n\t\t\tif (!(attachment instanceof RegionAttachment)) continue;\n\t\t\tlet region: TextureAtlasRegion = <TextureAtlasRegion>attachment.region;\n\t\t\tlet image: HTMLImageElement = (<CanvasTexture>region.page.texture).getImage() as HTMLImageElement;\n\n\t\t\tlet slotColor = slot.color;\n\t\t\tlet regionColor = attachment.color;\n\t\t\tcolor.set(skeletonColor.r * slotColor.r * regionColor.r,\n\t\t\t\tskeletonColor.g * slotColor.g * regionColor.g,\n\t\t\t\tskeletonColor.b * slotColor.b * regionColor.b,\n\t\t\t\tskeletonColor.a * slotColor.a * regionColor.a);\n\n\t\t\tctx.save();\n\t\t\tctx.transform(bone.a, bone.c, bone.b, bone.d, bone.worldX, bone.worldY);\n\t\t\tctx.translate(attachment.offset[0], attachment.offset[1]);\n\t\t\tctx.rotate(attachment.rotation * Math.PI / 180);\n\n\t\t\tlet atlasScale = attachment.width / region.originalWidth;\n\t\t\tctx.scale(atlasScale * attachment.scaleX, atlasScale * attachment.scaleY);\n\n\t\t\tlet w = region.width, h = region.height;\n\t\t\tctx.translate(w / 2, h / 2);\n\t\t\tif (attachment.region.degrees == 90) {\n\t\t\t\tlet t = w;\n\t\t\t\tw = h;\n\t\t\t\th = t;\n\t\t\t\tctx.rotate(-Math.PI / 2);\n\t\t\t}\n\t\t\tctx.scale(1, -1);\n\t\t\tctx.translate(-w / 2, -h / 2);\n\n\t\t\tif (color.r != 1 || color.g != 1 || color.b != 1 || color.a != 1) {\n\t\t\t\tctx.globalAlpha = color.a;\n\t\t\t\t// experimental tinting via compositing, doesn't work\n\t\t\t\t// ctx.globalCompositeOperation = \"source-atop\";\n\t\t\t\t// ctx.fillStyle = \"rgba(\" + (color.r * 255 | 0) + \", \" + (color.g * 255 | 0)  + \", \" + (color.b * 255 | 0) + \", \" + color.a + \")\";\n\t\t\t\t// ctx.fillRect(0, 0, w, h);\n\t\t\t}\n\t\t\tctx.drawImage(image, region.x, region.y, w, h, 0, 0, w, h);\n\t\t\tif (this.debugRendering) ctx.strokeRect(0, 0, w, h);\n\t\t\tctx.restore();\n\t\t}\n\t}\n\n\tprivate drawTriangles(skeleton: Skeleton) {\n\t\tlet ctx = this.ctx;\n\t\tlet color = this.tempColor;\n\t\tlet skeletonColor = skeleton.color;\n\t\tlet drawOrder = skeleton.drawOrder;\n\n\t\tlet blendMode: BlendMode = null;\n\t\tlet vertices: ArrayLike<number> = this.vertices;\n\t\tlet triangles: Array<number> = null;\n\n\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\n\t\t\tlet slot = drawOrder[i];\n\t\t\tlet attachment = slot.getAttachment();\n\n\t\t\tlet texture: HTMLImageElement;\n\t\t\tlet region: TextureAtlasRegion;\n\t\t\tif (attachment instanceof RegionAttachment) {\n\t\t\t\tlet regionAttachment = <RegionAttachment>attachment;\n\t\t\t\tvertices = this.computeRegionVertices(slot, regionAttachment, false);\n\t\t\t\ttriangles = SkeletonRenderer.QUAD_TRIANGLES;\n\t\t\t\tregion = <TextureAtlasRegion>regionAttachment.region;\n\t\t\t\ttexture = (<CanvasTexture>region.page.texture).getImage() as HTMLImageElement;\n\t\t\t} else if (attachment instanceof MeshAttachment) {\n\t\t\t\tlet mesh = <MeshAttachment>attachment;\n\t\t\t\tvertices = this.computeMeshVertices(slot, mesh, false);\n\t\t\t\ttriangles = mesh.triangles;\n\t\t\t\ttexture = (<TextureAtlasRegion>mesh.region.renderObject).page.texture.getImage() as HTMLImageElement;\n\t\t\t} else\n\t\t\t\tcontinue;\n\n\t\t\tif (texture) {\n\t\t\t\tif (slot.data.blendMode != blendMode) blendMode = slot.data.blendMode;\n\n\t\t\t\tlet slotColor = slot.color;\n\t\t\t\tlet attachmentColor = attachment.color;\n\t\t\t\tcolor.set(skeletonColor.r * slotColor.r * attachmentColor.r,\n\t\t\t\t\tskeletonColor.g * slotColor.g * attachmentColor.g,\n\t\t\t\t\tskeletonColor.b * slotColor.b * attachmentColor.b,\n\t\t\t\t\tskeletonColor.a * slotColor.a * attachmentColor.a);\n\n\t\t\t\tif (color.r != 1 || color.g != 1 || color.b != 1 || color.a != 1) {\n\t\t\t\t\tctx.globalAlpha = color.a;\n\t\t\t\t\t// experimental tinting via compositing, doesn't work\n\t\t\t\t\t// ctx.globalCompositeOperation = \"source-atop\";\n\t\t\t\t\t// ctx.fillStyle = \"rgba(\" + (color.r * 255 | 0) + \", \" + (color.g * 255 | 0) + \", \" + (color.b * 255 | 0) + \", \" + color.a + \")\";\n\t\t\t\t\t// ctx.fillRect(0, 0, w, h);\n\t\t\t\t}\n\n\t\t\t\tfor (var j = 0; j < triangles.length; j += 3) {\n\t\t\t\t\tlet t1 = triangles[j] * 8, t2 = triangles[j + 1] * 8, t3 = triangles[j + 2] * 8;\n\n\t\t\t\t\tlet x0 = vertices[t1], y0 = vertices[t1 + 1], u0 = vertices[t1 + 6], v0 = vertices[t1 + 7];\n\t\t\t\t\tlet x1 = vertices[t2], y1 = vertices[t2 + 1], u1 = vertices[t2 + 6], v1 = vertices[t2 + 7];\n\t\t\t\t\tlet x2 = vertices[t3], y2 = vertices[t3 + 1], u2 = vertices[t3 + 6], v2 = vertices[t3 + 7];\n\n\t\t\t\t\tthis.drawTriangle(texture, x0, y0, u0, v0, x1, y1, u1, v1, x2, y2, u2, v2);\n\n\t\t\t\t\tif (this.debugRendering) {\n\t\t\t\t\t\tctx.strokeStyle = \"green\";\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo(x0, y0);\n\t\t\t\t\t\tctx.lineTo(x1, y1);\n\t\t\t\t\t\tctx.lineTo(x2, y2);\n\t\t\t\t\t\tctx.lineTo(x0, y0);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.ctx.globalAlpha = 1;\n\t}\n\n\t// Adapted from http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\t// Apache 2 licensed\n\tprivate drawTriangle(img: HTMLImageElement, x0: number, y0: number, u0: number, v0: number,\n\t\tx1: number, y1: number, u1: number, v1: number,\n\t\tx2: number, y2: number, u2: number, v2: number) {\n\t\tlet ctx = this.ctx;\n\n\t\tu0 *= img.width;\n\t\tv0 *= img.height;\n\t\tu1 *= img.width;\n\t\tv1 *= img.height;\n\t\tu2 *= img.width;\n\t\tv2 *= img.height;\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(x0, y0);\n\t\tctx.lineTo(x1, y1);\n\t\tctx.lineTo(x2, y2);\n\t\tctx.closePath();\n\n\t\tx1 -= x0;\n\t\ty1 -= y0;\n\t\tx2 -= x0;\n\t\ty2 -= y0;\n\n\t\tu1 -= u0;\n\t\tv1 -= v0;\n\t\tu2 -= u0;\n\t\tv2 -= v0;\n\n\t\tvar det = 1 / (u1 * v2 - u2 * v1),\n\n\t\t\t// linear transformation\n\t\t\ta = (v2 * x1 - v1 * x2) * det,\n\t\t\tb = (v2 * y1 - v1 * y2) * det,\n\t\t\tc = (u1 * x2 - u2 * x1) * det,\n\t\t\td = (u1 * y2 - u2 * y1) * det,\n\n\t\t\t// translation\n\t\t\te = x0 - a * u0 - c * v0,\n\t\t\tf = y0 - b * u0 - d * v0;\n\n\t\tctx.save();\n\t\tctx.transform(a, b, c, d, e, f);\n\t\tctx.clip();\n\t\tctx.drawImage(img, 0, 0);\n\t\tctx.restore();\n\t}\n\n\tprivate computeRegionVertices(slot: Slot, region: RegionAttachment, pma: boolean) {\n\t\tlet skeletonColor = slot.bone.skeleton.color;\n\t\tlet slotColor = slot.color;\n\t\tlet regionColor = region.color;\n\t\tlet alpha = skeletonColor.a * slotColor.a * regionColor.a;\n\t\tlet multiplier = pma ? alpha : 1;\n\t\tlet color = this.tempColor;\n\t\tcolor.set(skeletonColor.r * slotColor.r * regionColor.r * multiplier,\n\t\t\tskeletonColor.g * slotColor.g * regionColor.g * multiplier,\n\t\t\tskeletonColor.b * slotColor.b * regionColor.b * multiplier,\n\t\t\talpha);\n\n\t\tregion.computeWorldVertices(slot.bone, this.vertices, 0, SkeletonRenderer.VERTEX_SIZE);\n\n\t\tlet vertices = this.vertices;\n\t\tlet uvs = region.uvs;\n\n\t\tvertices[RegionAttachment.C1R] = color.r;\n\t\tvertices[RegionAttachment.C1G] = color.g;\n\t\tvertices[RegionAttachment.C1B] = color.b;\n\t\tvertices[RegionAttachment.C1A] = color.a;\n\t\tvertices[RegionAttachment.U1] = uvs[0];\n\t\tvertices[RegionAttachment.V1] = uvs[1];\n\n\t\tvertices[RegionAttachment.C2R] = color.r;\n\t\tvertices[RegionAttachment.C2G] = color.g;\n\t\tvertices[RegionAttachment.C2B] = color.b;\n\t\tvertices[RegionAttachment.C2A] = color.a;\n\t\tvertices[RegionAttachment.U2] = uvs[2];\n\t\tvertices[RegionAttachment.V2] = uvs[3];\n\n\t\tvertices[RegionAttachment.C3R] = color.r;\n\t\tvertices[RegionAttachment.C3G] = color.g;\n\t\tvertices[RegionAttachment.C3B] = color.b;\n\t\tvertices[RegionAttachment.C3A] = color.a;\n\t\tvertices[RegionAttachment.U3] = uvs[4];\n\t\tvertices[RegionAttachment.V3] = uvs[5];\n\n\t\tvertices[RegionAttachment.C4R] = color.r;\n\t\tvertices[RegionAttachment.C4G] = color.g;\n\t\tvertices[RegionAttachment.C4B] = color.b;\n\t\tvertices[RegionAttachment.C4A] = color.a;\n\t\tvertices[RegionAttachment.U4] = uvs[6];\n\t\tvertices[RegionAttachment.V4] = uvs[7];\n\n\t\treturn vertices;\n\t}\n\n\tprivate computeMeshVertices(slot: Slot, mesh: MeshAttachment, pma: boolean) {\n\t\tlet skeletonColor = slot.bone.skeleton.color;\n\t\tlet slotColor = slot.color;\n\t\tlet regionColor = mesh.color;\n\t\tlet alpha = skeletonColor.a * slotColor.a * regionColor.a;\n\t\tlet multiplier = pma ? alpha : 1;\n\t\tlet color = this.tempColor;\n\t\tcolor.set(skeletonColor.r * slotColor.r * regionColor.r * multiplier,\n\t\t\tskeletonColor.g * slotColor.g * regionColor.g * multiplier,\n\t\t\tskeletonColor.b * slotColor.b * regionColor.b * multiplier,\n\t\t\talpha);\n\n\t\tlet vertexCount = mesh.worldVerticesLength / 2;\n\t\tlet vertices = this.vertices;\n\t\tif (vertices.length < mesh.worldVerticesLength) this.vertices = vertices = Utils.newFloatArray(mesh.worldVerticesLength);\n\t\tmesh.computeWorldVertices(slot, 0, mesh.worldVerticesLength, vertices, 0, SkeletonRenderer.VERTEX_SIZE);\n\n\t\tlet uvs = mesh.uvs;\n\t\tfor (let i = 0, u = 0, v = 2; i < vertexCount; i++) {\n\t\t\tvertices[v++] = color.r;\n\t\t\tvertices[v++] = color.g;\n\t\t\tvertices[v++] = color.b;\n\t\t\tvertices[v++] = color.a;\n\t\t\tvertices[v++] = uvs[u++];\n\t\t\tvertices[v++] = uvs[u++];\n\t\t\tv += 2;\n\t\t}\n\n\t\treturn vertices;\n\t}\n}"],
  "mappings": "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",
  "names": []
}
