// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/spine_flutter.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class SpineFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SpineFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SpineFlutterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int spine_major_version() {
    return _spine_major_version();
  }

  late final _spine_major_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('spine_major_version');
  late final _spine_major_version =
      _spine_major_versionPtr.asFunction<int Function()>();

  int spine_minor_version() {
    return _spine_minor_version();
  }

  late final _spine_minor_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('spine_minor_version');
  late final _spine_minor_version =
      _spine_minor_versionPtr.asFunction<int Function()>();

  ffi.Pointer<spine_atlas> spine_atlas_load(
    ffi.Pointer<ffi.Int8> atlasData,
  ) {
    return _spine_atlas_load(
      atlasData,
    );
  }

  late final _spine_atlas_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<spine_atlas> Function(
              ffi.Pointer<ffi.Int8>)>>('spine_atlas_load');
  late final _spine_atlas_load = _spine_atlas_loadPtr
      .asFunction<ffi.Pointer<spine_atlas> Function(ffi.Pointer<ffi.Int8>)>();

  void spine_atlas_dispose(
    ffi.Pointer<spine_atlas> atlas,
  ) {
    return _spine_atlas_dispose(
      atlas,
    );
  }

  late final _spine_atlas_disposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<spine_atlas>)>>(
          'spine_atlas_dispose');
  late final _spine_atlas_dispose = _spine_atlas_disposePtr
      .asFunction<void Function(ffi.Pointer<spine_atlas>)>();

  ffi.Pointer<spine_skeleton_data> spine_skeleton_data_load_json(
    ffi.Pointer<spine_atlas> atlas,
    ffi.Pointer<ffi.Int8> skeletonData,
  ) {
    return _spine_skeleton_data_load_json(
      atlas,
      skeletonData,
    );
  }

  late final _spine_skeleton_data_load_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<spine_skeleton_data> Function(ffi.Pointer<spine_atlas>,
              ffi.Pointer<ffi.Int8>)>>('spine_skeleton_data_load_json');
  late final _spine_skeleton_data_load_json =
      _spine_skeleton_data_load_jsonPtr.asFunction<
          ffi.Pointer<spine_skeleton_data> Function(
              ffi.Pointer<spine_atlas>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<spine_skeleton_data> spine_skeleton_data_load_binary(
    ffi.Pointer<spine_atlas> atlas,
    ffi.Pointer<ffi.Uint8> skeletonData,
    int length,
  ) {
    return _spine_skeleton_data_load_binary(
      atlas,
      skeletonData,
      length,
    );
  }

  late final _spine_skeleton_data_load_binaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<spine_skeleton_data> Function(
              ffi.Pointer<spine_atlas>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32)>>('spine_skeleton_data_load_binary');
  late final _spine_skeleton_data_load_binary =
      _spine_skeleton_data_load_binaryPtr.asFunction<
          ffi.Pointer<spine_skeleton_data> Function(
              ffi.Pointer<spine_atlas>, ffi.Pointer<ffi.Uint8>, int)>();

  void spine_skeleton_data_dispose(
    ffi.Pointer<spine_skeleton_data> skeletonData,
  ) {
    return _spine_skeleton_data_dispose(
      skeletonData,
    );
  }

  late final _spine_skeleton_data_disposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<spine_skeleton_data>)>>(
      'spine_skeleton_data_dispose');
  late final _spine_skeleton_data_dispose = _spine_skeleton_data_disposePtr
      .asFunction<void Function(ffi.Pointer<spine_skeleton_data>)>();

  ffi.Pointer<spine_skeleton_drawable> spine_skeleton_drawable_create(
    ffi.Pointer<spine_skeleton_data> skeletonData,
  ) {
    return _spine_skeleton_drawable_create(
      skeletonData,
    );
  }

  late final _spine_skeleton_drawable_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<spine_skeleton_drawable> Function(
                  ffi.Pointer<spine_skeleton_data>)>>(
      'spine_skeleton_drawable_create');
  late final _spine_skeleton_drawable_create =
      _spine_skeleton_drawable_createPtr.asFunction<
          ffi.Pointer<spine_skeleton_drawable> Function(
              ffi.Pointer<spine_skeleton_data>)>();

  void spine_skeleton_drawable_update(
    ffi.Pointer<spine_skeleton_drawable> drawable,
    double deltaTime,
  ) {
    return _spine_skeleton_drawable_update(
      drawable,
      deltaTime,
    );
  }

  late final _spine_skeleton_drawable_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<spine_skeleton_drawable>,
              ffi.Float)>>('spine_skeleton_drawable_update');
  late final _spine_skeleton_drawable_update =
      _spine_skeleton_drawable_updatePtr.asFunction<
          void Function(ffi.Pointer<spine_skeleton_drawable>, double)>();

  ffi.Pointer<spine_render_command> spine_skeleton_drawable_render(
    ffi.Pointer<spine_skeleton_drawable> drawable,
  ) {
    return _spine_skeleton_drawable_render(
      drawable,
    );
  }

  late final _spine_skeleton_drawable_renderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<spine_render_command> Function(
                  ffi.Pointer<spine_skeleton_drawable>)>>(
      'spine_skeleton_drawable_render');
  late final _spine_skeleton_drawable_render =
      _spine_skeleton_drawable_renderPtr.asFunction<
          ffi.Pointer<spine_render_command> Function(
              ffi.Pointer<spine_skeleton_drawable>)>();

  void spine_skeleton_drawable_dispose(
    ffi.Pointer<spine_skeleton_drawable> drawable,
  ) {
    return _spine_skeleton_drawable_dispose(
      drawable,
    );
  }

  late final _spine_skeleton_drawable_disposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<spine_skeleton_drawable>)>>(
      'spine_skeleton_drawable_dispose');
  late final _spine_skeleton_drawable_dispose =
      _spine_skeleton_drawable_disposePtr
          .asFunction<void Function(ffi.Pointer<spine_skeleton_drawable>)>();
}

class spine_atlas extends ffi.Struct {
  external ffi.Pointer<ffi.Void> atlas;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> imagePaths;

  @ffi.Int32()
  external int numImagePaths;

  external ffi.Pointer<ffi.Int8> error;
}

class spine_skeleton_data extends ffi.Struct {
  external ffi.Pointer<ffi.Void> skeletonData;

  external ffi.Pointer<ffi.Int8> error;
}

abstract class spine_blend_mode {
  static const int SPINE_BLEND_MODE_NORMAL = 0;
  static const int SPINE_BLEND_MODE_ADDITIVE = 1;
  static const int SPINE_BLEND_MODE_MULTIPLY = 2;
  static const int SPINE_BLEND_MODE_SCREEN = 3;
}

class spine_render_command extends ffi.Struct {
  external ffi.Pointer<ffi.Float> positions;

  external ffi.Pointer<ffi.Float> uvs;

  external ffi.Pointer<ffi.Int32> colors;

  @ffi.Int32()
  external int numVertices;

  external ffi.Pointer<ffi.Uint16> indices;

  @ffi.Int32()
  external int numIndices;

  @ffi.Int32()
  external int atlasPage;

  @ffi.Int32()
  external int blendMode;

  external ffi.Pointer<spine_render_command> next;
}

class spine_skeleton_drawable extends ffi.Struct {
  external ffi.Pointer<ffi.Void> skeleton;

  external ffi.Pointer<ffi.Void> animationState;

  external ffi.Pointer<spine_render_command> renderCommand;
}
